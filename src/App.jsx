import React, { useState, useEffect, useRef, useCallback } from 'react';
import Header from './components/Header';
import MainGameScreen from './components/MainGameScreen';
import Tutorial from './components/Tutorial';
import NavBar from './components/NavBar';
import TuningScreen from './components/TuningScreen';
import RaceScreen from './components/RaceScreen';
import ShopScreen from './components/ShopScreen';
import StaffScreen from './components/StaffScreen';
import CarSelector from './components/CarSelector';
import LeaderboardScreen from './components/LeaderboardScreen';
import FriendsScreen from './components/FriendsScreen';
import LoadingScreen from './components/LoadingScreen';
import { useGameState } from './hooks/useGameState';
import { useGameHandlers } from './hooks/useGameHandlers'; // ‚úÖ –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import {
  calculateStaffCost,
  CAR_CATALOG,
  STAFF_CATALOG,
  MAX_OFFLINE_HOURS,
  UPDATE_INTERVAL
} from './utils';
import './App.css';

function App() {
  // –ó–ê–©–ò–¢–ê –û–¢ –î–í–û–ô–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const initializationRef = useRef(false);
  const isInitializedRef = useRef(false);
  
  // Telegram –∏ UI —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const [isLoading, setIsLoading] = useState(true);
  const [hasLoadedData, setHasLoadedData] = useState(false);
  const [error, setError] = useState(null);
  const [tgUserData, setTgUserData] = useState(null);
  const [isTgApp, setIsTgApp] = useState(false);
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const [activeScreen, setActiveScreen] = useState('garage');
  const [isTuningVisible, setIsTuningVisible] = useState(false);
  const [isCarSelectorVisible, setIsCarSelectorVisible] = useState(false);

  // ‚úÖ getUserId —Ñ—É–Ω–∫—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const getUserId = useCallback(() => {
    if (isTgApp && tgUserData?.id) {
      const userId = tgUserData.id.toString();
      console.log('üÜî getUserId (Telegram):', userId);
      return userId;
    } else if (!isTgApp) {
      console.log('üÜî getUserId (Standalone): default');
      return 'default';
    }
    
    console.log('üÜî getUserId: null (–Ω–µ –≥–æ—Ç–æ–≤)');
    return null;
  }, [isTgApp, tgUserData?.id]);

  // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú useGameState —Ö—É–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const gameState = useGameState(getUserId);

  // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô useGameHandlers —Ö—É–∫ - –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const gameHandlers = useGameHandlers({
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    gameCoins: gameState.gameCoins,
    setGameCoins: gameState.setGameCoins,
    currentXp: gameState.currentXp,
    setCurrentXp: gameState.setCurrentXp,
    accumulatedIncome: gameState.accumulatedIncome,
    setAccumulatedIncome: gameState.setAccumulatedIncome,
    lastCollectedTimeRef: gameState.lastCollectedTimeRef,
    incomeRatePerHour: gameState.incomeRatePerHour,
    setIncomeRatePerHour: gameState.setIncomeRatePerHour,
    
    // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    buildings: gameState.buildings,
    setBuildings: gameState.setBuildings,
    playerCars: gameState.playerCars,
    setPlayerCars: gameState.setPlayerCars,
    selectedCarId: gameState.selectedCarId,
    setSelectedCarId: gameState.setSelectedCarId,
    hiredStaff: gameState.hiredStaff,
    setHiredStaff: gameState.setHiredStaff,
    currentCar: gameState.currentCar,
    
    // –¢—É—Ç–æ—Ä–∏–∞–ª
    isTutorialActive: gameState.isTutorialActive,
    tutorialStep: gameState.tutorialStep,
    setTutorialStep: gameState.setTutorialStep,
    setIsTutorialActive: gameState.setIsTutorialActive,
    setHasCompletedTutorial: gameState.setHasCompletedTutorial,
    
    // –¢–æ–ø–ª–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    fuelSystem: gameState.fuelSystem,
    
    // –§—É–Ω–∫—Ü–∏–∏
    saveGameState: gameState.saveGameState
  });

  // ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const handleLoadingComplete = useCallback(() => {
    console.log('üéÆ –ó–∞—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É');
    setIsLoading(false);
  }, []);

  // ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    if (initializationRef.current) {
      console.log('‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }
    
    const initializeApp = async () => {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      initializationRef.current = true;
      
      const tg = window.Telegram?.WebApp;
      if (tg) {
        console.log('‚úÖ Telegram WebApp –Ω–∞–π–¥–µ–Ω');
        
        setIsTgApp(true);
        const userData = tg.initDataUnsafe?.user || null;
        setTgUserData(userData);
        
        if (userData && typeof userData === 'object') {
          const firstName = userData.first_name || userData.firstName || userData.username || '–ò–≥—Ä–æ–∫';
          gameState.setPlayerName(firstName);
          console.log('üìù Player name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', firstName);
        }
        
        tg.ready();
        tg.expand();
        tg.BackButton.hide();
        tg.MainButton.hide();
        
        await new Promise(resolve => setTimeout(resolve, 200));
        
        if (userData?.id) {
          await loadGameDataWrapper(userData.id.toString());
        } else {
          console.error('‚ùå –ù–µ—Ç userId –≤ Telegram –¥–∞–Ω–Ω—ã—Ö');
          setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
          setIsLoading(false);
        }
      } else {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–∂–∏–º standalone');
        setIsTgApp(false);
        await loadGameDataWrapper('default');
      }
    };

    const loadGameDataWrapper = async (userId) => {
      if (hasLoadedData || isInitializedRef.current) {
        console.log('‚è≠Ô∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return;
      }

      setHasLoadedData(true);
      isInitializedRef.current = true;
      
      try {
        const result = await gameState.loadGameData(userId);
        
        if (result.success) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ —Ö—É–∫');
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ —Ö—É–∫:', result.error);
          setError(result.error);
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ loadGameDataWrapper:', err.message);
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`);
      }
    };

    initializeApp();

    return () => {
      gameState.cleanup();
    };
  }, []);

  // ‚úÖ –¢–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    if (gameState.incomeRatePerHour <= 0 || isLoading) {
      return;
    }
    
    const incomePerSecond = gameState.incomeRatePerHour / 3600;
    const maxAccumulationCap = gameState.incomeRatePerHour * MAX_OFFLINE_HOURS;
    
    const intervalId = setInterval(() => {
      const now = Date.now();
      const timePassedTotalSeconds = (now - gameState.lastCollectedTimeRef.current) / 1000;
      
      if (!isFinite(timePassedTotalSeconds) || !isFinite(incomePerSecond) || timePassedTotalSeconds < 0) {
        return;
      }
      
      const potentialTotalIncome = timePassedTotalSeconds * incomePerSecond;
      const newAccumulated = Math.min(potentialTotalIncome, maxAccumulationCap);
      
      if (isFinite(newAccumulated) && newAccumulated >= 0) {
        gameState.setAccumulatedIncome(newAccumulated);
      }
    }, UPDATE_INTERVAL);
    
    return () => clearInterval(intervalId);
  }, [gameState.incomeRatePerHour, isLoading, gameState.lastCollectedTimeRef, gameState.setAccumulatedIncome]);

  // ‚úÖ ESC handler (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === 'Escape' && isLoading) {
        console.log('üîß –ó–∞—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (ESC)');
        setIsLoading(false);
      }
    };
    
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [isLoading]);

  // ‚úÖ UI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ç–æ–ª—å–∫–æ UI, –∏–≥—Ä–æ–≤—ã–µ —Ç–µ–ø–µ—Ä—å –≤ useGameHandlers)
  const handleNavClick = useCallback((screenId) => {
    setIsTuningVisible(false);
    setIsCarSelectorVisible(false);
    setActiveScreen(screenId);
  }, []);

  const handleOpenTuning = useCallback(() => {
    setIsTuningVisible(true);
  }, []);

  const handleCloseTuning = useCallback(() => {
    setIsTuningVisible(false);
  }, []);

  const handleOpenCarSelector = useCallback(() => {
    setIsCarSelectorVisible(true);
  }, []);
  
  const handleCloseCarSelector = useCallback(() => {
    setIsCarSelectorVisible(false);
  }, []);

  // ‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ä–∞—Å—à–∏—Ä—è—é—Ç –ª–æ–≥–∏–∫—É –∏–∑ useGameHandlers)
  const handleSelectCarWithClose = useCallback((carId) => {
    gameHandlers.handleSelectCar(carId);
    setIsCarSelectorVisible(false); // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ UI
  }, [gameHandlers.handleSelectCar]);

  const handleTutorialActionWithUI = useCallback((action) => {
    const result = gameHandlers.handleTutorialAction(action);
    
    // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è UI –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result === 'close-tuning') {
      setIsTuningVisible(false);
    }
  }, [gameHandlers.handleTutorialAction]);

  // ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ gameState)
  const xpPercentage = gameState.xpToNextLevel > 0 ? Math.min((gameState.currentXp / gameState.xpToNextLevel) * 100, 100) : 0;

  // ‚úÖ –ü–û–ö–ê–ó –ó–ê–°–¢–ê–í–ö–ò –ó–ê–ì–†–£–ó–ö–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  if (isLoading) {
    return <LoadingScreen onLoadingComplete={handleLoadingComplete} />;
  }

  // –†–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  if (error) {
    return (
      <div className="error-screen">
        <div className="error-content">
          <div className="error-icon">‚ùå</div>
          <div>–û—à–∏–±–∫–∞: {error}</div>
          <button 
            onClick={() => window.location.reload()} 
            className="retry-button"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // ‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –ß–ò–°–¢–´–ô –†–ï–ù–î–ï–† - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ gameHandlers
  return (
    <div className="App">
      <div className="header-container">
        <Header
          level={gameState.playerLevel}
          playerName={gameState.playerName}
          playerPhoto={gameState.playerPhoto} // ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£!
          gameCoins={gameState.gameCoins}
          jetCoins={gameState.jetCoins}
          xpPercentage={xpPercentage}
          onShowTutorial={gameHandlers.handleShowTutorial}
        />
      </div>

      <main className="main-content">
        {activeScreen === 'garage' && gameState.currentCar && (
          <MainGameScreen
            car={gameState.currentCar}
            incomeRate={gameState.incomeRatePerHour}
            accumulatedIncome={gameState.accumulatedIncome}
            maxAccumulation={gameState.incomeRatePerHour * MAX_OFFLINE_HOURS}
            gameCoins={gameState.gameCoins}
            buildings={gameState.buildings}
            onCollect={gameHandlers.handleCollect}
            onTuneClick={handleOpenTuning}
            onOpenCarSelector={handleOpenCarSelector}
            onBuildingClick={gameHandlers.handleBuildingClick}
          />
        )}

        {activeScreen === 'race' && gameState.currentCar && (
          <RaceScreen
            playerCar={gameState.currentCar}
            onStartRace={gameHandlers.handleStartRace}
            onAdReward={gameHandlers.handleAdReward}
            fuelCount={gameState.fuelSystem.fuelCount}
            lastRaceTime={gameState.fuelSystem.lastRaceTime}
            fuelRefillTime={gameState.fuelSystem.fuelRefillTime}
            onFuelUpdate={gameHandlers.handleFuelUpdate}
            onFuelRefillByAd={gameHandlers.handleFuelRefillByAd}
          />
        )}

        {activeScreen === 'shop' && (
          <ShopScreen
            catalog={CAR_CATALOG}
            playerCars={gameState.playerCars}
            gameCoins={gameState.gameCoins}
            onBuyCar={gameHandlers.handleBuyCar}
          />
        )}

        {activeScreen === 'staff' && (
          <StaffScreen
            staffCatalog={STAFF_CATALOG}
            hiredStaff={gameState.hiredStaff}
            gameCoins={gameState.gameCoins}
            onHireOrUpgrade={gameHandlers.handleHireOrUpgradeStaff}
            calculateCost={(staffId) => calculateStaffCost(staffId, gameState.hiredStaff)}
          />
        )}

        {activeScreen === 'leaderboard' && (
          <LeaderboardScreen
            tgUserData={tgUserData}
          />
        )}

        {activeScreen === 'friends' && (
          <FriendsScreen
            tgUserData={tgUserData}
            onBalanceUpdate={gameHandlers.handleReferralRewardUpdate}
          />
        )}

        {activeScreen === 'p2e' && (
          <div className="placeholder-screen">
            <div className="placeholder-content">
              <div className="placeholder-icon">üéÆ</div>
              <div className="placeholder-title">Play to Earn</div>
              <div className="placeholder-subtitle">
                –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!
              </div>
            </div>
          </div>
        )}
      </main>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {isTuningVisible && gameState.currentCar && (
        <TuningScreen
          car={gameState.currentCar}
          gameCoins={gameState.gameCoins}
          onClose={handleCloseTuning}
          onUpgrade={gameHandlers.handleUpgradePart}
        />
      )}

      {isCarSelectorVisible && (
        <CarSelector
          playerCars={gameState.playerCars}
          selectedCarId={gameState.selectedCarId}
          onSelectCar={handleSelectCarWithClose}
          onClose={handleCloseCarSelector}
        />
      )}

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <NavBar
        activeScreen={activeScreen}
        onScreenChange={handleNavClick}
      />
      
      {/* –¢—É—Ç–æ—Ä–∏–∞–ª */}
      <Tutorial
        isActive={gameState.isTutorialActive}
        currentStep={gameState.tutorialStep}
        onNext={gameHandlers.handleTutorialNext}
        onComplete={gameHandlers.handleTutorialComplete}
        onAction={handleTutorialActionWithUI}
        gameState={{
          gameCoins: gameState.gameCoins,
          incomeRate: gameState.incomeRatePerHour,
          accumulatedIncome: gameState.accumulatedIncome
        }}
      />
    </div>
  );
}

export default App;