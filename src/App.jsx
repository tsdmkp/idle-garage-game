import React, { useState, useEffect, useRef, useCallback } from 'react';
import Header from './components/Header';
import MainGameScreen from './components/MainGameScreen';
import Tutorial from './components/Tutorial';
import NavBar from './components/NavBar';
import TuningScreen from './components/TuningScreen';
import RaceScreen from './components/RaceScreen';
import ShopScreen from './components/ShopScreen';
import StaffScreen from './components/StaffScreen';
import CarSelector from './components/CarSelector';
import LeaderboardScreen from './components/LeaderboardScreen';
import FriendsScreen from './components/FriendsScreen';
import {
  calculateUpgradeCost,
  calculateBuildingCost,
  recalculateStatsAndIncomeBonus,
  calculateTotalIncomeRate,
  simulateRace,
  calculateStaffCost,
  getInitialPlayerCar,
  BASE_CAR_STATS,
  CAR_CATALOG,
  STAFF_CATALOG,
  INITIAL_BUILDINGS,
  MAX_OFFLINE_HOURS,
  UPDATE_INTERVAL,
  STARTING_COINS
} from './utils';
import apiClient from './apiClient';
import './App.css';

const INITIAL_CAR = getInitialPlayerCar();
const INITIAL_HIRED_STAFF = (() => {
  const init = {};
  for (const id in STAFF_CATALOG) {
    init[id] = 0;
  }
  return init;
})();

function App() {
  const [isLoading, setIsLoading] = useState(true);
  const [hasLoadedData, setHasLoadedData] = useState(false);
  const [error, setError] = useState(null);
  const [tgUserData, setTgUserData] = useState(null);
  const [isTgApp, setIsTgApp] = useState(false);
  const [playerLevel, setPlayerLevel] = useState(1);
  const [playerName, setPlayerName] = useState('–ò–≥—Ä–æ–∫');
  const [gameCoins, setGameCoins] = useState(STARTING_COINS);
  const [jetCoins, setJetCoins] = useState(0);
  const [currentXp, setCurrentXp] = useState(10);
  const [xpToNextLevel, setXpToNextLevel] = useState(100);
  const [incomeRatePerHour, setIncomeRatePerHour] = useState(0);
  const lastCollectedTimeRef = useRef(Date.now());
  const [accumulatedIncome, setAccumulatedIncome] = useState(0);
  const [buildings, setBuildings] = useState(INITIAL_BUILDINGS);
  const [playerCars, setPlayerCars] = useState(() => [INITIAL_CAR]);
  const [selectedCarId, setSelectedCarId] = useState(INITIAL_CAR.id);
  const [hiredStaff, setHiredStaff] = useState(INITIAL_HIRED_STAFF);
  const [activeScreen, setActiveScreen] = useState('garage');
  const [isTuningVisible, setIsTuningVisible] = useState(false);
  const [isCarSelectorVisible, setIsCarSelectorVisible] = useState(false);
  
  const [isTutorialActive, setIsTutorialActive] = useState(false);
  const [tutorialStep, setTutorialStep] = useState(0);
  const [hasCompletedTutorial, setHasCompletedTutorial] = useState(false);

  const currentCar = playerCars.find(car => car.id === selectedCarId) || playerCars[0] || null;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º userId –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  const getUserId = useCallback(() => {
    if (isTgApp && tgUserData?.id) {
      const userId = tgUserData.id.toString();
      console.log('üÜî getUserId (Telegram):', userId);
      return userId;
    } else if (!isTgApp) {
      console.log('üÜî getUserId (Standalone): default');
      return 'default';
    }
    console.log('üÜî getUserId: null (–Ω–µ –≥–æ—Ç–æ–≤)');
    return null;
  }, [isTgApp, tgUserData?.id]);

  const saveGameState = useCallback(async (updates = {}) => {
    const userId = getUserId();
    if (!userId) {
      console.warn('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: userId –Ω–µ –≥–æ—Ç–æ–≤');
      return;
    }

    const stateToSave = {
      userId: userId,
      player_level: playerLevel,
      first_name: playerName,
      game_coins: gameCoins,
      jet_coins: jetCoins,
      current_xp: currentXp,
      xp_to_next_level: xpToNextLevel,
      income_rate_per_hour: incomeRatePerHour,
      last_collected_time: new Date(lastCollectedTimeRef.current).toISOString(),
      buildings: buildings,
      player_cars: playerCars,
      selected_car_id: selectedCarId,
      hired_staff: hiredStaff,
      has_completed_tutorial: hasCompletedTutorial,
      last_exit_time: new Date().toISOString(),
      ...updates
    };

    try {
      console.log('üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è userId:', userId, stateToSave);
      await apiClient('/game_state', 'POST', { body: stateToSave });
      console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err.message);
    }
  }, [
    getUserId, playerLevel, playerName, gameCoins, jetCoins, currentXp, xpToNextLevel,
    incomeRatePerHour, buildings, playerCars, selectedCarId, hiredStaff, hasCompletedTutorial
  ]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp –ò –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const initializeApp = async () => {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram
      const tg = window.Telegram?.WebApp;
      if (tg) {
        console.log('‚úÖ Telegram WebApp –Ω–∞–π–¥–µ–Ω');
        console.log('üìã Telegram WebApp initData:', tg.initData);
        console.log('üìã Telegram WebApp initDataUnsafe:', tg.initDataUnsafe);
        console.log('üîó Start param:', tg.initDataUnsafe?.start_param);
        
        setIsTgApp(true);
        const userData = tg.initDataUnsafe?.user || null;
        console.log('üë§ Telegram user data:', JSON.stringify(userData, null, 2));
        setTgUserData(userData);
        
        if (userData && typeof userData === 'object') {
          const firstName = userData.first_name || userData.firstName || userData.username || '–ò–≥—Ä–æ–∫';
          setPlayerName(firstName);
          console.log('üìù Player name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', firstName);
        } else {
          console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ userData:', userData);
        }
        
        tg.ready();
        tg.expand();
        tg.BackButton.hide();
        tg.MainButton.hide();
        
        // –í–ê–ñ–ù–û: –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã initData —Ç–æ—á–Ω–æ –±—ã–ª –≥–æ—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 100));
        console.log('üìã Final initData after ready():', tg.initData);

        // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º userId
        if (userData?.id) {
          await loadGameData(userData.id.toString());
        } else {
          console.error('‚ùå –ù–µ—Ç userId –≤ Telegram –¥–∞–Ω–Ω—ã—Ö');
          setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram');
          setIsLoading(false);
        }
      } else {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–∂–∏–º standalone');
        setIsTgApp(false);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è standalone —Ä–µ–∂–∏–º–∞
        await loadGameData('default');
      }
    };

    const loadGameData = async (userId) => {
      if (hasLoadedData) {
        console.log('‚è≠Ô∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
        return;
      }

      console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è userId:', userId);
      setHasLoadedData(true);
      
      try {
        const initialState = await apiClient('/game_state', 'GET', { params: { userId } });
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–∞:', initialState);

        if (initialState && typeof initialState === 'object') {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±—ç–∫–µ–Ω–¥–∞
          setPlayerLevel(initialState.player_level ?? playerLevel);
          if (initialState.first_name && initialState.first_name !== '–ò–≥—Ä–æ–∫') {
            setPlayerName(initialState.first_name);
            console.log('üìù –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –±—ç–∫–µ–Ω–¥–∞:', initialState.first_name);
          }
          
          let coinsToSet = initialState.game_coins;
          if (typeof coinsToSet === 'string') {
            coinsToSet = parseInt(coinsToSet) || STARTING_COINS;
          }
          setGameCoins(coinsToSet || STARTING_COINS);
          console.log('üí∞ –ú–æ–Ω–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', coinsToSet || STARTING_COINS);
          
          setJetCoins(parseInt(initialState.jet_coins) || 0);
          setCurrentXp(initialState.current_xp ?? currentXp);
          setXpToNextLevel(initialState.xp_to_next_level ?? xpToNextLevel);
          
          const savedTutorial = initialState.has_completed_tutorial;
          setHasCompletedTutorial(savedTutorial || false);
          console.log('üéì –¢—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω:', savedTutorial);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ò —ç—Ç–æ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫
          if (!savedTutorial && (initialState.player_level === 1 || !initialState.player_level)) {
            console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
            setTimeout(() => {
              setIsTutorialActive(true);
              setTutorialStep(0);
              // –î–∞–µ–º –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
              setAccumulatedIncome(25); // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–±–æ—Ä–∞ –≤ —Ç—É—Ç–æ—Ä–∏–∞–ª–µ
            }, 1000);
          } else {
            console.log('‚è≠Ô∏è –¢—É—Ç–æ—Ä–∏–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω:', { 
              tutorialCompleted: savedTutorial, 
              playerLevel: initialState.player_level 
            });
          }

          const loadedLastCollectedTime = initialState.last_collected_time ? new Date(initialState.last_collected_time).getTime() : Date.now();
          const loadedLastExitTime = initialState.last_exit_time ? new Date(initialState.last_exit_time).getTime() : loadedLastCollectedTime;
          lastCollectedTimeRef.current = isFinite(loadedLastCollectedTime) ? loadedLastCollectedTime : Date.now();
          console.log('‚è∞ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞:', new Date(lastCollectedTimeRef.current).toISOString());

          const now = Date.now();
          const offlineTimeMs = Math.max(0, now - loadedLastExitTime);
          console.log('‚è±Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω –≤—Ä–µ–º—è (–º—Å):', offlineTimeMs);

          let loadedBuildings = INITIAL_BUILDINGS;
          if (initialState?.buildings && Array.isArray(initialState.buildings) && initialState.buildings.length > 0) {
            const validBuildings = initialState.buildings.every(building => 
              building && 
              typeof building.id === 'string' && 
              typeof building.name === 'string' && 
              typeof building.icon === 'string' &&
              typeof building.level === 'number' &&
              typeof building.isLocked === 'boolean'
            );
            
            if (validBuildings) {
              loadedBuildings = initialState.buildings;
              console.log('üè¢ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–∞–Ω–∏—è —Å –±—ç–∫–µ–Ω–¥–∞:', loadedBuildings);
            } else {
              console.warn('‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ');
            }
          } else {
            console.log('üè¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–¥–∞–Ω–∏—è');
          }
          setBuildings(loadedBuildings);

          const loadedHiredStaff = initialState.hired_staff ?? INITIAL_HIRED_STAFF;
          setHiredStaff(loadedHiredStaff);
          console.log('üë• –ó–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª:', loadedHiredStaff);

          const loadedPlayerCarsRaw = Array.isArray(initialState.player_cars) ? initialState.player_cars : [INITIAL_CAR];
          const loadedPlayerCars = loadedPlayerCarsRaw.map(sc =>
            sc && sc.id && sc.parts ? { ...sc, stats: recalculateStatsAndIncomeBonus(sc.id, sc.parts).stats } : null
          ).filter(Boolean);
          const actualPlayerCars = loadedPlayerCars.length > 0 ? loadedPlayerCars : [INITIAL_CAR];
          setPlayerCars(actualPlayerCars);
          console.log('üöó –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–∞—à–∏–Ω—ã:', actualPlayerCars);

          const loadedSelectedCarId = initialState.selected_car_id;
          const finalSelectedCarId = loadedSelectedCarId && actualPlayerCars.some(c => c.id === loadedSelectedCarId)
            ? loadedSelectedCarId
            : actualPlayerCars[0]?.id || INITIAL_CAR.id;
          setSelectedCarId(finalSelectedCarId);
          console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞:', finalSelectedCarId);

          const carToCalculateFrom = actualPlayerCars.find(c => c.id === finalSelectedCarId) || actualPlayerCars[0] || INITIAL_CAR;
          const initialTotalRate = calculateTotalIncomeRate(loadedBuildings, carToCalculateFrom, loadedHiredStaff);
          setIncomeRatePerHour(initialTotalRate);
          console.log('üí∏ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞:', initialTotalRate);
          
          let offlineIncome = 0;
          if (offlineTimeMs > 0 && initialTotalRate > 0) {
            offlineIncome = (initialTotalRate / 3600) * Math.min(offlineTimeMs / 1000, MAX_OFFLINE_HOURS * 3600);
            console.log('üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω –æ—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥:', offlineIncome);
          }
          setAccumulatedIncome(offlineIncome);
        } else {
          console.error('‚ùå –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞');
          setBuildings(INITIAL_BUILDINGS);
          setPlayerCars([INITIAL_CAR]);
          setSelectedCarId(INITIAL_CAR.id);
          setHiredStaff(INITIAL_HIRED_STAFF);
          setIncomeRatePerHour(calculateTotalIncomeRate(INITIAL_BUILDINGS, INITIAL_CAR, INITIAL_HIRED_STAFF));
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`);
      } finally {
        setIsLoading(false);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, isLoading = false');
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (!hasLoadedData) {
      initializeApp();
    }

    return () => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      const userId = getUserId();
      if (userId) {
        apiClient('/game_state', 'POST', {
          body: {
            userId: userId,
            last_exit_time: new Date().toISOString(),
          }
        }).catch(err => console.error('Failed to save last exit time:', err));
      }
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –¢–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∞
  useEffect(() => {
    if (incomeRatePerHour <= 0 || isLoading) {
      console.log('‚è∏Ô∏è –¢–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω:', { incomeRatePerHour, isLoading });
      return;
    }
    
    console.log('‚ñ∂Ô∏è –¢–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é:', incomeRatePerHour);
    const incomePerSecond = incomeRatePerHour / 3600;
    const maxAccumulationCap = incomeRatePerHour * MAX_OFFLINE_HOURS;
    
    const intervalId = setInterval(() => {
      const now = Date.now();
      const timePassedTotalSeconds = (now - lastCollectedTimeRef.current) / 1000;
      if (!isFinite(timePassedTotalSeconds) || !isFinite(incomePerSecond) || timePassedTotalSeconds < 0) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–æ—Ö–æ–¥–∞:', { timePassedTotalSeconds, incomePerSecond });
        return;
      }
      const potentialTotalIncome = timePassedTotalSeconds * incomePerSecond;
      const newAccumulated = Math.min(potentialTotalIncome, maxAccumulationCap);
      setAccumulatedIncome(isFinite(newAccumulated) && newAccumulated >= 0 ? newAccumulated : 0);
    }, UPDATE_INTERVAL);
    
    return () => {
      console.log('‚èπÔ∏è –¢–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      clearInterval(intervalId);
    };
  }, [incomeRatePerHour, isLoading]);

  const handleCollect = () => {
    const incomeToAdd = Math.floor(accumulatedIncome);
    console.log('üí∞ –°–±–æ—Ä –¥–æ—Ö–æ–¥–∞:', incomeToAdd);
    if (incomeToAdd > 0) {
      const newTotalCoins = gameCoins + incomeToAdd;
      setGameCoins(newTotalCoins);
      setAccumulatedIncome(0);
      const collectionTime = Date.now();
      lastCollectedTimeRef.current = collectionTime;
      
      if (isTutorialActive && tutorialStep === 3) {
        console.log('üéì –®–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ 3 –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ 4');
        setTimeout(() => {
          setTutorialStep(4);
        }, 500);
      }
      
      saveGameState({
        game_coins: newTotalCoins,
        last_collected_time: new Date(collectionTime).toISOString(),
      });
    }
  };

  const handleBuildingClick = (buildingName) => {
    console.log('üè¢ –ö–ª–∏–∫ –ø–æ –∑–¥–∞–Ω–∏—é:', buildingName);
    const targetBuilding = buildings.find(b => b.name === buildingName);
    if (!targetBuilding || targetBuilding.isLocked) {
      console.log('‚ùå –ó–¥–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    const cost = calculateBuildingCost(targetBuilding.id, targetBuilding.level);
    console.log('üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è:', cost);
    if (gameCoins >= cost) {
      const newCoins = gameCoins - cost;
      const updatedBuildings = buildings.map(b =>
        b.name === buildingName ? { ...b, level: b.level + 1 } : b
      );
      const newTotalRate = calculateTotalIncomeRate(updatedBuildings, currentCar, hiredStaff);

      setGameCoins(newCoins);
      setBuildings(updatedBuildings);
      setIncomeRatePerHour(newTotalRate);
      console.log('‚úÖ –ó–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ, –Ω–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞:', newTotalRate);
      
      saveGameState({
        game_coins: newCoins,
        buildings: updatedBuildings,
        income_rate_per_hour: newTotalRate,
      });
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è');
    }
  };

  const handleOpenTuning = () => {
    console.log('üîß –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç—é–Ω–∏–Ω–≥–∞');
    setIsTuningVisible(true);
  };

  const handleCloseTuning = () => {
    console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—é–Ω–∏–Ω–≥–∞');
    setIsTuningVisible(false);
  };

  const handleUpgradePart = (partId) => {
    console.log('üîß –£–ª—É—á—à–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:', partId);
    if (!currentCar?.parts?.[partId]) {
      console.log('‚ùå –î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const part = currentCar.parts[partId];
    const cost = calculateUpgradeCost(partId, part.level);
    console.log('üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏:', cost);
    if (gameCoins >= cost && cost !== Infinity) {
      const newCoins = gameCoins - cost;
      const updatedParts = { ...currentCar.parts, [partId]: { ...part, level: part.level + 1 } };
      const { stats: newStats } = recalculateStatsAndIncomeBonus(currentCar.id, updatedParts);
      
      const updatedPlayerCars = playerCars.map(car =>
        car.id === selectedCarId ? { ...car, parts: updatedParts, stats: newStats } : car
      );
      
      const updatedCarForRate = updatedPlayerCars.find(c => c.id === selectedCarId);
      let newTotalRate = incomeRatePerHour;
      if (updatedCarForRate) {
        newTotalRate = calculateTotalIncomeRate(buildings, updatedCarForRate, hiredStaff);
        setIncomeRatePerHour(newTotalRate);
      }
      
      setGameCoins(newCoins);
      setPlayerCars(updatedPlayerCars);
      console.log('‚úÖ –î–µ—Ç–∞–ª—å —É–ª—É—á—à–µ–Ω–∞, –Ω–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞:', newTotalRate);
      
      saveGameState({
        game_coins: newCoins,
        player_cars: updatedPlayerCars,
        income_rate_per_hour: newTotalRate,
      });
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏');
    }
  };

  const handleStartRace = async (difficulty) => {
    console.log('üèéÔ∏è –°—Ç–∞—Ä—Ç –≥–æ–Ω–∫–∏, —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', difficulty);
    if (!currentCar) return { result: 'error', reward: null };
    const raceOutcome = await simulateRace(currentCar, difficulty, gameCoins, currentXp);
    if (raceOutcome) {
      setGameCoins(raceOutcome.newGameCoins);
      setCurrentXp(raceOutcome.newCurrentXp);
      console.log('üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏:', raceOutcome);
      
      saveGameState({
        game_coins: raceOutcome.newGameCoins,
        current_xp: raceOutcome.newCurrentXp,
      });
      return { result: raceOutcome.result, reward: raceOutcome.reward };
    } else {
      return { result: 'error', reward: null };
    }
  };

  const handleBuyCar = (carIdToBuy) => {
    console.log('üõí –ü–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã:', carIdToBuy);
    const carData = CAR_CATALOG.find(c => c.id === carIdToBuy);
    if (!carData || gameCoins < carData.price || playerCars.some(c => c.id === carIdToBuy)) {
      console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∞—à–∏–Ω—É');
      return;
    }
    const newCoins = gameCoins - carData.price;
    const newCar = {
      id: carData.id,
      name: carData.name,
      imageUrl: carData.imageUrl,
      parts: { ...carData.initialParts },
      stats: recalculateStatsAndIncomeBonus(carData.id, carData.initialParts).stats
    };
    const updatedPlayerCars = [...playerCars, newCar];
    setGameCoins(newCoins);
    setPlayerCars(updatedPlayerCars);
    console.log('‚úÖ –ú–∞—à–∏–Ω–∞ –∫—É–ø–ª–µ–Ω–∞:', carData.name);
    
    saveGameState({
      game_coins: newCoins,
      player_cars: updatedPlayerCars,
    });
  };

  const handleHireOrUpgradeStaff = (staffId) => {
    console.log('üë• –ù–∞–π–º/—É–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', staffId);
    const cost = calculateStaffCost(staffId, hiredStaff);
    console.log('üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', cost);
    if (gameCoins >= cost && cost !== Infinity) {
      const newCoins = gameCoins - cost;
      const updatedHiredStaff = { ...hiredStaff, [staffId]: (hiredStaff[staffId] || 0) + 1 };
      const newTotalRate = calculateTotalIncomeRate(buildings, currentCar, updatedHiredStaff);

      setGameCoins(newCoins);
      setHiredStaff(updatedHiredStaff);
      setIncomeRatePerHour(newTotalRate);
      console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª –Ω–∞–Ω—è—Ç, –Ω–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞:', newTotalRate);
      
      saveGameState({
        game_coins: newCoins,
        hired_staff: updatedHiredStaff,
        income_rate_per_hour: newTotalRate,
      });
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –Ω–∞–π–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞');
    }
  };

  const handleNavClick = (screenId) => {
    console.log('üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è:', screenId);
    setIsTuningVisible(false);
    setIsCarSelectorVisible(false);
    setActiveScreen(screenId);
  };

  const handleOpenCarSelector = () => {
    console.log('üöó –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã');
    setIsCarSelectorVisible(true);
  };
  
  const handleCloseCarSelector = () => {
    console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã');
    setIsCarSelectorVisible(false);
  };

  const handleSelectCar = (carId) => {
    console.log('üéØ –í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã:', carId);
    if (carId !== selectedCarId) {
      setSelectedCarId(carId);
      const newSelectedCar = playerCars.find(c => c.id === carId);
      let newTotalRate = incomeRatePerHour;
      if (newSelectedCar) {
        newTotalRate = calculateTotalIncomeRate(buildings, newSelectedCar, hiredStaff);
        setIncomeRatePerHour(newTotalRate);
      }
      console.log('‚úÖ –ú–∞—à–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞, –Ω–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞:', newTotalRate);
      
      saveGameState({
        selected_car_id: carId,
        income_rate_per_hour: newTotalRate,
      });
    }
    setIsCarSelectorVisible(false);
  };

  const xpPercentage = xpToNextLevel > 0 ? Math.min((currentXp / xpToNextLevel) * 100, 100) : 0;
  
  const handleTutorialNext = () => {
    console.log('‚û°Ô∏è –¢—É—Ç–æ—Ä–∏–∞–ª: —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥');
    setTutorialStep(prev => prev + 1);
  };
  
  const handleTutorialComplete = () => {
    console.log('üéì –¢—É—Ç–æ—Ä–∏–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
    setIsTutorialActive(false);
    setHasCompletedTutorial(true);
    
    saveGameState({
      has_completed_tutorial: true,
    });
  };
  
  const handleTutorialAction = (action) => {
    console.log('üéØ –î–µ–π—Å—Ç–≤–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞:', action);
    if (action === 'expand-buildings') {
      // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    } else if (action === 'close-tuning') {
      setIsTuningVisible(false);
    }
  };

  // üéØ –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const handleReferralRewardUpdate = useCallback((coinsEarned) => {
    console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', coinsEarned);
    
    if (coinsEarned > 0) {
      const newTotalCoins = gameCoins + coinsEarned;
      setGameCoins(newTotalCoins);
      
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', {
        —Å—Ç–∞—Ä—ã–π: gameCoins,
        –¥–æ–±–∞–≤–ª–µ–Ω–æ: coinsEarned,
        –Ω–æ–≤—ã–π: newTotalCoins
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      saveGameState({
        game_coins: newTotalCoins,
      });
    }
  }, [gameCoins, saveGameState]);

  // üéØ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Ä–µ–∫–ª–∞–º—É Adsgram
  const handleAdReward = useCallback((rewardAmount) => {
    console.log('üì∫ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É Adsgram:', rewardAmount);
    
    if (rewardAmount > 0) {
      const newTotalCoins = gameCoins + rewardAmount;
      setGameCoins(newTotalCoins);
      
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –æ—Ç —Ä–µ–∫–ª–∞–º—ã:', {
        —Å—Ç–∞—Ä—ã–π: gameCoins,
        –¥–æ–±–∞–≤–ª–µ–Ω–æ: rewardAmount,
        –Ω–æ–≤—ã–π: newTotalCoins
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      saveGameState({
        game_coins: newTotalCoins,
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      alert(`üéâ –ü–æ–ª—É—á–µ–Ω–æ ${rewardAmount} –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã!`);
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤ Telegram
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      }
    }
  }, [gameCoins, saveGameState]);

  if (isLoading) {
    return <div className="loading-screen">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }
  if (error) {
    return <div className="error-screen">–û—à–∏–±–∫–∞: {error}</div>;
  }

  return (
    <div className="App">
      <div className="header-container">
        <Header
          level={playerLevel}
          playerName={playerName}
          gameCoins={gameCoins}
          jetCoins={jetCoins}
          xpPercentage={xpPercentage}
          onShowTutorial={() => {
            console.log('üéì –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞');
            setIsTutorialActive(true);
            setTutorialStep(0);
          }}
        />
      </div>
      <main className="main-content">
        {activeScreen === 'garage' && currentCar && (
          <MainGameScreen
            car={currentCar}
            incomeRate={incomeRatePerHour}
            accumulatedIncome={accumulatedIncome}
            maxAccumulation={incomeRatePerHour * MAX_OFFLINE_HOURS}
            gameCoins={gameCoins}
            buildings={buildings}
            onCollect={handleCollect}
            onTuneClick={handleOpenTuning}
            onOpenCarSelector={handleOpenCarSelector}
            onBuildingClick={handleBuildingClick}
                      />
        )}
        {activeScreen === 'race' && currentCar && (
          <RaceScreen
            playerCar={currentCar}
            onStartRace={handleStartRace}
            onAdReward={handleAdReward}
          />
        )}
        {activeScreen === 'shop' && (
          <ShopScreen
            catalog={CAR_CATALOG}
            playerCars={playerCars}
            gameCoins={gameCoins}
            onBuyCar={handleBuyCar}
          />
        )}
        {activeScreen === 'staff' && (
          <StaffScreen
            staffCatalog={STAFF_CATALOG}
            hiredStaff={hiredStaff}
            gameCoins={gameCoins}
            onHireOrUpgrade={handleHireOrUpgradeStaff}
            calculateCost={(staffId) => calculateStaffCost(staffId, hiredStaff)}
          />
        )}
        {activeScreen === 'leaderboard' && (
          <LeaderboardScreen
            tgUserData={tgUserData}
          />
        )}
        {activeScreen === 'friends' && (
          <FriendsScreen
            tgUserData={tgUserData}
            onBalanceUpdate={handleReferralRewardUpdate}
          />
        )}
        {activeScreen === 'p2e' && (
          <div className="placeholder-screen">
            <div>
              <div style={{ fontSize: '3em', marginBottom: '10px' }}>üéÆ</div>
              <div>Play to Earn</div>
              <div style={{ fontSize: '0.8em', opacity: 0.6, marginTop: '10px' }}>
                –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!
              </div>
            </div>
          </div>
        )}
      </main>
      {isTuningVisible && (
        <TuningScreen
          car={currentCar}
          gameCoins={gameCoins}
          onClose={handleCloseTuning}
          onUpgrade={handleUpgradePart}
        />
      )}
      {isCarSelectorVisible && (
        <CarSelector
          playerCars={playerCars}
          selectedCarId={selectedCarId}
          onSelectCar={handleSelectCar}
          onClose={handleCloseCarSelector}
        />
      )}
      <NavBar
        activeScreen={activeScreen}
        onScreenChange={handleNavClick}
      />
      
      <Tutorial
        isActive={isTutorialActive}
        currentStep={tutorialStep}
        onNext={handleTutorialNext}
        onComplete={handleTutorialComplete}
        onAction={handleTutorialAction}
        gameState={{
          gameCoins,
          incomeRate: incomeRatePerHour,
          accumulatedIncome
        }}
      />
    </div>
  );
}

export default App;