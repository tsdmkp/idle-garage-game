import React, { useState, useEffect, useRef, useCallback } from 'react';
import Header from './components/Header';
import MainGameScreen from './components/MainGameScreen';
import Tutorial from './components/Tutorial';
import NavBar from './components/NavBar';
import TuningScreen from './components/TuningScreen';
import RaceScreen from './components/RaceScreen';
import ShopScreen from './components/ShopScreen';
import StaffScreen from './components/StaffScreen';
import CarSelector from './components/CarSelector';
import LeaderboardScreen from './components/LeaderboardScreen';
import {
  calculateUpgradeCost,
  calculateBuildingCost,
  recalculateStatsAndIncomeBonus,
  calculateTotalIncomeRate,
  simulateRace,
  calculateStaffCost,
  getInitialPlayerCar,
  BASE_CAR_STATS, // –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
  CAR_CATALOG,
  STAFF_CATALOG,
  INITIAL_BUILDINGS,
  MAX_OFFLINE_HOURS,
  UPDATE_INTERVAL,
  STARTING_COINS
} from './utils';
import apiClient from './apiClient';
import './App.css';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å 'undefined'
const INITIAL_CAR = getInitialPlayerCar();
const INITIAL_HIRED_STAFF = (() => {
  const init = {};
  for (const id in STAFF_CATALOG) {
    init[id] = 0;
  }
  return init;
})();

function App() {
  const [isLoading, setIsLoading] = useState(true);
  const [hasLoadedData, setHasLoadedData] = useState(false); // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const [error, setError] = useState(null);
  const [tgUserData, setTgUserData] = useState(null);
  const [isTgApp, setIsTgApp] = useState(false);
  const [playerLevel, setPlayerLevel] = useState(1);
  const [playerName, setPlayerName] = useState('–ò–≥—Ä–æ–∫');
  const [gameCoins, setGameCoins] = useState(STARTING_COINS);
  const [jetCoins, setJetCoins] = useState(0);
  const [currentXp, setCurrentXp] = useState(10);
  const [xpToNextLevel, setXpToNextLevel] = useState(100);
  const [incomeRatePerHour, setIncomeRatePerHour] = useState(0);
  const lastCollectedTimeRef = useRef(Date.now());
  const [accumulatedIncome, setAccumulatedIncome] = useState(0);
  const [buildings, setBuildings] = useState(INITIAL_BUILDINGS);
  const [playerCars, setPlayerCars] = useState(() => [INITIAL_CAR]);
  const [selectedCarId, setSelectedCarId] = useState(INITIAL_CAR.id);
  const [hiredStaff, setHiredStaff] = useState(INITIAL_HIRED_STAFF);
  const [activeScreen, setActiveScreen] = useState('garage');
  const [isTuningVisible, setIsTuningVisible] = useState(false);
  const [isCarSelectorVisible, setIsCarSelectorVisible] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
  const [isTutorialActive, setIsTutorialActive] = useState(false);
  const [tutorialStep, setTutorialStep] = useState(0);
  const [hasCompletedTutorial, setHasCompletedTutorial] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–∞—à–∏–Ω—É. –ò—Å–ø–æ–ª—å–∑—É–µ–º currentCar || playerCars[0] || null –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
  const currentCar = playerCars.find(car => car.id === selectedCarId) || playerCars[0] || null;

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  // –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
  // –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.
  const saveGameState = useCallback(async (updates = {}) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º userId –Ω–∞–¥–µ–∂–Ω–æ
    const userId = tgUserData?.id?.toString();

    // –ï—Å–ª–∏ userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ userId –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω,
    // –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.
    if (!userId && isTgApp) {
      console.warn('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: tgUserData.id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.');
      return;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default' userId
    const finalUserId = userId || 'default';
    if (finalUserId === 'default' && isTgApp) {
        console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è userId –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é tgUserData.');
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const stateToSave = {
      userId: finalUserId,
      player_level: playerLevel,
      first_name: playerName, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      game_coins: gameCoins,
      jet_coins: jetCoins,
      current_xp: currentXp,
      xp_to_next_level: xpToNextLevel,
      income_rate_per_hour: incomeRatePerHour,
      last_collected_time: new Date(lastCollectedTimeRef.current).toISOString(),
      buildings: buildings,
      player_cars: playerCars,
      selected_car_id: selectedCarId,
      hired_staff: hiredStaff,
      has_completed_tutorial: hasCompletedTutorial,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–∞–∂–Ω—ã –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
      last_exit_time: new Date().toISOString(), // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      ...updates // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª—é–±—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    };

    try {
      console.log('üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', stateToSave);
      await apiClient('/game_state', 'POST', { body: stateToSave });
      console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', err.message);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }, [
    tgUserData, isTgApp, playerLevel, playerName, gameCoins, jetCoins, currentXp, xpToNextLevel,
    incomeRatePerHour, accumulatedIncome, buildings, playerCars, selectedCarId, hiredStaff,
    hasCompletedTutorial // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å hasCompletedTutorial
  ]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App
  useEffect(() => {
    const tg = window.Telegram?.WebApp;
    if (tg) {
      setIsTgApp(true);
      const userData = tg.initDataUnsafe?.user || null;
      setTgUserData(userData);
      console.log('App: Telegram user data structure:', JSON.stringify(userData, null, 2));
      if (userData && typeof userData === 'object') {
        const firstName = userData.first_name || userData.firstName || userData.username || '–ò–≥—Ä–æ–∫';
        setPlayerName(firstName);
        console.log('Player name set to:', firstName);
      } else {
        console.warn('No valid user data in tgUserData:', userData);
      }
      tg.ready();
      tg.expand();
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI Telegram
      tg.BackButton.hide();
      tg.MainButton.hide();
    } else {
      setIsTgApp(false);
      console.warn('App: Telegram initData not found. Running in standalone mode.');
    }
    
    // –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞
    // –≠—Ç–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å saveGameState, –Ω–æ –º—ã –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å –µ–µ –∑–¥–µ—Å—å
    // –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    return () => {
      // –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å saveGameState –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
      // –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —á–∏—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      const userIdOnExit = tgUserData?.id?.toString() || 'default';
      if (userIdOnExit) {
        apiClient('/game_state', 'POST', {
          body: {
            userId: userIdOnExit,
            last_exit_time: new Date().toISOString(),
          }
        }).catch(err => console.error('Failed to save last exit time on unmount:', err));
      }
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const loadData = async () => {
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      if (hasLoadedData) {
        console.log('Data already loaded, skipping...');
        return;
      }
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –∂–¥–µ–º tgUserData
      if (isTgApp && (!tgUserData || !tgUserData.id)) {
        console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - tgUserData –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤!');
        return;
      }
      
      console.log('loadInitialData started...');
      setHasLoadedData(true);
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º userId –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const userId = tgUserData?.id?.toString() || 'default';
      console.log('Loading data for userId:', userId);
      
      try {
        const initialState = await apiClient('/game_state', 'GET', { params: { userId } });
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', initialState);

        if (initialState && typeof initialState === 'object') {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          setPlayerLevel(initialState.player_level ?? playerLevel);
          if (initialState.first_name && initialState.first_name !== '–ò–≥—Ä–æ–∫') {
            setPlayerName(initialState.first_name);
            console.log('–ò–º—è –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –±—ç–∫–µ–Ω–¥–∞:', initialState.first_name);
          }
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å
          let coinsToSet = initialState.game_coins;
          if (typeof coinsToSet === 'string') {
            coinsToSet = parseInt(coinsToSet) || STARTING_COINS;
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (—É—Ä–æ–≤–µ–Ω—å 1) –∏ –º–æ–Ω–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
          if (playerLevel === 1 && coinsToSet > 10000 && coinsToSet !== STARTING_COINS) {
            console.warn('üö® –°–±—Ä–æ—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:', coinsToSet, '‚Üí', STARTING_COINS);
            coinsToSet = STARTING_COINS;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å saveGameState, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
            saveGameState({ game_coins: STARTING_COINS });
          }
          
          setGameCoins(coinsToSet || STARTING_COINS);
          setJetCoins(parseInt(initialState.jet_coins) || 0);
          setCurrentXp(initialState.current_xp ?? currentXp);
          setXpToNextLevel(initialState.xp_to_next_level ?? xpToNextLevel);
          
          const savedTutorial = initialState.has_completed_tutorial;
          setHasCompletedTutorial(savedTutorial || false);
          
          if (!savedTutorial) {
            setTimeout(() => {
              setIsTutorialActive(true);
              setTutorialStep(0);
            }, 1000);
          }

          const loadedLastCollectedTime = initialState.last_collected_time ? new Date(initialState.last_collected_time).getTime() : Date.now();
          const loadedLastExitTime = initialState.last_exit_time ? new Date(initialState.last_exit_time).getTime() : loadedLastCollectedTime;
          lastCollectedTimeRef.current = isFinite(loadedLastCollectedTime) ? loadedLastCollectedTime : Date.now();
          console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞:', lastCollectedTimeRef.current);
          console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞:', loadedLastExitTime);

          const now = Date.now();
          const offlineTimeMs = Math.max(0, now - loadedLastExitTime);
          console.log('–û—Ñ—Ñ–ª–∞–π–Ω –≤—Ä–µ–º—è (–º—Å) —Å –º–æ–º–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞:', offlineTimeMs);

          let loadedBuildings = INITIAL_BUILDINGS;
          if (initialState?.buildings && Array.isArray(initialState.buildings) && initialState.buildings.length > 0) {
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–∞–Ω–∏—è—Ö
              const validBuildings = initialState.buildings.every(building => 
                  building && 
                  typeof building.id === 'string' && 
                  typeof building.name === 'string' && 
                  typeof building.icon === 'string' &&
                  typeof building.level === 'number' &&
                  typeof building.isLocked === 'boolean'
              );
              
              if (validBuildings) {
                  loadedBuildings = initialState.buildings;
                  console.log("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–¥–∞–Ω–∏—è –∏–∑ API:", loadedBuildings);
              } else {
                  console.warn("–ó–¥–∞–Ω–∏—è –∏–∑ API –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è.");
                  loadedBuildings = INITIAL_BUILDINGS;
              }
          } else {
              console.warn("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–¥–∞–Ω–∏–π –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è.");
              loadedBuildings = INITIAL_BUILDINGS;
          }
          setBuildings(loadedBuildings);

          const loadedHiredStaff = initialState.hired_staff ?? INITIAL_HIRED_STAFF;
          setHiredStaff(loadedHiredStaff);

          const loadedPlayerCarsRaw = Array.isArray(initialState.player_cars) ? initialState.player_cars : [INITIAL_CAR];
          const loadedPlayerCars = loadedPlayerCarsRaw.map(sc =>
            sc && sc.id && sc.parts ? { ...sc, stats: recalculateStatsAndIncomeBonus(sc.id, sc.parts).stats } : null
          ).filter(Boolean); // –§–∏–ª—å—Ç—Ä—É–µ–º null, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
          const actualPlayerCars = loadedPlayerCars.length > 0 ? loadedPlayerCars : [INITIAL_CAR];
          setPlayerCars(actualPlayerCars);

          const loadedSelectedCarId = initialState.selected_car_id;
          const finalSelectedCarId = loadedSelectedCarId && actualPlayerCars.some(c => c.id === loadedSelectedCarId)
            ? loadedSelectedCarId
            : actualPlayerCars[0]?.id || INITIAL_CAR.id;
          setSelectedCarId(finalSelectedCarId);

          const carToCalculateFrom = actualPlayerCars.find(c => c.id === finalSelectedCarId) || actualPlayerCars[0] || INITIAL_CAR;

          // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ carToCalculateFrom –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º
          if (!carToCalculateFrom) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—à–∏–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è INITIAL_CAR.');
            // –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å carToCalculateFrom –≤ INITIAL_CAR –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
          }

          const initialTotalRate = calculateTotalIncomeRate(loadedBuildings, carToCalculateFrom, loadedHiredStaff);
          setIncomeRatePerHour(initialTotalRate);
          let offlineIncome = 0;
          if (offlineTimeMs > 0 && initialTotalRate > 0) {
            offlineIncome = (initialTotalRate / 3600) * Math.min(offlineTimeMs / 1000, MAX_OFFLINE_HOURS * 3600);
            console.log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω –æ—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥: ${offlineIncome.toFixed(2)} –∑–∞ ${offlineTimeMs / 1000} —Å–µ–∫—É–Ω–¥`);
          }
          setAccumulatedIncome(offlineIncome);
          console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥: ${initialTotalRate}/—á–∞—Å, –æ—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥: ${offlineIncome.toFixed(2)}`);
        } else {
          console.warn('–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞');
          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          setBuildings(INITIAL_BUILDINGS);
          setPlayerCars([INITIAL_CAR]);
          setSelectedCarId(INITIAL_CAR.id);
          setHiredStaff(INITIAL_HIRED_STAFF);
          setIncomeRatePerHour(calculateTotalIncomeRate(INITIAL_BUILDINGS, INITIAL_CAR, INITIAL_HIRED_STAFF));
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', err.message);
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
      } finally {
        setIsLoading(false);
        console.log('isLoading —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ false. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ tgUserData.id –∏–ª–∏ —Ñ–∞–∫—Ç —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ –Ω–µ TgApp, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (tgUserData?.id || !isTgApp) {
        loadData();
    } else {
        console.log('–û–∂–∏–¥–∞–Ω–∏–µ tgUserData –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (Telegram/Standalone)...');
    }
  }, [tgUserData?.id, isTgApp, hasLoadedData, saveGameState]); // –î–æ–±–∞–≤–ª–µ–Ω–∞ saveGameState –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (incomeRatePerHour <= 0 || isLoading) return;
    console.log('–¢–∞–π–º–µ—Ä –¥–æ—Ö–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é:', incomeRatePerHour);
    const incomePerSecond = incomeRatePerHour / 3600;
    const maxAccumulationCap = incomeRatePerHour * MAX_OFFLINE_HOURS;
    const intervalId = setInterval(() => {
      const now = Date.now();
      const timePassedTotalSeconds = (now - lastCollectedTimeRef.current) / 1000;
      if (!isFinite(timePassedTotalSeconds) || !isFinite(incomePerSecond) || timePassedTotalSeconds < 0) {
        console.error('–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞:', { timePassedTotalSeconds, incomePerSecond, now, lastCollectedTime: lastCollectedTimeRef.current });
        return;
      }
      const potentialTotalIncome = timePassedTotalSeconds * incomePerSecond;
      const newAccumulated = Math.min(potentialTotalIncome, maxAccumulationCap);
      setAccumulatedIncome(isFinite(newAccumulated) && newAccumulated >= 0 ? newAccumulated : 0);
    }, UPDATE_INTERVAL);
    return () => clearInterval(intervalId);
  }, [incomeRatePerHour, isLoading]);

  const handleCollect = () => {
    const incomeToAdd = Math.floor(accumulatedIncome);
    if (incomeToAdd > 0) {
      const newTotalCoins = gameCoins + incomeToAdd;
      setGameCoins(newTotalCoins);
      setAccumulatedIncome(0);
      const collectionTime = Date.now();
      lastCollectedTimeRef.current = collectionTime;
      console.log(`–°–æ–±—Ä–∞–Ω–æ ${incomeToAdd} GC.`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–≥ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
      if (isTutorialActive && tutorialStep === 3) {
        setTimeout(() => {
          setTutorialStep(4);
        }, 500);
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      saveGameState({
        game_coins: newTotalCoins,
        last_collected_time: new Date(collectionTime).toISOString(),
      });
    }
  };

  const handleBuildingClick = (buildingName) => {
    const targetBuilding = buildings.find(b => b.name === buildingName);
    if (!targetBuilding || targetBuilding.isLocked) return;
    const cost = calculateBuildingCost(targetBuilding.id, targetBuilding.level);
    if (gameCoins >= cost) {
      const newCoins = gameCoins - cost;
      const updatedBuildings = buildings.map(b =>
        b.name === buildingName ? { ...b, level: b.level + 1 } : b
      );
      // –í–∞–∂–Ω–æ: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π
      const newTotalRate = calculateTotalIncomeRate(updatedBuildings, currentCar, hiredStaff);

      setGameCoins(newCoins);
      setBuildings(updatedBuildings);
      setIncomeRatePerHour(newTotalRate); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–æ—Ö–æ–¥–∞
      console.log(`–ó–¥–∞–Ω–∏–µ ${buildingName} —É–ª—É—á—à–µ–Ω–æ. –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: ${newTotalRate}/—á–∞—Å.`);
      
      // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–¥–∞–Ω–∏—è–º–∏ –∏ —Å—Ç–∞–≤–∫–æ–π
      saveGameState({
        game_coins: newCoins,
        buildings: updatedBuildings,
        income_rate_per_hour: newTotalRate, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
      });
    }
  };

  const handleOpenTuning = () => {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ —Ç—é–Ω–∏–Ω–≥–∞');
    setIsTuningVisible(true);
  };

  const handleCloseTuning = () => setIsTuningVisible(false);

  const handleUpgradePart = (partId) => {
    console.log('handleUpgradePart –≤—ã–∑–≤–∞–Ω —Å partId:', partId, '–¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞:', currentCar);
    if (!currentCar?.parts?.[partId]) {
      console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –¥–µ—Ç–∞–ª—å –∏–ª–∏ –º–∞—à–∏–Ω–∞:', partId, currentCar);
      return;
    }
    const part = currentCar.parts[partId];
    const cost = calculateUpgradeCost(partId, part.level);
    console.log('–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:', cost, '–ò–≥—Ä–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã:', gameCoins);
    if (gameCoins >= cost && cost !== Infinity) {
      const newCoins = gameCoins - cost;
      const updatedParts = { ...currentCar.parts, [partId]: { ...part, level: part.level + 1 } };
      const { stats: newStats } = recalculateStatsAndIncomeBonus(currentCar.id, updatedParts);
      
      const updatedPlayerCars = playerCars.map(car =>
        car.id === selectedCarId ? { ...car, parts: updatedParts, stats: newStats } : car
      );
      
      const updatedCarForRate = updatedPlayerCars.find(c => c.id === selectedCarId);
      let newTotalRate = incomeRatePerHour; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      if (updatedCarForRate) {
        newTotalRate = calculateTotalIncomeRate(buildings, updatedCarForRate, hiredStaff);
        setIncomeRatePerHour(newTotalRate);
        console.log('–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:', newTotalRate);
      } else {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–∞—à–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞–≤–∫–∏ –¥–æ—Ö–æ–¥–∞.');
      }
      
      setGameCoins(newCoins);
      setPlayerCars(updatedPlayerCars);
      console.log(`–î–µ—Ç–∞–ª—å "${part.name}" —É–ª—É—á—à–µ–Ω–∞. –ù–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã: ${newCoins}`);
      
      // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      saveGameState({
        game_coins: newCoins,
        player_cars: updatedPlayerCars,
        income_rate_per_hour: newTotalRate,
      });
    } else {
      console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', cost);
    }
  };

  const handleStartRace = async (difficulty) => {
    if (!currentCar) return { result: 'error', reward: null };
    const raceOutcome = await simulateRace(currentCar, difficulty, gameCoins, currentXp);
    if (raceOutcome) {
      setGameCoins(raceOutcome.newGameCoins);
      setCurrentXp(raceOutcome.newCurrentXp);
      
      // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      saveGameState({
        game_coins: raceOutcome.newGameCoins,
        current_xp: raceOutcome.newCurrentXp,
      });
      return { result: raceOutcome.result, reward: raceOutcome.reward };
    } else {
      return { result: 'error', reward: null };
    }
  };

  const handleBuyCar = (carIdToBuy) => {
    const carData = CAR_CATALOG.find(c => c.id === carIdToBuy);
    if (!carData || gameCoins < carData.price || playerCars.some(c => c.id === carIdToBuy)) return;
    const newCoins = gameCoins - carData.price;
    const newCar = {
      id: carData.id,
      name: carData.name,
      imageUrl: carData.imageUrl,
      parts: { ...carData.initialParts },
      stats: recalculateStatsAndIncomeBonus(carData.id, carData.initialParts).stats
    };
    const updatedPlayerCars = [...playerCars, newCar];
    setGameCoins(newCoins);
    setPlayerCars(updatedPlayerCars);
    console.log(`–ö—É–ø–ª–µ–Ω–∞ –º–∞—à–∏–Ω–∞ ${carData.name}.`);
    
    // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveGameState({
      game_coins: newCoins,
      player_cars: updatedPlayerCars,
    });
  };

  const handleHireOrUpgradeStaff = (staffId) => {
    console.log('handleHireOrUpgradeStaff –≤—ã–∑–≤–∞–Ω —Å staffId:', staffId);
    const cost = calculateStaffCost(staffId, hiredStaff);
    console.log('–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', cost, '–ò–≥—Ä–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã:', gameCoins);
    if (gameCoins >= cost && cost !== Infinity) {
      const newCoins = gameCoins - cost;
      const updatedHiredStaff = { ...hiredStaff, [staffId]: (hiredStaff[staffId] || 0) + 1 };
      
      // –í–∞–∂–Ω–æ: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π
      const newTotalRate = calculateTotalIncomeRate(buildings, currentCar, updatedHiredStaff);

      setGameCoins(newCoins);
      setHiredStaff(updatedHiredStaff);
      setIncomeRatePerHour(newTotalRate); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–æ—Ö–æ–¥–∞
      console.log(`–ù–∞–Ω—è—Ç/—É–ª—É—á—à–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª ${staffId}. –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: ${newTotalRate}/—á–∞—Å`);
      
      // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      saveGameState({
        game_coins: newCoins,
        hired_staff: updatedHiredStaff,
        income_rate_per_hour: newTotalRate, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
      });
    } else {
      console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –Ω–∞–π–º–∞/—É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:', cost);
    }
  };

  const handleNavClick = (screenId) => {
    console.log('–ù–∞–≤–∏–≥–∞—Ü–∏—è:', screenId);
    setIsTuningVisible(false);
    setIsCarSelectorVisible(false);
    setActiveScreen(screenId);
  };

  const handleOpenCarSelector = () => setIsCarSelectorVisible(true);
  const handleCloseCarSelector = () => setIsCarSelectorVisible(false);

  const handleSelectCar = (carId) => {
    if (carId !== selectedCarId) {
      setSelectedCarId(carId);
      const newSelectedCar = playerCars.find(c => c.id === carId);
      let newTotalRate = incomeRatePerHour;
      if (newSelectedCar) {
        newTotalRate = calculateTotalIncomeRate(buildings, newSelectedCar, hiredStaff);
        setIncomeRatePerHour(newTotalRate);
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      saveGameState({
        selected_car_id: carId,
        income_rate_per_hour: newTotalRate,
      });
    }
    setIsCarSelectorVisible(false);
  };

  const xpPercentage = xpToNextLevel > 0 ? Math.min((currentXp / xpToNextLevel) * 100, 100) : 0;
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
  const handleTutorialNext = () => {
    setTutorialStep(prev => prev + 1);
  };
  
  const handleTutorialComplete = () => {
    setIsTutorialActive(false);
    setHasCompletedTutorial(true);
    
    // –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveGameState({
      has_completed_tutorial: true,
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —É–∂–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ saveGameState
    });
  };
  
  const handleTutorialAction = (action) => {
    if (action === 'expand-buildings') {
      // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∑–¥–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã
    } else if (action === 'close-tuning') {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—é–Ω–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
      setIsTuningVisible(false);
    }
  };

  if (isLoading) {
    return <div className="loading-screen">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }
  if (error) {
    return <div className="error-screen">–û—à–∏–±–∫–∞: {error}</div>;
  }

  return (
    <div className="App">
      <div className="header-container">
        <Header
          level={playerLevel}
          playerName={playerName}
          gameCoins={gameCoins}
          jetCoins={jetCoins}
          xpPercentage={xpPercentage}
          onShowTutorial={() => {
            setIsTutorialActive(true);
            setTutorialStep(0);
          }}
        />
      </div>
      <main className="main-content">
        {activeScreen === 'garage' && currentCar && (
          <MainGameScreen
            car={currentCar}
            incomeRate={incomeRatePerHour}
            accumulatedIncome={accumulatedIncome}
            maxAccumulation={incomeRatePerHour * MAX_OFFLINE_HOURS}
            gameCoins={gameCoins}
            buildings={buildings}
            onCollect={handleCollect}
            onTuneClick={handleOpenTuning}
            onOpenCarSelector={handleOpenCarSelector}
            onBuildingClick={handleBuildingClick}
          />
        )}
        {activeScreen === 'race' && currentCar && (
          <RaceScreen
            playerCar={currentCar}
            onStartRace={handleStartRace}
          />
        )}
        {activeScreen === 'shop' && (
          <ShopScreen
            catalog={CAR_CATALOG}
            playerCars={playerCars}
            gameCoins={gameCoins}
            onBuyCar={handleBuyCar}
          />
        )}
        {activeScreen === 'staff' && (
          <StaffScreen
            staffCatalog={STAFF_CATALOG}
            hiredStaff={hiredStaff}
            gameCoins={gameCoins}
            onHireOrUpgrade={handleHireOrUpgradeStaff}
            calculateCost={(staffId) => calculateStaffCost(staffId, hiredStaff)}
          />
        )}
        {activeScreen === 'leaderboard' && (
          <LeaderboardScreen
            tgUserData={tgUserData}
          />
        )}
        {activeScreen === 'p2e' && (
          <div className="placeholder-screen">
            <div>
              <div style={{ fontSize: '3em', marginBottom: '10px' }}>üéÆ</div>
              <div>Play to Earn</div>
              <div style={{ fontSize: '0.8em', opacity: 0.6, marginTop: '10px' }}>
                –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!
              </div>
            </div>
          </div>
        )}
      </main>
      {isTuningVisible && (
        <TuningScreen
          car={currentCar}
          gameCoins={gameCoins}
          onClose={handleCloseTuning}
          onUpgrade={handleUpgradePart}
        />
      )}
      {isCarSelectorVisible && (
        <CarSelector
          playerCars={playerCars}
          selectedCarId={selectedCarId}
          onSelectCar={handleSelectCar}
          onClose={handleCloseCarSelector}
        />
      )}
      <NavBar
        activeScreen={activeScreen}
        onScreenChange={handleNavClick}
      />
      
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ */}
      <Tutorial
        isActive={isTutorialActive}
        currentStep={tutorialStep}
        onNext={handleTutorialNext}
        onComplete={handleTutorialComplete}
        onAction={handleTutorialAction}
        gameState={{
          gameCoins,
          incomeRate: incomeRatePerHour,
          accumulatedIncome
        }}
      />
    </div>
  );
}

export default App;
