import React, { useState, useEffect, useRef } from 'react';
// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import Header from './components/Header';
import GarageArea from './components/GarageArea';
import IncomeArea from './components/IncomeArea';
import BuildingArea from './components/BuildingArea';
import NavBar from './components/NavBar';
import TuningScreen from './components/TuningScreen';
import RaceScreen from './components/RaceScreen';
// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç (—É–±–µ–¥–∏—Å—å, —á—Ç–æ utils.js –µ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª–µ–Ω)
import {
    calculateUpgradeCost,
    recalculateStatsAndIncomeBonus,
    calculateTotalIncomeRate,
    BASE_CAR_STATS
} from './utils';
import './App.css'; // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ò–≥—Ä—ã ---
const MAX_OFFLINE_HOURS = 2; // –ú–∞–∫—Å. —á–∞—Å–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω
const UPDATE_INTERVAL = 1000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ (1—Å)
const STARTING_COINS = 100000; // –ù–∞—á–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
const INITIAL_BUILDINGS = [ // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–∞–Ω–∏–π
    { id: 'wash', name: '–ê–≤—Ç–æ–º–æ–π–∫–∞', level: 1, icon: 'üßº', isLocked: false },
    { id: 'service', name: '–°–µ—Ä–≤–∏—Å', level: 0, icon: 'üîß', isLocked: false },
    { id: 'tires', name: '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', level: 0, icon: 'üîò', isLocked: true },
    { id: 'drift', name: '–®–∫. –î—Ä–∏—Ñ—Ç–∞', level: 0, icon: 'üè´', isLocked: true },
];
const INITIAL_CAR = { // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
    id: 'car_001', name: '–†–∂–∞–≤–∞—è "–ö–æ–ø–µ–π–∫–∞"', imageUrl: '/placeholder-car.png',
    stats: { power: 40, speed: 70, style: 5, reliability: 25 }, // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã, –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã
    parts: { // –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
      engine: { level: 1, name: '–î–≤–∏–≥–∞—Ç–µ–ª—å' },
      tires: { level: 0, name: '–®–∏–Ω—ã' },
      style_body: { level: 0, name: '–ö—É–∑–æ–≤ (–°—Ç–∏–ª—å)' },
      reliability_base: { level: 1, name: '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (–ë–∞–∑–∞)' },
    }
};
const BOT_STATS = { // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–æ–≤ –¥–ª—è –≥–æ–Ω–æ–∫
  easy:   { power: 35, speed: 65, reliability: 55 },
  medium: { power: 62, speed: 92, reliability: 45 },
  hard:   { power: 90, speed: 120, reliability: 35 },
};

// ========= –ö–û–ú–ü–û–ù–ï–ù–¢ APP =========
function App() {
  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ò–≥—Ä—ã ---
  const [tgUserData, setTgUserData] = useState(null);
  const [isTgApp, setIsTgApp] = useState(false);
  const [playerLevel, setPlayerLevel] = useState(1);
  const [playerName, setPlayerName] = useState("–ò–≥—Ä–æ–∫");
  const [gameCoins, setGameCoins] = useState(STARTING_COINS);
  const [jetCoins, setJetCoins] = useState(0);
  const [currentXp, setCurrentXp] = useState(10);
  const [xpToNextLevel, setXpToNextLevel] = useState(100);
  const [incomeRatePerHour, setIncomeRatePerHour] = useState(0);
  const lastCollectedTimeRef = useRef(Date.now());
  const [accumulatedIncome, setAccumulatedIncome] = useState(0);
  const [buildings, setBuildings] = useState(INITIAL_BUILDINGS);
  const [currentCar, setCurrentCar] = useState(INITIAL_CAR); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è UI ---
  const [activeScreen, setActiveScreen] = useState('garage');
  const [isTuningVisible, setIsTuningVisible] = useState(false);

  // --- –≠—Ñ—Ñ–µ–∫—Ç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ó–∞–≥—Ä—É–∑–∫–∏ –î–∞–Ω–Ω—ã—Ö ---
  useEffect(() => {
    console.log("App Init useEffect running...");

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App ---
    const tg = window.Telegram?.WebApp;
    if (tg) {
      setIsTgApp(true);
      tg.ready();
      if (tg.initDataUnsafe?.user) {
        setTgUserData(tg.initDataUnsafe.user);
        setPlayerName(tg.initDataUnsafe.user.first_name || tg.initDataUnsafe.user.username || "–ò–≥—Ä–æ–∫");
      } else {
        setTgUserData({ id: 123, first_name: "TG User", username: "tg_user"});
        setPlayerName("TG User");
      }
      tg.expand();
    } else {
      setIsTgApp(false);
      setTgUserData({ id: 987, first_name: "Dev", username: "dev_user"});
      setPlayerName("Dev User");
    }

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö –∏–∑ Local Storage ---
    console.log("--- Loading Saved Data ---");
    const savedTime = localStorage.getItem('idleGarage_lastCollectedTime');
    const savedCoins = localStorage.getItem('idleGarage_gameCoins');
    const savedBuildingsData = localStorage.getItem('idleGarage_buildings');
    const savedCarData = localStorage.getItem('idleGarage_currentCar');
    const savedXp = localStorage.getItem('idleGarage_currentXp');
    const savedLevel = localStorage.getItem('idleGarage_playerLevel');
    // TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å jetCoins, xpToNextLevel

    // --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ù–∞—á–∞–ª—å–Ω—ã—Ö –ó–Ω–∞—á–µ–Ω–∏–π ---
    const loadedTime = savedTime ? parseInt(savedTime, 10) : Date.now();
    lastCollectedTimeRef.current = loadedTime;

    let initialCoinsValue = STARTING_COINS;
    if (savedCoins !== null && !isNaN(parseInt(savedCoins, 10))) { initialCoinsValue = parseInt(savedCoins, 10); }
    setGameCoins(initialCoinsValue);

    let loadedBuildings = INITIAL_BUILDINGS;
    if (savedBuildingsData) { try { const p = JSON.parse(savedBuildingsData); if(Array.isArray(p)) loadedBuildings = p; } catch(e){} }
    setBuildings(loadedBuildings);

    let loadedCar = INITIAL_CAR;
    if (savedCarData) { try { const p = JSON.parse(savedCarData); if(p && p.id && p.parts && p.stats) loadedCar = p; } catch(e){} }
    // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å—Ä–∞–∑—É

    setCurrentXp(savedXp ? parseInt(savedXp, 10) : 10);
    setPlayerLevel(savedLevel ? parseInt(savedLevel, 10) : 1);
    // TODO: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å xpToNextLevel, jetCoins

    // --- –ü–µ—Ä–µ—Å—á–µ—Ç –°—Ç–∞—Ç–æ–≤ –ú–∞—à–∏–Ω—ã –∏ –°—Ç–∞–≤–∫–∏ –î–æ—Ö–æ–¥–∞ ---
    const baseStats = BASE_CAR_STATS[loadedCar.id] || BASE_CAR_STATS['car_001'];
    const { stats: calculatedStats } = recalculateStatsAndIncomeBonus(loadedCar.id, loadedCar.parts);
    const finalInitialCar = { ...loadedCar, stats: calculatedStats };
    setCurrentCar(finalInitialCar); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç–∞–º–∏

    const initialTotalRate = calculateTotalIncomeRate(loadedBuildings, finalInitialCar);
    setIncomeRatePerHour(initialTotalRate);

    // --- –†–∞—Å—á–µ—Ç –û—Ñ—Ñ–ª–∞–π–Ω –î–æ—Ö–æ–¥–∞ ---
    const now = Date.now();
    const offlineTimeMs = now - loadedTime;
    let offlineIncome = 0;
    if (offlineTimeMs > 0 && initialTotalRate > 0) {
        const incomePerSecond = initialTotalRate / 3600;
        const maxOfflineSeconds = MAX_OFFLINE_HOURS * 3600;
        const effectiveOfflineSeconds = Math.min(offlineTimeMs / 1000, maxOfflineSeconds);
        offlineIncome = incomePerSecond * effectiveOfflineSeconds;
    }
    setAccumulatedIncome(offlineIncome);

    console.log("--- Initialization useEffect finished ---");
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // --- –≠—Ñ—Ñ–µ–∫—Ç –¢–∞–π–º–µ—Ä–∞ –ü–∞—Å—Å–∏–≤–Ω–æ–≥–æ –î–æ—Ö–æ–¥–∞ ---
  useEffect(() => {
    if (incomeRatePerHour <= 0) return;
    const incomePerSecond = incomeRatePerHour / 3600;
    const maxAccumulationCap = incomeRatePerHour * MAX_OFFLINE_HOURS;
    // console.log(`Starting income timer: Rate ${incomeRatePerHour}/hour`); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const intervalId = setInterval(() => {
      const now = Date.now();
      const timePassedTotalSeconds = (now - lastCollectedTimeRef.current) / 1000;
      const potentialTotalIncome = timePassedTotalSeconds * incomePerSecond;
      const newAccumulated = Math.min(potentialTotalIncome, maxAccumulationCap);
      setAccumulatedIncome(newAccumulated); // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }, UPDATE_INTERVAL);
    return () => { clearInterval(intervalId); /* console.log("Income timer stopped."); */ }; // –û—á–∏—Å—Ç–∫–∞
  }, [incomeRatePerHour]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å—Ç–∞–≤–∫–∏

  // --- –§—É–Ω–∫—Ü–∏—è –°–±–æ—Ä–∞ –î–æ—Ö–æ–¥–∞ ---
  const handleCollect = () => {
    const incomeToAdd = Math.floor(accumulatedIncome);
    // console.log("Collect attempt. Accumulated:", accumulatedIncome, "ToAdd:", incomeToAdd); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (incomeToAdd > 0) {
      const newTotalCoins = gameCoins + incomeToAdd;
      setGameCoins(newTotalCoins);
      setAccumulatedIncome(0); // –°–±—Ä–æ—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ
      const collectionTime = Date.now();
      lastCollectedTimeRef.current = collectionTime; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      localStorage.setItem('idleGarage_gameCoins', newTotalCoins.toString());
      localStorage.setItem('idleGarage_lastCollectedTime', collectionTime.toString());
      console.log(`Collected ${incomeToAdd} GC.`);
    } else {
      console.log("Nothing to collect.");
    }
  };

  // --- –§—É–Ω–∫—Ü–∏—è –£–ª—É—á—à–µ–Ω–∏—è –ó–¥–∞–Ω–∏—è ---
  const handleBuildingClick = (buildingName) => {
      const targetBuilding = buildings.find(b => b.name === buildingName);
      if (!targetBuilding || targetBuilding.isLocked) return;
      const cost = 100 * Math.pow(2, targetBuilding.level); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
      if (gameCoins >= cost) {
          const newCoins = gameCoins - cost;
          setGameCoins(newCoins);
          const updatedBuildings = buildings.map(b => b.name === buildingName ? { ...b, level: b.level + 1 } : b);
          setBuildings(updatedBuildings);
          const newTotalRate = calculateTotalIncomeRate(updatedBuildings, currentCar); // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏
          setIncomeRatePerHour(newTotalRate);
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
          localStorage.setItem('idleGarage_gameCoins', newCoins.toString());
          localStorage.setItem('idleGarage_buildings', JSON.stringify(updatedBuildings));
          console.log(`Building ${buildingName} upgraded. New rate: ${newTotalRate}/hour`);
      } else { console.log(`Not enough coins for ${buildingName}`); }
  };

  // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –û–∫–Ω–∞ –¢—é–Ω–∏–Ω–≥–∞ ---
  const handleOpenTuning = () => setIsTuningVisible(true);
  const handleCloseTuning = () => setIsTuningVisible(false);
  const handleUpgradePart = (partId) => {
      if (!currentCar?.parts?.[partId]) return;
      const part = currentCar.parts[partId];
      const cost = calculateUpgradeCost(partId, part.level);
      if (gameCoins >= cost) {
          const newCoins = gameCoins - cost;
          setGameCoins(newCoins);
          const updatedParts = { ...currentCar.parts, [partId]: { ...part, level: part.level + 1 } };
          const baseStats = BASE_CAR_STATS[currentCar.id] || BASE_CAR_STATS['car_001'];
          const { stats: newStats } = recalculateStatsAndIncomeBonus(currentCar.id, updatedParts); // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–æ–≤
          const updatedCar = { ...currentCar, parts: updatedParts, stats: newStats };
          setCurrentCar(updatedCar); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
          const newTotalRate = calculateTotalIncomeRate(buildings, updatedCar); // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏
          setIncomeRatePerHour(newTotalRate);
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
          localStorage.setItem('idleGarage_gameCoins', newCoins.toString());
          localStorage.setItem('idleGarage_currentCar', JSON.stringify(updatedCar));
          console.log(`Part ${part.name} upgraded. New rate: ${newTotalRate}/hour. New Stats:`, newStats);
      } else { console.log(`Not enough coins for ${part.name}`); }
  };

  // --- –§—É–Ω–∫—Ü–∏—è –°–∏–º—É–ª—è—Ü–∏–∏ –ì–æ–Ω–∫–∏ ---
  const handleStartRace = async (difficulty) => {
    if (!currentCar?.stats) { console.error("Race Error: Car/Stats missing."); return null; }
    console.log(`Starting race: ${difficulty}`);
    const baseBotStats = BOT_STATS[difficulty];
    if (!baseBotStats) { console.error(`Race Error: Invalid difficulty "${difficulty}"`); return null; }
    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–æ–≤ –±–æ—Ç–∞ —Å —Ä–∞–∑–±—Ä–æ—Å–æ–º
    const currentBot = {
        power: baseBotStats.power * (0.9 + Math.random() * 0.2),
        speed: baseBotStats.speed * (0.9 + Math.random() * 0.2),
        reliability: baseBotStats.reliability * (0.9 + Math.random() * 0.2)
    };
    // –†–∞—Å—á–µ—Ç "—Å–∏–ª—ã"
    const playerPowerScore = (currentCar.stats.power * 0.5) + (currentCar.stats.speed * 0.4) + (currentCar.stats.reliability * 0.1 * (0.8 + Math.random() * 0.4));
    const botPowerScore = (currentBot.power * 0.5) + (currentBot.speed * 0.4) + (currentBot.reliability * 0.1 * (0.8 + Math.random() * 0.4));
    console.log(`Scores - Player: ${playerPowerScore.toFixed(1)}, Bot: ${botPowerScore.toFixed(1)}`);
    // –ó–∞–¥–µ—Ä–∂–∫–∞
    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));
    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    let result = 'lose';
    let reward = { coins: 0, xp: 0 }; // –ß–∏—Å—Ç–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è UI
    let finalCoins = gameCoins;      // –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    let finalXp = currentXp;         // –ò—Ç–æ–≥–æ–≤—ã–π XP

    if (playerPowerScore > botPowerScore) { // –ü–æ–±–µ–¥–∞
      result = 'win';
      const baseWinCoins = { easy: 25, medium: 75, hard: 150 };
      const baseWinXp = { easy: 5, medium: 15, hard: 30 };
      const coinsWon = Math.floor(baseWinCoins[difficulty] * (0.9 + Math.random() * 0.2));
      const xpWon = Math.floor(baseWinXp[difficulty] * (0.9 + Math.random() * 0.2));
      reward = { coins: coinsWon, xp: xpWon }; // –ù–∞–≥—Ä–∞–¥–∞
      finalCoins += coinsWon; // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥
      finalXp += xpWon;       // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥
      console.log(`Win! +${coinsWon} GC, +${xpWon} XP`);
      // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ Level Up
    } else { // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
      result = 'lose';
      const consolationCoins = Math.floor(( { easy: 2, medium: 5, hard: 10 }[difficulty] || 0) * Math.random() );
      reward = { coins: consolationCoins, xp: 0 }; // –ù–∞–≥—Ä–∞–¥–∞
       if (consolationCoins > 0) {
           finalCoins += consolationCoins; // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥
           console.log(`Lose. +${consolationCoins} GC consolation.`);
       } else {
           console.log("Lose. No consolation prize.");
       }
       finalXp = currentXp; // XP –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –û–î–ò–ù —Ä–∞–∑
    setGameCoins(finalCoins);
    setCurrentXp(finalXp);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–ù–ê–õ–¨–ù–´–ï –∑–Ω–∞—á–µ–Ω–∏—è
    localStorage.setItem('idleGarage_gameCoins', finalCoins.toString());
    localStorage.setItem('idleGarage_currentXp', finalXp.toString());
    console.log("Race finished. Final Coins:", finalCoins, "Final XP:", finalXp);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —á–∏—Å—Ç—É—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è UI
    return { result, reward };
  };

  // --- –§—É–Ω–∫—Ü–∏—è –ù–∞–≤–∏–≥–∞—Ü–∏–∏ ---
  const handleNavClick = (screenId) => setActiveScreen(screenId);

  // --- –†–∞—Å—á–µ—Ç—ã –¥–ª—è –†–µ–Ω–¥–µ—Ä–∞ ---
  const xpPercentage = xpToNextLevel > 0 ? Math.min((currentXp / xpToNextLevel) * 100, 100) : 0; // –ù–µ –±–æ–ª—å—à–µ 100%

  // --- –†–µ–Ω–¥–µ—Ä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
  return (
    <div className="App" style={{ paddingBottom: '70px' }}>
      {/* –•–µ–¥–µ—Ä */}
      <Header
        level={playerLevel}
        playerName={playerName}
        gameCoins={gameCoins}
        jetCoins={jetCoins}
        xpPercentage={xpPercentage}
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <main>
        {/* –≠–∫—Ä–∞–Ω –ì–∞—Ä–∞–∂–∞ */}
        {activeScreen === 'garage' && (
          <>
            <GarageArea car={currentCar} onTuneClick={handleOpenTuning} />
            <IncomeArea
              incomeRate={incomeRatePerHour}
              accumulatedIncome={accumulatedIncome}
              maxAccumulation={incomeRatePerHour * MAX_OFFLINE_HOURS}
              onCollect={handleCollect}
            />
            <BuildingArea
              buildings={buildings}
              onBuildingClick={handleBuildingClick}
            />
          </>
        )}

        {/* –≠–∫—Ä–∞–Ω –ì–æ–Ω–æ–∫ */}
        {activeScreen === 'race' && (
            <RaceScreen
                playerCar={currentCar}
                onStartRace={handleStartRace}
            />
        )}

        {/* –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ */}
        {activeScreen === 'shop' && <div className="placeholder-screen" style={placeholderStyle}>–≠–∫—Ä–∞–Ω "–ú–∞–≥–∞–∑–∏–Ω"</div>}
        {activeScreen === 'staff' && <div className="placeholder-screen" style={placeholderStyle}>–≠–∫—Ä–∞–Ω "–ü–µ—Ä—Å–æ–Ω–∞–ª"</div>}
        {activeScreen === 'p2e' && <div className="placeholder-screen" style={placeholderStyle}>–≠–∫—Ä–∞–Ω "P2E"</div>}
      </main>

      {/* –û–∫–Ω–æ –¢—é–Ω–∏–Ω–≥–∞ (–ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ) */}
      {isTuningVisible && (
        <TuningScreen
          car={currentCar}
          gameCoins={gameCoins}
          onUpgradePart={handleUpgradePart}
          onClose={handleCloseTuning}
        />
      )}

      {/* –ù–∏–∂–Ω—è—è –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ü–∞–Ω–µ–ª—å */}
      <NavBar
        activeScreen={activeScreen}
        onNavClick={handleNavClick}
      />
    </div>
  );
}

// –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ CSS)
const placeholderStyle = {
    padding: '40px 20px',
    textAlign: 'center',
    color: 'white',
    fontSize: '1.2em',
    opacity: 0.7
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç App
export default App;