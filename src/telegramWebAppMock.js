// src/telegramWebAppMock.js

// –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¢–û–õ–¨–ö–û –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ Telegram WebApp –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined' && !window.Telegram) {
  console.log('üõ†Ô∏è [MOCK] –ü–û–ü–´–¢–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ú–û–ö–ê Telegram WebApp...');

  const mockUserId = 1234567; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ß–ò–°–õ–û
  const mockFirstName = 'LocalDev';
  const mockLastName = 'User';
  const mockUsername = 'localdev';
  const mockLanguageCode = 'en';
  const mockAuthDate = Math.floor(Date.now() / 1000); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const mockHash = 'mock_test_hash_12345'; // –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è –º–æ–∫–∞

  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
  const eventListeners = {};

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const triggerMockEvent = (eventType, data) => {
    if (eventListeners[eventType]) {
      eventListeners[eventType].forEach(cb => {
        if (typeof cb === 'function') {
          cb(data);
        }
      });
      console.log(`‚úÖ [MOCK] –°–æ–±—ã—Ç–∏–µ ${eventType} –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ.`);
    }
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º user-–æ–±—ä–µ–∫—Ç, –∫–∞–∫ –æ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç Telegram.WebApp.initDataUnsafe.user
  const userObject = {
    id: mockUserId,
    first_name: mockFirstName,
    last_name: mockLastName,
    username: mockUsername,
    language_code: mockLanguageCode,
    is_premium: true // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º initData —Å—Ç—Ä–æ–∫—É, –∫–∞–∫ –æ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç Telegram.WebApp.initData
  // JSON.stringify(userObject) –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É JSON.
  // encodeURIComponent –∫–æ–¥–∏—Ä—É–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è URL.
  const initDataString = `query_id=MOCK_QUERY_ID&user=${encodeURIComponent(JSON.stringify(userObject))}&auth_date=${mockAuthDate}&hash=${mockHash}`;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Telegram
  window.Telegram = {
    WebApp: {
      initData: initDataString,
      initDataUnsafe: {
        query_id: 'MOCK_QUERY_ID',
        user: userObject, // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π userObject
        auth_date: mockAuthDate,
        hash: mockHash
      },
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ "function not found"
      ready: () => console.log('‚úÖ [MOCK] WebApp.ready() called'),
      expand: () => console.log('‚úÖ [MOCK] WebApp.expand() called'),
      close: () => console.log('‚úÖ [MOCK] WebApp.close() called'),

      // --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ onEvent –ò offEvent ---
      onEvent: (eventType, callback) => {
        if (!eventListeners[eventType]) {
          eventListeners[eventType] = [];
        }
        eventListeners[eventType].push(callback);
        console.log(`‚úÖ [MOCK] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: ${eventType}`);
      },
      offEvent: (eventType, callback) => {
        if (eventListeners[eventType]) {
          eventListeners[eventType] = eventListeners[eventType].filter(cb => cb !== callback);
          console.log(`‚úÖ [MOCK] –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: ${eventType}`);
        }
      },
      // ---------------------------------------------

      MainButton: { // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è MainButton
        isVisible: false, text: '',
        show: () => { console.log('Mock MainButton show'); }, hide: () => { console.log('Mock MainButton hide'); },
        setText: (txt) => { console.log('Mock MainButton setText:', txt); }, onClick: (cb) => { console.log('Mock MainButton onClick'); }
      },
      BackButton: { // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è BackButton
        isVisible: false,
        show: () => { console.log('Mock BackButton show'); }, hide: () => { console.log('Mock BackButton hide'); },
        onClick: (cb) => { console.log('Mock BackButton onClick'); }
      }
      // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –º–µ—Ç–æ–¥—ã Telegram WebApp, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã.
    }
  };
  
  console.log('‚úÖ [MOCK] Telegram.WebApp mock –£–°–¢–ê–ù–û–í–õ–ï–ù. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π:');
  console.log('‚úÖ [MOCK] window.Telegram.WebApp.initData:', window.Telegram.WebApp.initData);
  console.log('‚úÖ [MOCK] window.Telegram.WebApp.initDataUnsafe.user:', window.Telegram.WebApp.initDataUnsafe.user);

  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
  window.triggerTelegramMockEvent = triggerMockEvent;

} else {
    // –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∫–∞–∂–µ—Ç, –ø–æ—á–µ–º—É –º–æ–∫ –ù–ï –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    if (typeof window !== 'undefined' && window.Telegram) {
        console.log('‚ö†Ô∏è [MOCK] Telegram WebApp —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∫ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω.');
    } else if (process.env.NODE_ENV !== 'development') {
        console.log('‚ö†Ô∏è [MOCK] –ù–µ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (NODE_ENV !== "development"), –º–æ–∫ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω.');
    } else {
        console.log('‚ö†Ô∏è [MOCK] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∫ –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ (–≤–æ–∑–º–æ–∂–Ω–æ, window –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω).');
    }
}