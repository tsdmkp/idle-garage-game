// hooks/useGameState.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã —Å useFuelSystem –∏ –∞–≤–∞—Ç–∞—Ä–∫–æ–π
import { useState, useRef, useCallback } from 'react';
import { useFuelSystem } from './useFuelSystem';
import {
  recalculateStatsAndIncomeBonus,
  calculateTotalIncomeRate,
  getInitialPlayerCar,
  STAFF_CATALOG,
  INITIAL_BUILDINGS,
  STARTING_COINS
} from '../utils';
import apiClient from '../apiClient';

const INITIAL_CAR = getInitialPlayerCar();
const INITIAL_HIRED_STAFF = (() => {
  const init = {};
  for (const id in STAFF_CATALOG) {
    init[id] = 0;
  }
  return init;
})();

export const useGameState = (getUserId) => {
  // –ü–†–û–í–ï–†–ö–ê 1: –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ - —Ç–æ—á–Ω–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  const [playerLevel, setPlayerLevel] = useState(1);
  const [playerName, setPlayerName] = useState('–ò–≥—Ä–æ–∫');
  const [playerPhoto, setPlayerPhoto] = useState(null); // ‚úÖ –ù–û–í–û–ï: –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [gameCoins, setGameCoins] = useState(STARTING_COINS);
  const [jetCoins, setJetCoins] = useState(0);
  const [currentXp, setCurrentXp] = useState(10);
  const [xpToNextLevel, setXpToNextLevel] = useState(100);
  const [incomeRatePerHour, setIncomeRatePerHour] = useState(0);
  const lastCollectedTimeRef = useRef(Date.now());
  const [accumulatedIncome, setAccumulatedIncome] = useState(0);
  
  // –ü–†–û–í–ï–†–ö–ê 1: –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - —Ç–æ—á–Ω–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  const [buildings, setBuildings] = useState(INITIAL_BUILDINGS);
  const [playerCars, setPlayerCars] = useState(() => [INITIAL_CAR]);
  const [selectedCarId, setSelectedCarId] = useState(INITIAL_CAR.id);
  const [hiredStaff, setHiredStaff] = useState(INITIAL_HIRED_STAFF);
  
  // –ü–†–û–í–ï–†–ö–ê 1: –¢—É—Ç–æ—Ä–∏–∞–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è - —Ç–æ—á–Ω–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  const [isTutorialActive, setIsTutorialActive] = useState(false);
  const [tutorialStep, setTutorialStep] = useState(0);
  const [hasCompletedTutorial, setHasCompletedTutorial] = useState(false);

  // –ü–†–û–í–ï–†–ö–ê 1: Refs - —Ç–æ—á–Ω–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  const saveTimeoutRef = useRef(null);

  // –ü–†–û–í–ï–†–ö–ê 2: Debounced save function - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const debouncedSave = useCallback((data) => {
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    saveTimeoutRef.current = setTimeout(async () => {
      const userId = getUserId();
      if (!userId) {
        console.warn('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: userId –Ω–µ –≥–æ—Ç–æ–≤');
        return;
      }

      try {
        console.log('üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è userId:', userId);
        await apiClient('/game_state', 'POST', { body: { userId, ...data } });
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err.message);
      }
    }, 500);
  }, [getUserId]);

  // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú useFuelSystem —Ö—É–∫ - –ø–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const fuelSystem = useFuelSystem(debouncedSave);

  // üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const loadTelegramUserData = useCallback(() => {
    try {
      const telegramUserData = window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      if (telegramUserData) {
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', telegramUserData);
        
        // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (telegramUserData.photo_url) {
          setPlayerPhoto(telegramUserData.photo_url);
          console.log('üì∏ –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', telegramUserData.photo_url);
        }
        
        // ‚úÖ –ú–æ–∂–µ–º —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        if (telegramUserData.first_name && (!playerName || playerName === '–ò–≥—Ä–æ–∫')) {
          const newName = telegramUserData.first_name;
          setPlayerName(newName);
          console.log('üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Telegram:', newName);
        }
        
        return telegramUserData;
      } else {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã');
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram:', error);
      return null;
    }
  }, [playerName]);

  // –ü–†–û–í–ï–†–ö–ê 2: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û, –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–ª–∏–≤–Ω—ã–º —Ö—É–∫–æ–º –∏ –∞–≤–∞—Ç–∞—Ä–∫–æ–π
  const saveGameState = useCallback(async (updates = {}) => {
    const userId = getUserId();
    if (!userId) {
      console.warn('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: userId –Ω–µ –≥–æ—Ç–æ–≤');
      return;
    }

    // –ü–†–û–í–ï–†–ö–ê 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ stateToSave - –û–ë–ù–û–í–õ–ï–ù–ê –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ —Ö—É–∫–∞ –∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
    const stateToSave = {
      userId: userId,
      player_level: playerLevel,
      first_name: playerName,
      player_photo: playerPhoto, // ‚úÖ –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
      game_coins: gameCoins,
      jet_coins: jetCoins,
      current_xp: currentXp,
      xp_to_next_level: xpToNextLevel,
      income_rate_per_hour: incomeRatePerHour,
      last_collected_time: new Date(lastCollectedTimeRef.current).toISOString(),
      buildings: buildings,
      player_cars: playerCars,
      selected_car_id: selectedCarId,
      hired_staff: hiredStaff,
      has_completed_tutorial: hasCompletedTutorial,
      last_exit_time: new Date().toISOString(),
      // ‚úÖ –¢–û–ü–õ–ò–í–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ —Ö—É–∫–∞
      fuel_count: fuelSystem.fuelCount,
      last_race_time: fuelSystem.lastRaceTime ? new Date(fuelSystem.lastRaceTime).toISOString() : null,
      fuel_refill_time: fuelSystem.fuelRefillTime ? new Date(fuelSystem.fuelRefillTime).toISOString() : null,
      ...updates
    };

    // –ü–†–û–í–ï–†–ö–ê 3: –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (updates && Object.keys(updates).length < 3) {
      debouncedSave(stateToSave);
      return;
    }

    // –ü–†–û–í–ï–†–ö–ê 3: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try {
      console.log('üì§ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è userId:', userId);
      await apiClient('/game_state', 'POST', { body: stateToSave });
      console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err.message);
    }
  }, [
    // –ü–†–û–í–ï–†–ö–ê 3: –ú–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –û–ë–ù–û–í–õ–ï–ù –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–ª–∏–≤–Ω—ã–º —Ö—É–∫–æ–º –∏ –∞–≤–∞—Ç–∞—Ä–∫–æ–π
    playerLevel, playerName, playerPhoto, gameCoins, jetCoins, currentXp, xpToNextLevel,
    incomeRatePerHour, buildings, playerCars, selectedCarId, hiredStaff, 
    hasCompletedTutorial, 
    fuelSystem.fuelCount, fuelSystem.lastRaceTime, fuelSystem.fuelRefillTime, // ‚úÖ –¢–æ–ø–ª–∏–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —Ö—É–∫–∞
    getUserId, debouncedSave
  ]);

  // –ü–†–û–í–ï–†–ö–ê 2: –í—ã—á–∏—Å–ª—è–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ currentCar - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const currentCar = playerCars.find(car => car.id === selectedCarId) || playerCars[0] || null;

  // –ü–†–û–í–ï–†–ö–ê 2: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const parseTimestamp = (dateString) => {
    if (!dateString) return null;
    const timestamp = new Date(dateString).getTime();
    return isNaN(timestamp) ? null : timestamp;
  };

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã - –û–ë–ù–û–í–õ–ï–ù–ê –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–ª–∏–≤–Ω—ã–º —Ö—É–∫–æ–º –∏ –∞–≤–∞—Ç–∞—Ä–∫–æ–π
  const loadGameData = useCallback(async (userId) => {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è userId:', userId);
    
    // üî• –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const telegramUserData = loadTelegramUserData();
    
    try {
      const initialState = await apiClient('/game_state', 'GET', { params: { userId } });
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–∞:', initialState);

      if (initialState && typeof initialState === 'object') {
        // –ü–†–û–í–ï–†–ö–ê 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ - –û–ë–ù–û–í–õ–ï–ù–ê –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
        setPlayerLevel(Number(initialState.player_level) || 1);
        
        // ‚úÖ –ù–û–í–û–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Telegram –¥–∞–Ω–Ω—ã–º, –ø–æ—Ç–æ–º –ë–î, –ø–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç
        let finalName = playerName;
        let finalPhoto = playerPhoto;
        
        if (telegramUserData?.first_name) {
          finalName = telegramUserData.first_name;
        } else if (initialState.first_name) {
          finalName = initialState.first_name;
        }
        
        if (telegramUserData?.photo_url) {
          finalPhoto = telegramUserData.photo_url;
        } else if (initialState.player_photo) {
          finalPhoto = initialState.player_photo;
        }
        
        setPlayerName(finalName);
        setPlayerPhoto(finalPhoto);
        
        console.log('üë§ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { name: finalName, photo: finalPhoto });
        
        const coinsToSet = Number(initialState.game_coins) || STARTING_COINS;
        setGameCoins(coinsToSet);
        
        setJetCoins(Number(initialState.jet_coins) || 0);
        setCurrentXp(Number(initialState.current_xp) || 10);
        setXpToNextLevel(Number(initialState.xp_to_next_level) || 100);
        setHasCompletedTutorial(Boolean(initialState.has_completed_tutorial));
        
        // ‚úÖ –ó–ê–ì–†–£–ó–ö–ê —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ö—É–∫
        fuelSystem.loadFuelData(initialState, debouncedSave, userId);
        
        // –ü–†–û–í–ï–†–ö–ê 3: –¢—É—Ç–æ—Ä–∏–∞–ª –ª–æ–≥–∏–∫–∞ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const savedTutorial = Boolean(initialState.has_completed_tutorial);
        if (!savedTutorial && (Number(initialState.player_level) === 1 || !initialState.player_level)) {
          console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
          setTimeout(() => {
            setIsTutorialActive(true);
            setTutorialStep(0);
            setAccumulatedIncome(25);
          }, 1000);
        }

        // –ü–†–û–í–ï–†–ö–ê 3: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const loadedLastCollectedTime = parseTimestamp(initialState.last_collected_time) || Date.now();
        const loadedLastExitTime = parseTimestamp(initialState.last_exit_time) || loadedLastCollectedTime;
        lastCollectedTimeRef.current = loadedLastCollectedTime;

        // –ü–†–û–í–ï–†–ö–ê 3: –û—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const now = Date.now();
        const offlineTimeMs = Math.max(0, now - loadedLastExitTime);

        // –ü–†–û–í–ï–†–ö–ê 3: –ó–¥–∞–Ω–∏—è - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        let loadedBuildings = INITIAL_BUILDINGS;
        if (Array.isArray(initialState.buildings) && initialState.buildings.length > 0) {
          const validBuildings = initialState.buildings.every(building => 
            building && 
            typeof building.id === 'string' && 
            typeof building.name === 'string' && 
            typeof building.icon === 'string' &&
            typeof building.level === 'number' &&
            typeof building.isLocked === 'boolean'
          );
          
          if (validBuildings) {
            loadedBuildings = initialState.buildings;
          }
        }
        setBuildings(loadedBuildings);

        // –ü–†–û–í–ï–†–ö–ê 3: –ü–µ—Ä—Å–æ–Ω–∞–ª - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const loadedHiredStaff = initialState.hired_staff && typeof initialState.hired_staff === 'object' 
          ? initialState.hired_staff 
          : INITIAL_HIRED_STAFF;
        setHiredStaff(loadedHiredStaff);

        // –ü–†–û–í–ï–†–ö–ê 3: –ú–∞—à–∏–Ω—ã - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const loadedPlayerCarsRaw = Array.isArray(initialState.player_cars) ? initialState.player_cars : [INITIAL_CAR];
        const loadedPlayerCars = loadedPlayerCarsRaw.map(sc => {
          if (sc && sc.id && sc.parts) {
            return { ...sc, stats: recalculateStatsAndIncomeBonus(sc.id, sc.parts).stats };
          }
          return null;
        }).filter(Boolean);
        
        const actualPlayerCars = loadedPlayerCars.length > 0 ? loadedPlayerCars : [INITIAL_CAR];
        setPlayerCars(actualPlayerCars);

        // –ü–†–û–í–ï–†–ö–ê 3: –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const loadedSelectedCarId = initialState.selected_car_id;
        const finalSelectedCarId = loadedSelectedCarId && actualPlayerCars.some(c => c.id === loadedSelectedCarId)
          ? loadedSelectedCarId
          : actualPlayerCars[0]?.id || INITIAL_CAR.id;
        setSelectedCarId(finalSelectedCarId);

        // –ü–†–û–í–ï–†–ö–ê 3: –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const carToCalculateFrom = actualPlayerCars.find(c => c.id === finalSelectedCarId) || actualPlayerCars[0] || INITIAL_CAR;
        const initialTotalRate = calculateTotalIncomeRate(loadedBuildings, carToCalculateFrom, loadedHiredStaff);
        setIncomeRatePerHour(initialTotalRate);
        
        // –ü–†–û–í–ï–†–ö–ê 3: –û—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥ —Ä–∞—Å—á–µ—Ç - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        let offlineIncome = 0;
        if (offlineTimeMs > 0 && initialTotalRate > 0) {
          const MAX_OFFLINE_HOURS = 2;
          offlineIncome = (initialTotalRate / 3600) * Math.min(offlineTimeMs / 1000, MAX_OFFLINE_HOURS * 3600);
        }
        setAccumulatedIncome(Math.max(offlineIncome, 0));
        
        // üî• –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (telegramUserData && (telegramUserData.photo_url || telegramUserData.first_name)) {
          setTimeout(() => {
            saveGameState({ 
              player_photo: finalPhoto,
              first_name: finalName 
            });
          }, 2000);
        }
        
        return { success: true };
        
      } else {
        console.error('‚ùå –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞' };
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
      return { success: false, error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}` };
    }
  }, [fuelSystem, debouncedSave, loadTelegramUserData, playerName, playerPhoto, saveGameState]);

  // –ü–†–û–í–ï–†–ö–ê 2: Cleanup —Ñ—É–Ω–∫—Ü–∏—è - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const cleanup = useCallback(() => {
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    const userId = getUserId();
    if (userId) {
      apiClient('/game_state', 'POST', {
        body: {
          userId: userId,
          last_exit_time: new Date().toISOString(),
        }
      }).catch(err => console.error('Failed to save last exit time:', err));
    }
  }, [getUserId]);

  // –ü–†–û–í–ï–†–ö–ê 1: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç - –û–ë–ù–û–í–õ–ï–ù –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–ø–ª–∏–≤–Ω—ã–º —Ö—É–∫–æ–º –∏ –∞–≤–∞—Ç–∞—Ä–∫–æ–π
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    playerLevel, setPlayerLevel,
    playerName, setPlayerName,
    playerPhoto, setPlayerPhoto, // ‚úÖ –ù–û–í–û–ï: –∞–≤–∞—Ç–∞—Ä–∫–∞
    gameCoins, setGameCoins,
    jetCoins, setJetCoins,
    currentXp, setCurrentXp,
    xpToNextLevel, setXpToNextLevel,
    incomeRatePerHour, setIncomeRatePerHour,
    lastCollectedTimeRef,
    accumulatedIncome, setAccumulatedIncome,
    
    // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    buildings, setBuildings,
    playerCars, setPlayerCars,
    selectedCarId, setSelectedCarId,
    hiredStaff, setHiredStaff,
    currentCar,
    
    // –¢—É—Ç–æ—Ä–∏–∞–ª
    isTutorialActive, setIsTutorialActive,
    tutorialStep, setTutorialStep,
    hasCompletedTutorial, setHasCompletedTutorial,
    
    // ‚úÖ –¢–û–ü–õ–ò–í–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ - —Ç–µ–ø–µ—Ä—å –∏–∑ —Ö—É–∫–∞
    fuelSystem,
    
    // –§—É–Ω–∫—Ü–∏–∏
    saveGameState,
    loadGameData,
    loadTelegramUserData, // ‚úÖ –ù–û–í–û–ï: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram
    parseTimestamp,
    cleanup
  };
};