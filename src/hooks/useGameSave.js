import { useRef, useCallback } from 'react';
import apiClient from '../apiClient';
import { MAX_OFFLINE_HOURS } from '../utils';

export const useGameSave = (getUserId) => {
  const saveTimeoutRef = useRef(null);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç
  const parseTimestamp = useCallback((dateString) => {
    if (!dateString) return null;
    const timestamp = new Date(dateString).getTime();
    return isNaN(timestamp) ? null : timestamp;
  }, []);

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø - API –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π
  const apiRequestWithRetry = useCallback(async (endpoint, method = 'GET', options = {}, maxRetries = 3) => {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üåê API –∑–∞–ø—Ä–æ—Å ${method} ${endpoint} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`);
        
        const result = await apiClient(endpoint, method, options);
        
        console.log(`‚úÖ API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return { success: true, data: result };
        
      } catch (error) {
        console.log(`‚ùå API –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        const isNetworkError = error.message.includes('ERR_CONNECTION_RESET') || 
                              error.message.includes('Failed to fetch') ||
                              error.message.includes('Network Error');
        
        if (isNetworkError) {
          console.log('üêå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–µ—Ä–≤–µ—Ä "—Å–ø–∏—Ç"');
        }
        
        if (attempt === maxRetries) {
          console.log(`üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã`);
          return { 
            success: false, 
            error: error.message,
            isNetworkError 
          };
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1—Å, 2—Å, 4—Å
        const delay = Math.pow(2, attempt - 1) * 1000;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay/1000}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }, []);

  // Debounced save function –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
  const debouncedSave = useCallback((data) => {
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    saveTimeoutRef.current = setTimeout(async () => {
      const userId = getUserId();
      if (!userId) {
        console.warn('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: userId –Ω–µ –≥–æ—Ç–æ–≤');
        return;
      }

      try {
        console.log('üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è userId:', userId);
        const result = await apiRequestWithRetry('/game_state', 'POST', { body: { userId, ...data } }, 2);
        
        if (result.success) {
          console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ retry:', result.error);
        }
      } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err.message);
      }
    }, 500); // 500ms debounce
  }, [getUserId, apiRequestWithRetry]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const saveGameState = useCallback(async (gameState, fuelState, updates = {}) => {
    const userId = getUserId();
    if (!userId) {
      console.warn('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: userId –Ω–µ –≥–æ—Ç–æ–≤');
      return;
    }

    const stateToSave = {
      userId: userId,
      player_level: gameState.playerLevel,
      first_name: gameState.playerName,
      game_coins: gameState.gameCoins,
      jet_coins: gameState.jetCoins,
      current_xp: gameState.currentXp,
      xp_to_next_level: gameState.xpToNextLevel,
      income_rate_per_hour: gameState.incomeRatePerHour,
      last_collected_time: new Date(gameState.lastCollectedTimeRef.current).toISOString(),
      buildings: gameState.buildings,
      player_cars: gameState.playerCars,
      selected_car_id: gameState.selectedCarId,
      hired_staff: gameState.hiredStaff,
      has_completed_tutorial: gameState.hasCompletedTutorial,
      last_exit_time: new Date().toISOString(),
      // –¢–æ–ø–ª–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      fuel_count: fuelState.fuelCount,
      last_race_time: fuelState.lastRaceTime ? new Date(fuelState.lastRaceTime).toISOString() : null,
      fuel_refill_time: fuelState.fuelRefillTime ? new Date(fuelState.fuelRefillTime).toISOString() : null,
      ...updates
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounced save –¥–ª—è –Ω–µ–≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (updates && Object.keys(updates).length < 3) {
      debouncedSave(stateToSave);
      return;
    }

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å retry
    const result = await apiRequestWithRetry('/game_state', 'POST', { body: stateToSave }, 2);
    
    if (result.success) {
      console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ retry:', result.error);
    }
  }, [getUserId, debouncedSave, apiRequestWithRetry]);

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã —Å retry –ª–æ–≥–∏–∫–æ–π
  const loadGameData = useCallback(async (userId, gameState, fuelState, checkAndRestoreFuel) => {
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è userId:', userId);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å retry
    const result = await apiRequestWithRetry('/game_state', 'GET', { params: { userId } }, 3);
    
    if (!result.success) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', result.error);
      
      // –ï—Å–ª–∏ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      if (result.isNetworkError) {
        return { 
          success: false, 
          error: result.error,
          isNetworkError: true,
          useDefaults: true
        };
      }
      
      return { success: false, error: result.error };
    }

    const initialState = result.data;
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±—ç–∫–µ–Ω–¥–∞:', initialState);

    if (initialState && typeof initialState === 'object') {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const { incomeRate } = gameState.initializeGameState(initialState);
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
      const loadedFuelCount = Math.min(Math.max(Number(initialState.fuel_count) || 5, 0), 5);
      const loadedLastRaceTime = parseTimestamp(initialState.last_race_time);
      const loadedFuelRefillTime = parseTimestamp(initialState.fuel_refill_time);
      
      console.log('‚õΩ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–ª–∏–≤–∞:', {
        fuel: loadedFuelCount,
        lastRace: loadedLastRaceTime ? new Date(loadedLastRaceTime).toLocaleString() : '–Ω–µ—Ç',
        refillTime: loadedFuelRefillTime ? new Date(loadedFuelRefillTime).toLocaleString() : '–Ω–µ—Ç'
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞
      const fuelResult = checkAndRestoreFuel(loadedFuelCount, loadedLastRaceTime, loadedFuelRefillTime);
      
      fuelState.setFuelCount(fuelResult.fuel);
      fuelState.setLastRaceTime(fuelResult.newLastRaceTime || loadedLastRaceTime);
      fuelState.setFuelRefillTime(fuelResult.newRefillTime !== undefined ? fuelResult.newRefillTime : loadedFuelRefillTime);
      
      // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ
      if (fuelResult.shouldUpdate) {
        console.log('‚õΩ –¢–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!');
        // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
          debouncedSave({
            userId,
            fuel_count: 5,
            fuel_refill_time: null,
            last_race_time: new Date(fuelResult.newLastRaceTime).toISOString()
          });
        }, 2000);
      }
      
      // –¢—É—Ç–æ—Ä–∏–∞–ª
      const savedTutorial = Boolean(initialState.has_completed_tutorial);
      if (!savedTutorial && (Number(initialState.player_level) === 1 || !initialState.player_level)) {
        console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
        setTimeout(() => {
          gameState.setIsTutorialActive(true);
          gameState.setTutorialStep(0);
          gameState.setAccumulatedIncome(25);
        }, 1000);
      }

      // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
      const loadedLastCollectedTime = parseTimestamp(initialState.last_collected_time) || Date.now();
      const loadedLastExitTime = parseTimestamp(initialState.last_exit_time) || loadedLastCollectedTime;
      gameState.updateLastCollectedTime(loadedLastCollectedTime);

      // –û—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥
      const now = Date.now();
      const offlineTimeMs = Math.max(0, now - loadedLastExitTime);
      
      let offlineIncome = 0;
      if (offlineTimeMs > 0 && incomeRate > 0) {
        offlineIncome = (incomeRate / 3600) * Math.min(offlineTimeMs / 1000, MAX_OFFLINE_HOURS * 3600);
        
        if (offlineIncome > 0) {
          console.log(`üí∞ –û—Ñ—Ñ–ª–∞–π–Ω –¥–æ—Ö–æ–¥: ${Math.floor(offlineIncome)} –º–æ–Ω–µ—Ç –∑–∞ ${(offlineTimeMs/1000/3600).toFixed(1)}—á`);
        }
      }
      gameState.setAccumulatedIncome(Math.max(offlineIncome, 0));
      
      return { success: true, data: initialState };
      
    } else {
      console.error('‚ùå –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞' };
    }
  }, [parseTimestamp, debouncedSave, apiRequestWithRetry]);

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞
  const saveExitTime = useCallback(async () => {
    const userId = getUserId();
    if (!userId) return;

    const result = await apiRequestWithRetry('/game_state', 'POST', {
      body: {
        userId: userId,
        last_exit_time: new Date().toISOString(),
      }
    }, 1); // –¢–æ–ª—å–∫–æ 1 –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è exit time

    if (result.success) {
      console.log('‚úÖ –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞:', result.error);
    }
  }, [getUserId, apiRequestWithRetry]);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const cleanupSaveTimers = useCallback(() => {
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
      saveTimeoutRef.current = null;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ saveGameState –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥—Ä—É–≥–∏–µ —Ö—É–∫–∏
  const createSaveFunction = useCallback((gameState, fuelState) => {
    return (updates = {}) => saveGameState(gameState, fuelState, updates);
  }, [saveGameState]);

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const saveFuelData = useCallback(async (fuelState, updates = {}) => {
    const userId = getUserId();
    if (!userId) {
      console.warn('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞: userId –Ω–µ –≥–æ—Ç–æ–≤');
      return;
    }

    const fuelDataToSave = {
      userId,
      fuel_count: fuelState.fuelCount,
      last_race_time: fuelState.lastRaceTime ? new Date(fuelState.lastRaceTime).toISOString() : null,
      fuel_refill_time: fuelState.fuelRefillTime ? new Date(fuelState.fuelRefillTime).toISOString() : null,
      ...updates
    };

    const result = await apiRequestWithRetry('/game_state', 'POST', { body: fuelDataToSave }, 2);
    
    if (result.success) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–ø–ª–∏–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞:', result.error);
    }
  }, [getUserId, apiRequestWithRetry]);

  // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const validateLoadedData = useCallback((data) => {
    if (!data || typeof data !== 'object') {
      return { isValid: false, error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = ['player_level', 'game_coins'];
    for (const field of requiredFields) {
      if (data[field] === undefined) {
        console.warn(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–æ–≤
    if (data.buildings && !Array.isArray(data.buildings)) {
      console.warn('‚ö†Ô∏è buildings –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
      data.buildings = null;
    }

    if (data.player_cars && !Array.isArray(data.player_cars)) {
      console.warn('‚ö†Ô∏è player_cars –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
      data.player_cars = null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª
    const numericFields = ['player_level', 'game_coins', 'jet_coins', 'current_xp', 'xp_to_next_level', 'income_rate_per_hour', 'fuel_count'];
    numericFields.forEach(field => {
      if (data[field] !== undefined && (isNaN(Number(data[field])) || !isFinite(Number(data[field])))) {
        console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ ${field}: ${data[field]}`);
        data[field] = 0;
      }
    });

    return { isValid: true, data };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const createBackup = useCallback(async (gameState, fuelState) => {
    const userId = getUserId();
    if (!userId) return null;

    const backupData = {
      timestamp: new Date().toISOString(),
      userId,
      gameState: {
        playerLevel: gameState.playerLevel,
        playerName: gameState.playerName,
        gameCoins: gameState.gameCoins,
        jetCoins: gameState.jetCoins,
        currentXp: gameState.currentXp,
        xpToNextLevel: gameState.xpToNextLevel,
        incomeRatePerHour: gameState.incomeRatePerHour,
        buildings: gameState.buildings,
        playerCars: gameState.playerCars,
        selectedCarId: gameState.selectedCarId,
        hiredStaff: gameState.hiredStaff,
        hasCompletedTutorial: gameState.hasCompletedTutorial,
      },
      fuelState: {
        fuelCount: fuelState.fuelCount,
        lastRaceTime: fuelState.lastRaceTime,
        fuelRefillTime: fuelState.fuelRefillTime,
      }
    };

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
      localStorage.setItem(`gameBackup_${userId}`, JSON.stringify(backupData));
      console.log('üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
      return backupData;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', err.message);
      return null;
    }
  }, [getUserId]);

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    saveGameState,
    loadGameData,
    saveFuelData,
    saveExitTime,
    
    // ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
    apiRequestWithRetry,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    parseTimestamp,
    validateLoadedData,
    createBackup,
    cleanupSaveTimers,
    createSaveFunction,
    
    // –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    debouncedSave,
    
    // Refs
    saveTimeoutRef,
  };
};