import { useState, useEffect, useCallback } from 'react';

export const useFuelSystem = (saveHook, sendHapticFeedback) => {
  const [fuelCount, setFuelCount] = useState(5);
  const [lastRaceTime, setLastRaceTime] = useState(null);
  const [fuelRefillTime, setFuelRefillTime] = useState(null);

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ saveHook
  const fuelState = {
    fuelCount,
    lastRaceTime,
    fuelRefillTime,
    setFuelCount,
    setLastRaceTime,
    setFuelRefillTime,
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  const checkAndRestoreFuel = useCallback((currentFuel, lastRace, refillTime) => {
    if (currentFuel >= 5) return { fuel: currentFuel, shouldUpdate: false };
    
    const now = Date.now();
    const timeToCheck = refillTime || (lastRace ? lastRace + (60 * 60 * 1000) : null);
    
    if (timeToCheck && now >= timeToCheck) {
      console.log('‚õΩ –¢–æ–ø–ª–∏–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return { 
        fuel: 5, 
        shouldUpdate: true, 
        newLastRaceTime: now, 
        newRefillTime: null 
      };
    }
    
    return { fuel: currentFuel, shouldUpdate: false };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const initializeFuelSystem = useCallback((initialState) => {
    console.log('‚õΩ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    const parseTimestamp = (dateString) => {
      if (!dateString) return null;
      const timestamp = new Date(dateString).getTime();
      return isNaN(timestamp) ? null : timestamp;
    };

    const loadedFuelCount = Math.min(Math.max(Number(initialState.fuel_count) || 5, 0), 5);
    const loadedLastRaceTime = parseTimestamp(initialState.last_race_time);
    const loadedFuelRefillTime = parseTimestamp(initialState.fuel_refill_time);
    
    console.log('‚õΩ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–ª–∏–≤–∞:', {
      fuel: loadedFuelCount,
      lastRace: loadedLastRaceTime ? new Date(loadedLastRaceTime).toLocaleString() : '–Ω–µ—Ç',
      refillTime: loadedFuelRefillTime ? new Date(loadedFuelRefillTime).toLocaleString() : '–Ω–µ—Ç'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞
    const fuelResult = checkAndRestoreFuel(loadedFuelCount, loadedLastRaceTime, loadedFuelRefillTime);
    
    setFuelCount(fuelResult.fuel);
    setLastRaceTime(fuelResult.newLastRaceTime || loadedLastRaceTime);
    setFuelRefillTime(fuelResult.newRefillTime !== undefined ? fuelResult.newRefillTime : loadedFuelRefillTime);
    
    // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ
    if (fuelResult.shouldUpdate) {
      console.log('‚õΩ –¢–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!');
      // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      setTimeout(() => {
        saveFuelData({
          fuel_count: 5,
          fuel_refill_time: null,
          last_race_time: new Date(fuelResult.newLastRaceTime).toISOString()
        });
      }, 2000);
    }

    return fuelResult;
  }, [checkAndRestoreFuel]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const saveFuelData = useCallback(async (updates = {}) => {
    if (!saveHook?.saveFuelData) {
      console.warn('‚ö†Ô∏è saveHook.saveFuelData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }

    try {
      await saveHook.saveFuelData(fuelState, updates);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞:', err);
    }
  }, [saveHook, fuelState]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  const handleFuelUpdate = useCallback((newFuelCount, newLastRaceTime, newRefillTime = null) => {
    console.log('‚õΩ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞:', {
      fuel: newFuelCount,
      lastRace: newLastRaceTime ? new Date(newLastRaceTime).toLocaleString() : '–Ω–µ—Ç',
      refillTime: newRefillTime ? new Date(newRefillTime).toLocaleString() : '–Ω–µ—Ç'
    });
    
    const validFuelCount = Math.min(Math.max(Number(newFuelCount) || 0, 0), 5);
    const validLastRaceTime = Number(newLastRaceTime) || Date.now();
    
    setFuelCount(validFuelCount);
    setLastRaceTime(validLastRaceTime);
    
    if (newRefillTime !== undefined) {
      setFuelRefillTime(newRefillTime ? Number(newRefillTime) : null);
    }
    
    const updateData = {
      fuel_count: validFuelCount,
      last_race_time: new Date(validLastRaceTime).toISOString(),
    };
    
    if (newRefillTime !== undefined) {
      updateData.fuel_refill_time = newRefillTime ? new Date(newRefillTime).toISOString() : null;
    }
    
    saveFuelData(updateData);
  }, [saveFuelData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
  const handleFuelRefillByAd = useCallback(() => {
    const now = Date.now();
    console.log('üì∫ –¢–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã');
    
    setFuelCount(5);
    setLastRaceTime(now);
    setFuelRefillTime(null);
    
    // Haptic feedback –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    if (sendHapticFeedback) {
      sendHapticFeedback('success');
    }
    
    saveFuelData({
      fuel_count: 5,
      last_race_time: new Date(now).toISOString(),
      fuel_refill_time: null,
    });
  }, [saveFuelData, sendHapticFeedback]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ (–¥–ª—è –≥–æ–Ω–æ–∫)
  const consumeFuel = useCallback((amount = 1) => {
    if (fuelCount <= 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è');
      return false;
    }
    
    const newFuelCount = Math.max(0, fuelCount - amount);
    const now = Date.now();
    
    setFuelCount(newFuelCount);
    setLastRaceTime(now);
    
    // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (newFuelCount === 0) {
      const refillTime = now + (60 * 60 * 1000); // 1 —á–∞—Å
      setFuelRefillTime(refillTime);
      
      saveFuelData({
        fuel_count: newFuelCount,
        last_race_time: new Date(now).toISOString(),
        fuel_refill_time: new Date(refillTime).toISOString(),
      });
    } else {
      saveFuelData({
        fuel_count: newFuelCount,
        last_race_time: new Date(now).toISOString(),
      });
    }
    
    console.log(`‚õΩ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ ${amount} —Ç–æ–ø–ª–∏–≤–∞. –û—Å—Ç–∞–ª–æ—Å—å: ${newFuelCount}`);
    return true;
  }, [fuelCount, saveFuelData]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–∞–≤–∫–∏
  const canRefillFuel = useCallback(() => {
    if (fuelCount >= 5) return false;
    
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (fuelRefillTime && now >= fuelRefillTime) {
      return 'natural'; // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–∏
    if (lastRaceTime && now >= (lastRaceTime + (60 * 60 * 1000))) {
      return 'natural';
    }
    
    return 'ad'; // –¢–æ–ª—å–∫–æ –∑–∞ —Ä–µ–∫–ª–∞–º—É
  }, [fuelCount, fuelRefillTime, lastRaceTime]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  const getTimeToRefill = useCallback(() => {
    if (fuelCount >= 5) return 0;
    
    const now = Date.now();
    let targetTime = null;
    
    if (fuelRefillTime) {
      targetTime = fuelRefillTime;
    } else if (lastRaceTime) {
      targetTime = lastRaceTime + (60 * 60 * 1000);
    }
    
    if (targetTime) {
      const timeLeft = Math.max(0, targetTime - now);
      return timeLeft;
    }
    
    return 0;
  }, [fuelCount, fuelRefillTime, lastRaceTime]);

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  const formatRefillTime = useCallback(() => {
    const timeLeft = getTimeToRefill();
    
    if (timeLeft <= 0) return null;
    
    const hours = Math.floor(timeLeft / (60 * 60 * 1000));
    const minutes = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));
    const seconds = Math.floor((timeLeft % (60 * 1000)) / 1000);
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    } else {
      return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
  }, [getTimeToRefill]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ–ø–ª–∏–≤–∞
  const hasFuel = useCallback((amount = 1) => {
    return fuelCount >= amount;
  }, [fuelCount]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è UI
  const getFuelIndicator = useCallback(() => {
    const tanks = [];
    for (let i = 0; i < 5; i++) {
      tanks.push({
        id: i,
        isFull: i < fuelCount,
        isEmpty: i >= fuelCount
      });
    }
    return tanks;
  }, [fuelCount]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    if (fuelCount >= 5) return;
    
    const checkInterval = setInterval(() => {
      const refillType = canRefillFuel();
      
      if (refillType === 'natural') {
        console.log('‚õΩ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞');
        const now = Date.now();
        
        setFuelCount(5);
        setLastRaceTime(now);
        setFuelRefillTime(null);
        
        saveFuelData({
          fuel_count: 5,
          last_race_time: new Date(now).toISOString(),
          fuel_refill_time: null,
        });
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    return () => clearInterval(checkInterval);
  }, [fuelCount, canRefillFuel, saveFuelData]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  const resetFuelSystem = useCallback(() => {
    console.log('üîÑ –°–±—Ä–æ—Å —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
    
    setFuelCount(5);
    setLastRaceTime(null);
    setFuelRefillTime(null);
    
    saveFuelData({
      fuel_count: 5,
      last_race_time: null,
      fuel_refill_time: null,
    });
  }, [saveFuelData]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    fuelCount,
    lastRaceTime,
    fuelRefillTime,
    fuelState, // –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥—Ä—É–≥–∏–µ —Ö—É–∫–∏
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    initializeFuelSystem,
    handleFuelUpdate,
    handleFuelRefillByAd,
    consumeFuel,
    checkAndRestoreFuel,
    
    // –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    canRefillFuel,
    hasFuel,
    getTimeToRefill,
    formatRefillTime,
    getFuelIndicator,
    
    // –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    saveFuelData,
    resetFuelSystem,
    
    // –°–µ—Ç—Ç–µ—Ä—ã (–¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    setFuelCount,
    setLastRaceTime,
    setFuelRefillTime,
  };
};