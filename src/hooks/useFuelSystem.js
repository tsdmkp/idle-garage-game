// hooks/useFuelSystem.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import { useState, useCallback } from 'react';

export const useFuelSystem = (saveGameState) => {
  // –ü–†–û–í–ï–†–ö–ê 1: –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ useGameState.js
  const [fuelCount, setFuelCount] = useState(5);
  const [lastRaceTime, setLastRaceTime] = useState(null);
  const [fuelRefillTime, setFuelRefillTime] = useState(null);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ useGameState.js
  const parseTimestamp = useCallback((dateString) => {
    if (!dateString) return null;
    const timestamp = new Date(dateString).getTime();
    return isNaN(timestamp) ? null : timestamp;
  }, []);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û, —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ useGameState.js
  const checkAndRestoreFuel = useCallback((currentFuel, lastRace, refillTime) => {
    if (currentFuel >= 5) return { fuel: currentFuel, shouldUpdate: false };
    
    const now = Date.now();
    const timeToCheck = refillTime || (lastRace ? lastRace + (60 * 60 * 1000) : null);
    
    if (timeToCheck && now >= timeToCheck) {
      console.log('‚õΩ –¢–æ–ø–ª–∏–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return { 
        fuel: 5, 
        shouldUpdate: true, 
        newLastRaceTime: now, 
        newRefillTime: null 
      };
    }
    
    return { fuel: currentFuel, shouldUpdate: false };
  }, []);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ useGameState.js
  const loadFuelData = useCallback((initialState, debouncedSave, userId) => {
    // –ü–†–û–í–ï–†–ö–ê 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ useGameState.js
    const loadedFuelCount = Math.min(Math.max(Number(initialState.fuel_count) || 5, 0), 5);
    const loadedLastRaceTime = parseTimestamp(initialState.last_race_time);
    const loadedFuelRefillTime = parseTimestamp(initialState.fuel_refill_time);
    
    console.log('‚õΩ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–ª–∏–≤–∞:', {
      fuel: loadedFuelCount,
      lastRace: loadedLastRaceTime ? new Date(loadedLastRaceTime).toLocaleString() : '–Ω–µ—Ç',
      refillTime: loadedFuelRefillTime ? new Date(loadedFuelRefillTime).toLocaleString() : '–Ω–µ—Ç'
    });
    
    // –ü–†–û–í–ï–†–ö–ê 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ useGameState.js
    const fuelResult = checkAndRestoreFuel(loadedFuelCount, loadedLastRaceTime, loadedFuelRefillTime);
    
    setFuelCount(fuelResult.fuel);
    setLastRaceTime(fuelResult.newLastRaceTime || loadedLastRaceTime);
    setFuelRefillTime(fuelResult.newRefillTime !== undefined ? fuelResult.newRefillTime : loadedFuelRefillTime);
    
    // –ü–†–û–í–ï–†–ö–ê 3: –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ useGameState.js
    if (fuelResult.shouldUpdate) {
      console.log('‚õΩ –¢–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!');
      setTimeout(() => {
        // –ü–†–û–í–ï–†–ö–ê 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π debouncedSave
        const saveData = {
          userId,
          fuel_count: 5,
          fuel_refill_time: null,
          last_race_time: new Date(fuelResult.newLastRaceTime).toISOString()
        };
        debouncedSave(saveData);
      }, 2000);
    }
    
    return {
      fuelCount: fuelResult.fuel,
      lastRaceTime: fuelResult.newLastRaceTime || loadedLastRaceTime,
      fuelRefillTime: fuelResult.newRefillTime !== undefined ? fuelResult.newRefillTime : loadedFuelRefillTime
    };
  }, [parseTimestamp, checkAndRestoreFuel]);

  // –ü–†–û–í–ï–†–ö–ê 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û, —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ App.jsx
  const handleFuelUpdate = useCallback((newFuelCount, newLastRaceTime, newRefillTime = null) => {
    console.log('‚õΩ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞:', {
      fuel: newFuelCount,
      lastRace: newLastRaceTime ? new Date(newLastRaceTime).toLocaleString() : '–Ω–µ—Ç',
      refillTime: newRefillTime ? new Date(newRefillTime).toLocaleString() : '–Ω–µ—Ç'
    });
    
    // –ü–†–û–í–ï–†–ö–ê 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ App.jsx
    const validFuelCount = Math.min(Math.max(Number(newFuelCount) || 0, 0), 5);
    const validLastRaceTime = Number(newLastRaceTime) || Date.now();
    
    setFuelCount(validFuelCount);
    setLastRaceTime(validLastRaceTime);
    
    if (newRefillTime !== undefined) {
      setFuelRefillTime(newRefillTime ? Number(newRefillTime) : null);
    }
    
    // –ü–†–û–í–ï–†–ö–ê 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ App.jsx
    const updateData = {
      fuel_count: validFuelCount,
      last_race_time: new Date(validLastRaceTime).toISOString(),
    };
    
    if (newRefillTime !== undefined) {
      updateData.fuel_refill_time = newRefillTime ? new Date(newRefillTime).toISOString() : null;
    }
    
    // –ü–†–û–í–ï–†–ö–ê 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π saveGameState
    if (saveGameState) {
      saveGameState(updateData);
    }
  }, [saveGameState]);

  // –ü–†–û–í–ï–†–ö–ê 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û, —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ App.jsx
  const handleFuelRefillByAd = useCallback(() => {
    const now = Date.now();
    console.log('üì∫ –¢–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã');
    
    setFuelCount(5);
    setLastRaceTime(now);
    setFuelRefillTime(null);
    
    // –ü–†–û–í–ï–†–ö–ê 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ App.jsx
    if (saveGameState) {
      saveGameState({
        fuel_count: 5,
        last_race_time: new Date(now).toISOString(),
        fuel_refill_time: null,
      });
    }
  }, [saveGameState]);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–æ–Ω–∫–∏
  const canStartRace = useCallback(() => {
    return fuelCount > 0;
  }, [fuelCount]);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  const getTimeUntilRefill = useCallback(() => {
    if (fuelCount >= 5) return 0;
    
    const now = Date.now();
    let refillTime;
    
    if (fuelRefillTime) {
      refillTime = fuelRefillTime;
    } else if (lastRaceTime) {
      refillTime = lastRaceTime + (60 * 60 * 1000); // 1 —á–∞—Å
    } else {
      return 0;
    }
    
    const timeRemaining = Math.max(0, refillTime - now);
    return timeRemaining;
  }, [fuelCount, fuelRefillTime, lastRaceTime]);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const getRefillTimeText = useCallback(() => {
    const timeRemaining = getTimeUntilRefill();
    
    if (timeRemaining <= 0) return null;
    
    const minutes = Math.floor(timeRemaining / (60 * 1000));
    const seconds = Math.floor((timeRemaining % (60 * 1000)) / 1000);
    
    if (minutes > 0) {
      return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    } else {
      return `0:${seconds.toString().padStart(2, '0')}`;
    }
  }, [getTimeUntilRefill]);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ (–¥–ª—è –≥–æ–Ω–æ–∫)
  const consumeFuel = useCallback(() => {
    if (fuelCount > 0) {
      const newFuelCount = fuelCount - 1;
      const now = Date.now();
      
      setFuelCount(newFuelCount);
      setLastRaceTime(now);
      
      // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      if (newFuelCount === 0) {
        const refillTime = now + (60 * 60 * 1000); // 1 —á–∞—Å
        setFuelRefillTime(refillTime);
        
        if (saveGameState) {
          saveGameState({
            fuel_count: newFuelCount,
            last_race_time: new Date(now).toISOString(),
            fuel_refill_time: new Date(refillTime).toISOString(),
          });
        }
      } else {
        if (saveGameState) {
          saveGameState({
            fuel_count: newFuelCount,
            last_race_time: new Date(now).toISOString(),
          });
        }
      }
      
      return true; // –¢–æ–ø–ª–∏–≤–æ —É—Å–ø–µ—à–Ω–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ
    }
    
    return false; // –¢–æ–ø–ª–∏–≤–∞ –Ω–µ—Ç
  }, [fuelCount, saveGameState]);

  // –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  const updateFuelState = useCallback((newFuelCount, newLastRaceTime, newRefillTime) => {
    // –ü–†–û–í–ï–†–ö–ê 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validFuelCount = Math.min(Math.max(Number(newFuelCount) || 0, 0), 5);
    const validLastRaceTime = newLastRaceTime ? Number(newLastRaceTime) : null;
    const validRefillTime = newRefillTime ? Number(newRefillTime) : null;
    
    setFuelCount(validFuelCount);
    setLastRaceTime(validLastRaceTime);
    setFuelRefillTime(validRefillTime);
  }, []);

  // –ü–†–û–í–ï–†–ö–ê 1: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç - –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    fuelCount,
    lastRaceTime, 
    fuelRefillTime,
    
    // Setters (–¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ App.jsx –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    setFuelCount,
    setLastRaceTime,
    setFuelRefillTime,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    handleFuelUpdate,
    handleFuelRefillByAd,
    loadFuelData,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    checkAndRestoreFuel,
    parseTimestamp,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    canStartRace,
    getTimeUntilRefill,
    getRefillTimeText,
    consumeFuel,
    updateFuelState
  };
};