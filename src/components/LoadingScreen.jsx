import React, { useState, useEffect } from 'react';
import './LoadingScreen.css';

const LoadingScreen = ({ onLoadingComplete }) => {
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState('');

  // –≠—Ç–∞–ø—ã –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingSteps = [
    { text: '–ó–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è...', duration: 800 },
    { text: '–ó–∞–≥—Ä—É–∑–∫–∞ –≥–∞—Ä–∞–∂–∞...', duration: 600 },
    { text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—à–∏–Ω...', duration: 700 },
    { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞—Å—Å—ã...', duration: 500 },
    { text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...', duration: 600 },
    { text: '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...', duration: 400 }
  ];

  useEffect(() => {
    let currentProgress = 0;
    let stepIndex = 0;
    
    const totalDuration = loadingSteps.reduce((sum, step) => sum + step.duration, 0);
    
    const loadingInterval = setInterval(() => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
      if (stepIndex < loadingSteps.length) {
        setCurrentStep(loadingSteps[stepIndex].text);
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      currentProgress += 2;
      setProgress(Math.min(currentProgress, 100));
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      if (currentProgress >= (stepIndex + 1) * (100 / loadingSteps.length)) {
        stepIndex++;
      }
      
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (currentProgress >= 100) {
        clearInterval(loadingInterval);
        setTimeout(() => {
          if (onLoadingComplete) {
            onLoadingComplete();
          }
        }, 500);
      }
    }, 50);

    return () => clearInterval(loadingInterval);
  }, [onLoadingComplete]);

  return (
    <div className="loading-screen">
      <div className="loading-background"></div>
      
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div className="loading-particles">
        {[...Array(20)].map((_, i) => (
          <div 
            key={i} 
            className="particle"
            style={{
              '--delay': `${i * 0.3}s`,
              '--x': `${Math.random() * 100}%`,
              '--y': `${Math.random() * 100}%`
            }}
          ></div>
        ))}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="loading-content">
        {/* –õ–æ–≥–æ—Ç–∏–ø/–ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="loading-header">
          <div className="game-logo">
            <div className="logo-icon">üèéÔ∏è</div>
            <h1 className="game-title">IDLE GARAGE</h1>
            <p className="game-subtitle">–¢–≤–æ–π –ø—É—Ç—å –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏–º–ø–µ—Ä–∏–∏</p>
          </div>
        </div>

        {/* –ú–∞—à–∏–Ω–∫–∞ */}
        <div className="loading-car-container">
          <div className="loading-car">
            üöó
          </div>
          <div className="car-trail"></div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="loading-progress-section">
          <div className="progress-container">
            <div className="progress-track">
              <div 
                className="progress-fill"
                style={{ width: `${progress}%` }}
              >
                <div className="progress-shine"></div>
              </div>
              <div className="progress-car" style={{ left: `${progress}%` }}>
                üèÅ
              </div>
            </div>
          </div>
          
          <div className="progress-info">
            <div className="progress-text">{currentStep}</div>
            <div className="progress-percentage">{progress}%</div>
          </div>
        </div>

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
        <div className="loading-tips">
          <p>üí° –£–ª—É—á—à–∞–π –º–∞—à–∏–Ω—ã, —á—Ç–æ–±—ã –ø–æ–±–µ–∂–¥–∞—Ç—å –≤ –≥–æ–Ω–∫–∞—Ö!</p>
        </div>
      </div>

      {/* –î–æ—Ä–æ–∂–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ */}
      <div className="road-markings">
        {[...Array(8)].map((_, i) => (
          <div key={i} className="road-line" style={{ '--delay': `${i * 0.2}s` }}></div>
        ))}
      </div>
    </div>
  );
};

export default LoadingScreen;