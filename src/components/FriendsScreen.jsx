import React, { useState, useEffect } from 'react';
import apiClient from '../apiClient';
import './FriendsScreen.css';

const FriendsScreen = ({ tgUserData }) => {
  const [friendsData, setFriendsData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [inviteRewards, setInviteRewards] = useState(null);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  const generateReferralLink = () => {
    if (!tgUserData?.id) return '';
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º startapp –¥–ª—è Mini App
    const botUsername = 'GarageGame01Bot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç
    const appName = 'Garage'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ Mini App
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Mini App - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û startapp!
    const link = `https://t.me/${botUsername}/${appName}?startapp=ref_${tgUserData.id}`;
    console.log('üîó Generated referral link:', link);
    return link;
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–∑—å—è—Ö
  useEffect(() => {
    const fetchFriendsData = async () => {
      try {
        setLoading(true);
        const userId = tgUserData?.id?.toString() || 'default';
        
        const response = await apiClient('/friends', 'GET', { 
          params: { userId } 
        });
        
        console.log('üë• Friends data loaded:', response);
        setFriendsData(response);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        if (response.pending_rewards && response.pending_rewards.length > 0) {
          setInviteRewards(response.pending_rewards);
        }
        
      } catch (err) {
        console.error('‚ùå Error loading friends data:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–∑—å—è—Ö');
      } finally {
        setLoading(false);
      }
    };

    if (tgUserData?.id) {
      fetchFriendsData();
    }
  }, [tgUserData?.id]);

  // –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ Telegram
  const handleInviteFriend = () => {
    const referralLink = generateReferralLink();
    const inviteText = `üèéÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –∏–≥—Ä–∞—é –≤ –∫—Ä—É—Ç—É—é –∏–≥—Ä—É "Garage Idle"! 

üéÆ –¢—é–Ω–∏–Ω–≥—É–π –º–∞—à–∏–Ω—ã, —É—á–∞—Å—Ç–≤—É–π –≤ –≥–æ–Ω–∫–∞—Ö, —Ä–∞–∑–≤–∏–≤–∞–π —Å–≤–æ–π –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å!

üéÅ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ +100 –º–æ–Ω–µ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫:
${referralLink}

–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ç—Ä–∞—Å—Å–µ! üèÅ`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.openTelegramLink(
        `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(inviteText)}`
      );
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      navigator.clipboard.writeText(referralLink).then(() => {
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      });
    }
  };

  // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  const handleCopyLink = () => {
    const referralLink = generateReferralLink();
    navigator.clipboard.writeText(referralLink).then(() => {
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }).catch(() => {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement('textarea');
      textArea.value = referralLink;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    });
  };

  // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  const handleClaimRewards = async () => {
    try {
      const userId = tgUserData?.id?.toString() || 'default';
      const response = await apiClient('/friends/claim', 'POST', {
        body: { userId }
      });
      
      console.log('üéÅ Rewards claimed:', response);
      setInviteRewards(null);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const updatedData = await apiClient('/friends', 'GET', { 
        params: { userId } 
      });
      setFriendsData(updatedData);
      
      alert(`–ü–æ–ª—É—á–µ–Ω–æ ${response.total_coins} –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!`);
      
    } catch (err) {
      console.error('‚ùå Error claiming rewards:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥');
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  const getReferrerLevel = (friendsCount) => {
    if (friendsCount >= 50) return { name: '–õ–µ–≥–µ–Ω–¥–∞', icon: 'üëë', color: '#ffd700' };
    if (friendsCount >= 25) return { name: '–ú–∞—Å—Ç–µ—Ä', icon: '‚≠ê', color: '#ff6b6b' };
    if (friendsCount >= 10) return { name: '–≠–∫—Å–ø–µ—Ä—Ç', icon: 'üî•', color: '#ff9800' };
    if (friendsCount >= 5) return { name: '–ù–æ–≤–∞—Ç–æ—Ä', icon: 'üöÄ', color: '#4caf50' };
    if (friendsCount >= 1) return { name: '–î—Ä—É–≥', icon: 'üë•', color: '#2196f3' };
    return { name: '–ù–æ–≤–∏—á–æ–∫', icon: 'üë§', color: '#9e9e9e' };
  };

  if (loading) {
    return (
      <div className="friends-screen">
        <div className="friends-loading">
          <div className="loading-icon">üë•</div>
          <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–∑–µ–π...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="friends-screen">
        <div className="friends-error">
          <div>‚ö†Ô∏è</div>
          <div>{error}</div>
        </div>
      </div>
    );
  }

  const referrerLevel = getReferrerLevel(friendsData?.total_invites || 0);
  const nextLevelTarget = friendsData?.total_invites >= 50 ? null : 
    friendsData?.total_invites >= 25 ? 50 :
    friendsData?.total_invites >= 10 ? 25 :
    friendsData?.total_invites >= 5 ? 10 :
    friendsData?.total_invites >= 1 ? 5 : 1;

  return (
    <div className="friends-screen">
      <div className="friends-content">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="friends-header">
          <h2>üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π</h2>
          <p>–ü–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!</p>
        </div>

        {/* –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ */}
        <div className="referrer-status">
          <div className="referrer-badge" style={{ borderColor: referrerLevel.color }}>
            <span className="referrer-icon">{referrerLevel.icon}</span>
            <span className="referrer-name" style={{ color: referrerLevel.color }}>
              {referrerLevel.name}
            </span>
          </div>
          <div className="referrer-stats">
            <div className="stat">
              <span className="stat-number">{friendsData?.total_invites || 0}</span>
              <span className="stat-label">–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ</span>
            </div>
            <div className="stat">
              <span className="stat-number">{friendsData?.total_earned || 0}</span>
              <span className="stat-label">–ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</span>
            </div>
          </div>
          {nextLevelTarget && (
            <div className="next-level">
              –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {nextLevelTarget - (friendsData?.total_invites || 0)} –¥—Ä—É–∑–µ–π
            </div>
          )}
        </div>

        {/* –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –æ–∂–∏–¥–∞—é—â–∏–µ */}
        {inviteRewards && inviteRewards.length > 0 && (
          <div className="pending-rewards">
            <h3>üéÅ –ù–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!</h3>
            <div className="rewards-list">
              {inviteRewards.map((reward, index) => (
                <div key={index} className="reward-item">
                  <span>üë§ {reward.friend_name}</span>
                  <span>üí∞ +{reward.coins} GC</span>
                </div>
              ))}
            </div>
            <button className="claim-rewards-btn" onClick={handleClaimRewards}>
              –ü–æ–ª—É—á–∏—Ç—å {inviteRewards.reduce((sum, r) => sum + r.coins, 0)} –º–æ–Ω–µ—Ç
            </button>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
        <div className="invite-section">
          <div className="invite-info">
            <div className="invite-benefit">
              <span className="benefit-icon">üéÅ</span>
              <div className="benefit-text">
                <strong>+200 –º–æ–Ω–µ—Ç</strong> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
              </div>
            </div>
            <div className="invite-benefit">
              <span className="benefit-icon">üí∞</span>
              <div className="benefit-text">
                <strong>+100 –º–æ–Ω–µ—Ç</strong> –¥—Ä—É–≥—É –≤ –ø–æ–¥–∞—Ä–æ–∫
              </div>
            </div>
          </div>
          
          <div className="invite-buttons">
            <button className="invite-btn primary" onClick={handleInviteFriend}>
              üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
            </button>
            <button className="invite-btn secondary" onClick={handleCopyLink}>
              üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
            </button>
          </div>
        </div>

        {/* –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥ */}
        <div className="rewards-table">
          <h3>üèÜ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</h3>
          <div className="rewards-grid">
            {[
              { friends: 1, reward: '200 GC', icon: 'üë§', unlocked: (friendsData?.total_invites || 0) >= 1 },
              { friends: 5, reward: '1,000 GC + –º–∞—à–∏–Ω–∞', icon: 'üöó', unlocked: (friendsData?.total_invites || 0) >= 5 },
              { friends: 10, reward: '3,000 GC + –¥–µ—Ç–∞–ª—å', icon: 'üîß', unlocked: (friendsData?.total_invites || 0) >= 10 },
              { friends: 25, reward: '10,000 GC + —Å–∫–∏–Ω', icon: 'üé®', unlocked: (friendsData?.total_invites || 0) >= 25 },
              { friends: 50, reward: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞', icon: 'üëë', unlocked: (friendsData?.total_invites || 0) >= 50 },
            ].map((milestone) => (
              <div 
                key={milestone.friends}
                className={`reward-milestone ${milestone.unlocked ? 'unlocked' : 'locked'}`}
              >
                <div className="milestone-icon">{milestone.icon}</div>
                <div className="milestone-text">
                  <div className="milestone-target">{milestone.friends} –¥—Ä—É–∑–µ–π</div>
                  <div className="milestone-reward">{milestone.reward}</div>
                </div>
                {milestone.unlocked && <div className="milestone-check">‚úÖ</div>}
              </div>
            ))}
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π */}
        {friendsData?.friends && friendsData.friends.length > 0 && (
          <div className="friends-list">
            <h3>üë• –í–∞—à–∏ –¥—Ä—É–∑—å—è ({friendsData.friends.length})</h3>
            <div className="friends-grid">
              {friendsData.friends.map((friend, index) => (
                <div key={friend.user_id || index} className="friend-card">
                  <div className="friend-avatar">
                    {friend.first_name ? friend.first_name[0].toUpperCase() : '?'}
                  </div>
                  <div className="friend-info">
                    <div className="friend-name">{friend.first_name || '–ê–Ω–æ–Ω–∏–º'}</div>
                    <div className="friend-date">
                      {new Date(friend.joined_at).toLocaleDateString('ru-RU')}
                    </div>
                  </div>
                  <div className="friend-reward">+200 GC</div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ï—Å–ª–∏ –¥—Ä—É–∑–µ–π –µ—â–µ –Ω–µ—Ç */}
        {(!friendsData?.friends || friendsData.friends.length === 0) && (
          <div className="no-friends">
            <div className="no-friends-icon">üò¢</div>
            <div className="no-friends-text">
              <h3>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏</h3>
              <p>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!</p>
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default FriendsScreen;