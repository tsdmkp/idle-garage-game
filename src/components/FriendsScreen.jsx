import React, { useState, useEffect } from 'react';
import apiClient from '../apiClient';
import './FriendsScreen.css';

// üî• –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢: –ê–≤–∞—Ç–∞—Ä–∫–∞ –¥—Ä—É–≥–∞
const FriendAvatar = ({ photoUrl, firstName, size = 40 }) => {
  const [imageError, setImageError] = useState(false);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  if (photoUrl && !imageError) {
    return (
      <div 
        className="friend-avatar friend-avatar-photo"
        style={{
          width: size,
          height: size,
          borderRadius: '50%',
          overflow: 'hidden',
          background: 'linear-gradient(135deg, #ff6b6b, #ffd93d)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexShrink: 0,
          border: '2px solid rgba(255, 255, 255, 0.3)',
          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)'
        }}
      >
        <img
          src={photoUrl}
          alt={`–ê–≤–∞—Ç–∞—Ä ${firstName}`}
          style={{
            width: '100%',
            height: '100%',
            objectFit: 'cover'
          }}
          onError={() => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥—Ä—É–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º fallback');
            setImageError(true);
          }}
        />
      </div>
    );
  }
  
  // Fallback - –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∏–º–µ–Ω–∏ –∏–ª–∏ –∏–∫–æ–Ω–∫–∞
  const firstLetter = firstName ? firstName.charAt(0).toUpperCase() : '?';
  
  return (
    <div 
      className="friend-avatar friend-avatar-fallback"
      style={{
        width: size,
        height: size,
        borderRadius: '50%',
        background: 'linear-gradient(135deg, #ff6b6b, #ffd93d)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        font: 'weight: 700',
        fontSize: size * 0.4,
        color: 'white',
        flexShrink: 0,
        border: '2px solid rgba(255, 255, 255, 0.3)',
        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)'
      }}
    >
      {firstLetter}
    </div>
  );
};

const FriendsScreen = ({ tgUserData, onBalanceUpdate }) => {
  const [friendsData, setFriendsData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [inviteRewards, setInviteRewards] = useState(null);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  const generateReferralLink = () => {
    if (!tgUserData?.id) return '';
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Mini App –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const botUsername = 'GarageGame01Bot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: https://t.me/BotUsername?startapp=ref_userID
    const link = `https://t.me/${botUsername}?startapp=ref_${tgUserData.id}`;
    console.log('üîó Generated referral link:', link);
    return link;
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–∑—å—è—Ö
  useEffect(() => {
    const fetchFriendsData = async () => {
      try {
        setLoading(true);
        const userId = tgUserData?.id?.toString() || 'default';
        
        console.log('üë• Loading friends data for user:', userId);
        
        const response = await apiClient('/friends', 'GET', { 
          params: { userId } 
        });
        
        console.log('üë• Friends data loaded:', response);
        console.log('üìä Total invites:', response?.total_invites);
        console.log('üí∞ Total earned:', response?.total_earned);
        console.log('üéÅ Pending rewards:', response?.pending_rewards);
        
        // üî• –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏
        if (response?.friends && Array.isArray(response.friends)) {
          response.friends.forEach((friend, index) => {
            console.log(`üë§ Friend ${index + 1}:`, {
              name: friend.first_name,
              photo_url: friend.photo_url ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
              joined: friend.joined_at
            });
          });
        }
        
        setFriendsData(response);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ pending_rewards
        if (response?.pending_rewards && 
            Array.isArray(response.pending_rewards) && 
            response.pending_rewards.length > 0) {
          console.log('üéâ Found pending rewards:', response.pending_rewards);
          setInviteRewards(response.pending_rewards);
        } else {
          console.log('‚ÑπÔ∏è No pending rewards found');
          setInviteRewards(null);
        }
        
      } catch (err) {
        console.error('‚ùå Error loading friends data:', err);
        console.error('‚ùå Error details:', err.response?.data || err.message);
        setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–∑—å—è—Ö: ${err.message}`);
      } finally {
        setLoading(false);
      }
    };

    if (tgUserData?.id) {
      fetchFriendsData();
    }
  }, [tgUserData?.id]);

  // –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ Telegram
  const handleInviteFriend = () => {
    const referralLink = generateReferralLink();
    const inviteText = `üèéÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –∏–≥—Ä–∞—é –≤ –∫—Ä—É—Ç—É—é –∏–≥—Ä—É "Garage Idle"! 

üéÆ –¢—é–Ω–∏–Ω–≥—É–π –º–∞—à–∏–Ω—ã, —É—á–∞—Å—Ç–≤—É–π –≤ –≥–æ–Ω–∫–∞—Ö, —Ä–∞–∑–≤–∏–≤–∞—è —Å–≤–æ–π –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å!

üéÅ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ +100 –º–æ–Ω–µ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫:
${referralLink}

–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ç—Ä–∞—Å—Å–µ! üèÅ`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.openTelegramLink(
        `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(inviteText)}`
      );
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      navigator.clipboard.writeText(referralLink).then(() => {
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      });
    }
  };

  // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  const handleCopyLink = () => {
    const referralLink = generateReferralLink();
    navigator.clipboard.writeText(referralLink).then(() => {
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    }).catch(() => {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement('textarea');
      textArea.value = referralLink;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    });
  };

  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  const handleClaimRewards = async () => {
    try {
      const userId = tgUserData?.id?.toString() || 'default';
      
      console.log('üéÅ Attempting to claim rewards for user:', userId);
      console.log('üìã Current pending rewards:', inviteRewards);
      
      if (!inviteRewards || !Array.isArray(inviteRewards) || inviteRewards.length === 0) {
        console.log('‚ö†Ô∏è No pending rewards to claim');
        alert('‚ÑπÔ∏è –ù–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è');
        return;
      }
      
      const response = await apiClient('/friends/claim', 'POST', {
        body: { userId }
      });
      
      console.log('üéÅ Server response:', response);
      
      if (response && typeof response === 'object') {
        const coinsEarned = response.total_coins || response.coins || 0;
        const message = response.message || '';
        
        console.log('üí∞ Coins earned:', coinsEarned);
        console.log('üì¢ Server message:', message);
        
        if (coinsEarned > 0) {
          setInviteRewards(null);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–∑–µ–π
          const updatedData = await apiClient('/friends', 'GET', { 
            params: { userId } 
          });
          setFriendsData(updatedData);
          
          // üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä—ã!
          if (typeof onBalanceUpdate === 'function') {
            console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º onBalanceUpdate —Å —Å—É–º–º–æ–π:', coinsEarned);
            onBalanceUpdate(coinsEarned);
          } else {
            console.warn('‚ö†Ô∏è onBalanceUpdate —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞!');
          }
          
          alert(`üéâ –ü–æ–ª—É—á–µ–Ω–æ ${coinsEarned} –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!\nüí∞ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω!`);
          
        } else {
          alert(`‚ÑπÔ∏è ${message || '–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è'}`);
          console.log('‚ö†Ô∏è No rewards to claim or already claimed');
          
          const updatedData = await apiClient('/friends', 'GET', { 
            params: { userId } 
          });
          setFriendsData(updatedData);
          setInviteRewards(null);
        }
      } else {
        console.error('‚ùå Invalid response format:', response);
        alert('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
    } catch (err) {
      console.error('‚ùå Error claiming rewards:', err);
      console.error('‚ùå Error details:', err.response?.data || err.message);
      
      const errorMessage = err.response?.data?.message || 
                          err.response?.data?.error || 
                          err.message || 
                          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥: ${errorMessage}`);
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
  const getReferrerLevel = (friendsCount) => {
    if (friendsCount >= 50) return { name: '–õ–µ–≥–µ–Ω–¥–∞', icon: 'üëë', color: '#ffd700' };
    if (friendsCount >= 25) return { name: '–ú–∞—Å—Ç–µ—Ä', icon: '‚≠ê', color: '#ff6b6b' };
    if (friendsCount >= 10) return { name: '–≠–∫—Å–ø–µ—Ä—Ç', icon: 'üî•', color: '#ff9800' };
    if (friendsCount >= 5) return { name: '–ù–æ–≤–∞—Ç–æ—Ä', icon: 'üöÄ', color: '#4caf50' };
    if (friendsCount >= 1) return { name: '–î—Ä—É–≥', icon: 'üë•', color: '#2196f3' };
    return { name: '–ù–æ–≤–∏—á–æ–∫', icon: 'üë§', color: '#9e9e9e' };
  };

  if (loading) {
    return (
      <div className="friends-screen">
        <div className="friends-loading">
          <div className="loading-icon">üë•</div>
          <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–∑–µ–π...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="friends-screen">
        <div className="friends-error">
          <div>‚ö†Ô∏è</div>
          <div>{error}</div>
        </div>
      </div>
    );
  }

  const referrerLevel = getReferrerLevel(friendsData?.total_invites || 0);
  const nextLevelTarget = friendsData?.total_invites >= 50 ? null : 
    friendsData?.total_invites >= 25 ? 50 :
    friendsData?.total_invites >= 10 ? 25 :
    friendsData?.total_invites >= 5 ? 10 :
    friendsData?.total_invites >= 1 ? 5 : 1;

  return (
    <div className="friends-screen">
      <div className="friends-content">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="friends-header">
          <h2>üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π</h2>
          <p>–ü–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!</p>
        </div>

        {/* –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ */}
        <div className="referrer-status">
          <div className="referrer-badge" style={{ borderColor: referrerLevel.color }}>
            <span className="referrer-icon">{referrerLevel.icon}</span>
            <span className="referrer-name" style={{ color: referrerLevel.color }}>
              {referrerLevel.name}
            </span>
          </div>
          <div className="referrer-stats">
            <div className="stat">
              <span className="stat-number">{friendsData?.total_invites || 0}</span>
              <span className="stat-label">–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ</span>
            </div>
            <div className="stat">
              <span className="stat-number">{friendsData?.total_earned || 0}</span>
              <span className="stat-label">–ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</span>
            </div>
          </div>
          {nextLevelTarget && (
            <div className="next-level">
              –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {nextLevelTarget - (friendsData?.total_invites || 0)} –¥—Ä—É–∑–µ–π
            </div>
          )}
        </div>

        {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≥—Ä–∞–¥ */}
        {inviteRewards && Array.isArray(inviteRewards) && inviteRewards.length > 0 && (
          <div className="pending-rewards">
            <h3>üéÅ –ù–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!</h3>
            <div className="rewards-list">
              {inviteRewards.map((reward, index) => (
                <div key={index} className="reward-item">
                  <span>üë§ {reward.friend_name || '–î—Ä—É–≥'}</span>
                  <span>üí∞ +{reward.coins || reward.reward_coins || 200} GC</span>
                </div>
              ))}
            </div>
            <button className="claim-rewards-btn" onClick={handleClaimRewards}>
              –ü–æ–ª—É—á–∏—Ç—å {inviteRewards.reduce((sum, r) => sum + (r.coins || r.reward_coins || 200), 0)} –º–æ–Ω–µ—Ç
            </button>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
        <div className="invite-section">
          <div className="invite-info">
            <div className="invite-benefit">
              <span className="benefit-icon">üéÅ</span>
              <div className="benefit-text">
                <strong>+200 –º–æ–Ω–µ—Ç</strong> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
              </div>
            </div>
            <div className="invite-benefit">
              <span className="benefit-icon">üí∞</span>
              <div className="benefit-text">
                <strong>+100 –º–æ–Ω–µ—Ç</strong> –¥—Ä—É–≥—É –≤ –ø–æ–¥–∞—Ä–æ–∫
              </div>
            </div>
          </div>
          
          <div className="invite-buttons">
            <button className="invite-btn primary" onClick={handleInviteFriend}>
              üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
            </button>
            <button className="invite-btn secondary" onClick={handleCopyLink}>
              üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
            </button>
          </div>
        </div>

        {/* –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥ */}
        <div className="rewards-table">
          <h3>üèÜ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</h3>
          <div className="rewards-grid">
            {[
              { friends: 1, reward: '200 GC', icon: 'üë§', unlocked: (friendsData?.total_invites || 0) >= 1 },
              { friends: 5, reward: '1,000 GC + –º–∞—à–∏–Ω–∞', icon: 'üöó', unlocked: (friendsData?.total_invites || 0) >= 5 },
              { friends: 10, reward: '3,000 GC + –¥–µ—Ç–∞–ª—å', icon: 'üîß', unlocked: (friendsData?.total_invites || 0) >= 10 },
              { friends: 25, reward: '10,000 GC + —Å–∫–∏–Ω', icon: 'üé®', unlocked: (friendsData?.total_invites || 0) >= 25 },
              { friends: 50, reward: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –º–∞—à–∏–Ω–∞', icon: 'üëë', unlocked: (friendsData?.total_invites || 0) >= 50 },
            ].map((milestone) => (
              <div 
                key={milestone.friends}
                className={`reward-milestone ${milestone.unlocked ? 'unlocked' : 'locked'}`}
              >
                <div className="milestone-icon">{milestone.icon}</div>
                <div className="milestone-text">
                  <div className="milestone-target">{milestone.friends} –¥—Ä—É–∑–µ–π</div>
                  <div className="milestone-reward">{milestone.reward}</div>
                </div>
                {milestone.unlocked && <div className="milestone-check">‚úÖ</div>}
              </div>
            ))}
          </div>
        </div>

        {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Å –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ */}
        {friendsData?.friends && friendsData.friends.length > 0 && (
          <div className="friends-list">
            <h3>üë• –í–∞—à–∏ –¥—Ä—É–∑—å—è ({friendsData.friends.length})</h3>
            <div className="friends-grid">
              {friendsData.friends.map((friend, index) => (
                <div key={friend.user_id || index} className="friend-card">
                  {/* üî• –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç FriendAvatar */}
                  <FriendAvatar 
                    photoUrl={friend.photo_url}
                    firstName={friend.first_name}
                    size={40}
                  />
                  <div className="friend-info">
                    <div className="friend-name">{friend.first_name || '–ê–Ω–æ–Ω–∏–º'}</div>
                    <div className="friend-date">
                      {new Date(friend.joined_at).toLocaleDateString('ru-RU')}
                    </div>
                  </div>
                  <div className="friend-reward">+200 GC</div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ï—Å–ª–∏ –¥—Ä—É–∑–µ–π –µ—â–µ –Ω–µ—Ç */}
        {(!friendsData?.friends || friendsData.friends.length === 0) && (
          <div className="no-friends">
            <div className="no-friends-icon">üò¢</div>
            <div className="no-friends-text">
              <h3>–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏</h3>
              <p>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!</p>
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default FriendsScreen;