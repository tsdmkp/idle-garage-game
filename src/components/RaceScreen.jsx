import React, { useState, useEffect } from 'react';
import './RaceScreen.css';
// --- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ö–ê–¢–ê–õ–û–ì –ú–ê–®–ò–ù ---
import { CAR_CATALOG } from '../utils'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å ../utils –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
const getRandomOpponentImage = () => {
    if (!CAR_CATALOG || CAR_CATALOG.length === 0) {
        return '/placeholder-car.png';
    }
    const randomIndex = Math.floor(Math.random() * CAR_CATALOG.length);
    return CAR_CATALOG[randomIndex]?.imageUrl || '/placeholder-car.png';
};
// --------------------------------------------

function RaceScreen({ playerCar, onStartRace }) {
  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
  const [selectedDifficulty, setSelectedDifficulty] = useState('easy');
  const [raceResult, setRaceResult] = useState(null);
  const [reward, setReward] = useState(null);
  const [isRacing, setIsRacing] = useState(false);
  const [shouldAnimate, setShouldAnimate] = useState(false);
  const [opponentCarImageUrl, setOpponentCarImageUrl] = useState(() => getRandomOpponentImage());

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –°–º–µ–Ω—ã –°–ª–æ–∂–Ω–æ—Å—Ç–∏ ---
  const handleDifficultyChange = (difficulty) => {
    if (isRacing) return;
    setSelectedDifficulty(difficulty);
    setRaceResult(null);
    setReward(null);
    setShouldAnimate(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    setOpponentCarImageUrl(getRandomOpponentImage()); // –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
    console.log(`RaceScreen: Difficulty changed to ${difficulty}.`);
  };

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ö–ª–∏–∫–∞ –ø–æ –ö–Ω–æ–ø–∫–µ "–ù–∞—á–∞—Ç—å –ó–∞–µ–∑–¥!" ---
  const handleRaceClick = async () => {
    if (isRacing || !playerCar) return;
    setIsRacing(true);
    setRaceResult(null);
    setReward(null);
    setShouldAnimate(true); // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    setOpponentCarImageUrl(getRandomOpponentImage()); // –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
    console.log(`RaceScreen: Starting race...`);
    const resultData = await onStartRace(selectedDifficulty); // –°–∏–º—É–ª—è—Ü–∏—è –≤ App.jsx
    console.log("RaceScreen: onStartRace returned:", resultData);
    setIsRacing(false); // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –≥–æ–Ω–∫–∏ –°–†–ê–ó–£
    if (resultData && typeof resultData.result === 'string') {
      setRaceResult(resultData.result);
      setReward(resultData.reward || null);
    } else {
      setRaceResult('error'); setReward(null);
    }
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–±—Ä–æ—Å–∏—Ç—Å—è —á–µ—Ä–µ–∑ useEffect
    console.log("RaceScreen: Race logic finished.");
  };

  // --- –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –°–±—Ä–æ—Å–∞ –ê–Ω–∏–º–∞—Ü–∏–∏ ---
  // (–ö–∞–∫ –≤ —Ç–≤–æ–µ–π —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏)
  useEffect(() => {
    let timer;
    if (!isRacing && raceResult) {
      timer = setTimeout(() => {
        console.log("RaceScreen: Resetting animation via timer.");
        setShouldAnimate(false);
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    } else if (!isRacing && !raceResult && shouldAnimate) {
      console.log("RaceScreen: Resetting animation immediately.");
      setShouldAnimate(false);
    }
    return () => clearTimeout(timer);
  }, [isRacing, raceResult, shouldAnimate]);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏–≥—Ä–æ–∫–∞
  const { name: carName, stats: carStats, imageUrl: playerImageUrl } = playerCar || {};

  // --- –†–µ–Ω–¥–µ—Ä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ---
  return (
    <div className="race-screen">
      <div className="race-screen__content">
        <h2>–£–ª–∏—á–Ω—ã–µ –ì–æ–Ω–∫–∏ (PvE)</h2>
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ */}
        {playerCar ? (
          <div className="player-car-info">
            <h3>–¢–≤–æ—è –º–∞—à–∏–Ω–∞: {carName}</h3>
            <p>P: {carStats?.power} | S: {carStats?.speed} | R: {carStats?.reliability}</p>
          </div>
        ) : (
          <div className="player-car-info"><p>–ú–∞—à–∏–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!</p></div>
        )}

        {/* –í—ã–±–æ—Ä –°–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
        <div className="difficulty-selector">
          <h4>–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</h4>
          <button onClick={() => handleDifficultyChange('easy')} className={selectedDifficulty === 'easy' ? 'active' : ''} disabled={isRacing}>–õ–µ–≥–∫–æ</button>
          <button onClick={() => handleDifficultyChange('medium')} className={selectedDifficulty === 'medium' ? 'active' : ''} disabled={isRacing}>–°—Ä–µ–¥–Ω–µ</button>
          <button onClick={() => handleDifficultyChange('hard')} className={selectedDifficulty === 'hard' ? 'active' : ''} disabled={isRacing}>–°–ª–æ–∂–Ω–æ</button>
        </div>

        {/* –ó–û–ù–ê –ê–ù–ò–ú–ê–¶–ò–ò –ì–û–ù–ö–ò */}
        <div className="race-animation-area">
          <div className="race-track">
            <div className={`race-car player-car ${shouldAnimate ? 'animate' : ''}`}>
              {playerImageUrl ? <img src={playerImageUrl} alt={carName || 'Player Car'} /> : <span>üöó</span>}
            </div>
            <div className={`race-car opponent-car ${shouldAnimate ? 'animate' : ''}`}>
              {opponentCarImageUrl ? <img src={opponentCarImageUrl} alt="Opponent Car" /> : <span>üèéÔ∏è</span>}
            </div>
            <div className="finish-line"></div>
          </div>
        </div>

        {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ --- */}
        <div className="race-controls-area">
            {/* –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç–∞ */}
            <button
              className="start-race-button"
              onClick={handleRaceClick}
              disabled={isRacing || !playerCar}
            >
              {isRacing ? '–ì–æ–Ω–∫–∞...' : '–ù–∞—á–∞—Ç—å –ó–∞–µ–∑–¥!'}
            </button>

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ì–æ–Ω–∫–∏ */}
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ–Ω–∫–∞ –ù–ï –∏–¥–µ—Ç –ò –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ì–æ–Ω–∫–∏ */}
        {!isRacing && raceResult && (
          <div className={`race-result ${raceResult}`}>
            <h3>{ raceResult === 'win' ? '–ü–û–ë–ï–î–ê!' : raceResult === 'lose' ? '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ' : '–û—à–∏–±–∫–∞!' }</h3>
            {/* --- –ò–ó–ú–ï–ù–Ø–ï–ú –õ–û–ì–ò–ö–£ –ó–î–ï–°–¨ --- */}
            {reward ? ( // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç reward –≤–æ–æ–±—â–µ –µ—Å—Ç—å
              <p>
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ "–ù–∞–≥—Ä–∞–¥–∞:" –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–ê–Ø –Ω–∞–≥—Ä–∞–¥–∞ */}
                {(reward.coins > 0 || reward.xp > 0) && '–ù–∞–≥—Ä–∞–¥–∞:'}

                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ) */}
                {reward.coins !== 0 && ` üí∞ ${reward.coins.toLocaleString()} GC`}

                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º XP (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ > 0) */}
                {reward.xp > 0 && ` ‚ú® ${reward.xp} XP`}

                {/* –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –ë–ï–ó –º–æ–Ω–µ—Ç (—à—Ç—Ä–∞—Ñ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –≤—ã—à–µ, –µ—Å–ª–∏ –±—ã–ª) */}
                {(reward.coins === 0 && reward.xp === 0 && raceResult === 'lose') && ' –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!'}
                {/* –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–±–µ–¥–µ –ë–ï–ó –º–æ–Ω–µ—Ç –∏ XP */}
                {(reward.coins === 0 && reward.xp === 0 && raceResult === 'win') && ' –ë–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã'}
              </p>
            ) : (
              // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç reward –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–∏ –Ω–µ –æ—à–∏–±–∫–∞)
              raceResult !== 'error' && <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≥—Ä–∞–¥–µ.</p>
            )}
             {/* ---------------------------- */}
          </div>
        )}
        </div>
        {/* --------------------------------------------------- */}

      </div> {/* –ö–æ–Ω–µ—Ü race-screen__content */}
    </div> /* –ö–æ–Ω–µ—Ü race-screen */
  );
}

export default RaceScreen;