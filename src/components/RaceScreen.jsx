import React, { useState, useEffect, useRef } from 'react';
import './RaceScreen.css';

const RaceScreen = ({ playerCar, onStartRace, onAdReward }) => {
  const [selectedDifficulty, setSelectedDifficulty] = useState('easy');
  const [raceState, setRaceState] = useState('ready');
  const [countdown, setCountdown] = useState(0);
  const [raceResult, setRaceResult] = useState(null);
  const [winStreak, setWinStreak] = useState(0);
  const [totalRaces, setTotalRaces] = useState(0);
  const [wins, setWins] = useState(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
  const [raceCount, setRaceCount] = useState(0);
  const [showAdModal, setShowAdModal] = useState(false);
  const [adsgramReady, setAdsgramReady] = useState(false);
  const [isAdLoading, setIsAdLoading] = useState(false);
  
  const playerCarRef = useRef(null);
  const opponentCarRef = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ Adsgram SDK
  useEffect(() => {
    const loadAdsgram = () => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É Adsgram...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω
      if (window.Adsgram) {
        console.log('‚úÖ Adsgram —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        setAdsgramReady(true);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
      if (document.querySelector('script[src*="sad.min.js"]')) {
        console.log('‚è≥ Adsgram —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://sad.adsgram.ai/js/sad.min.js';
      script.async = true;
      script.defer = true;
      
      script.onload = () => {
        console.log('üì¶ Adsgram —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–ø—Ç
        setTimeout(() => {
          try {
            console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Adsgram API...');
            console.log('window.Adsgram:', window.Adsgram);
            
            if (window.Adsgram) {
              console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã Adsgram:', Object.keys(window.Adsgram));
              console.log('üîç –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:', typeof window.Adsgram);
              
              if (typeof window.Adsgram.init === 'function') {
                console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Adsgram...');
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
                const isProduction = window.location.hostname !== 'localhost' && 
                                   !window.location.hostname.includes('vercel.app') &&
                                   !window.location.hostname.includes('netlify.app');
                
                const debugMode = !isProduction; // debug —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isProduction ? '–ü–†–û–î–ê–ö–®–ï–ù' : '–†–ê–ó–†–ê–ë–û–¢–ö–ê');
                console.log('üêõ Debug —Ä–µ–∂–∏–º:', debugMode);
                
                const adsgramController = window.Adsgram.init({
                  blockId: "12355", // ‚úÖ –í–∞—à –±–ª–æ–∫ ID
                  debug: debugMode, // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ debug = false
                  debugBannerType: "RewardedVideo" // –¢–∏–ø —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–µ–∫–ª–∞–º—ã
                });
                
                console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', adsgramController);
                console.log('üîç –ú–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞:', adsgramController ? Object.keys(adsgramController) : 'null');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                window.adsgramController = adsgramController;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
                if (adsgramController && typeof adsgramController.addEventListener === 'function') {
                  console.log('üéß –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
                  
                  adsgramController.addEventListener('onReward', () => {
                    console.log('üéÅ –°–æ–±—ã—Ç–∏–µ onReward: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–ª–∞–º—É');
                  });
                  
                  adsgramController.addEventListener('onError', (error) => {
                    console.log('‚ùå –°–æ–±—ã—Ç–∏–µ onError:', error);
                  });
                  
                  adsgramController.addEventListener('onBannerNotFound', () => {
                    console.log('üö´ –°–æ–±—ã—Ç–∏–µ onBannerNotFound: –Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ø–æ–∫–∞–∑–∞');
                  });
                  
                  adsgramController.addEventListener('onSkip', () => {
                    console.log('‚è≠Ô∏è –°–æ–±—ã—Ç–∏–µ onSkip: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ä–µ–∫–ª–∞–º—É');
                  });
                  
                  adsgramController.addEventListener('onStart', () => {
                    console.log('üé¨ –°–æ–±—ã—Ç–∏–µ onStart: —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è');
                  });
                  
                  adsgramController.addEventListener('onComplete', () => {
                    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ onComplete: —Ä–µ–∫–ª–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                  });
                  
                  adsgramController.addEventListener('onNonStopShow', () => {
                    console.log('‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ onNonStopShow: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–æ–∫–∞–∑—ã');
                  });
                  
                  adsgramController.addEventListener('onTooLongSession', () => {
                    console.log('‚è∞ –°–æ–±—ã—Ç–∏–µ onTooLongSession: —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è —Å–µ—Å—Å–∏—è');
                  });
                }
                
                setAdsgramReady(true);
                console.log('‚úÖ Adsgram —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
              } else {
                console.error('‚ùå –ú–µ—Ç–æ–¥ Adsgram.init –Ω–µ –Ω–∞–π–¥–µ–Ω');
                setAdsgramReady(false);
              }
            } else {
              console.error('‚ùå Adsgram –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏');
              setAdsgramReady(false);
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Adsgram:', error);
            setAdsgramReady(false);
          }
        }, 100);
      };
      
      script.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Adsgram SDK:', error);
        setAdsgramReady(false);
      };
      
      document.head.appendChild(script);
      console.log('üì° Adsgram —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ <head>');
    };

    loadAdsgram();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–µ–∑–¥–æ–≤ –∏–∑ localStorage
    const savedRaceCount = localStorage.getItem('raceCount');
    if (savedRaceCount) {
      const count = parseInt(savedRaceCount) || 0;
      setRaceCount(count);
      console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∑–∞–µ–∑–¥–æ–≤:', count);
    }

    return () => {
      // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      const script = document.querySelector('script[src*="sad.min.js"]');
      if (script) {
        console.log('üßπ –£–±–∏—Ä–∞–µ–º Adsgram —Å–∫—Ä–∏–ø—Ç');
        script.remove();
      }
    };
  }, []);

  // –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç–æ—è—â–µ–π —Ä–µ–∫–ª–∞–º—ã Adsgram
  const showRealAd = async () => {
    console.log('üì∫ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å Adsgram —Ä–µ–∫–ª–∞–º—É...');
    
    setIsAdLoading(true);

    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º AdController...');
      
      if (!window.adsgramController) {
        console.error('‚ùå AdController –Ω–µ –Ω–∞–π–¥–µ–Ω');
        showMockAd();
        return;
      }
      
      console.log('üîç AdController –¥–æ—Å—Ç—É–ø–µ–Ω:', window.adsgramController);
      console.log('üîç –ú–µ—Ç–æ–¥—ã AdController:', Object.keys(window.adsgramController));
      
      if (typeof window.adsgramController.show !== 'function') {
        console.error('‚ùå –ú–µ—Ç–æ–¥ show() –Ω–µ –Ω–∞–π–¥–µ–Ω —É AdController');
        showMockAd();
        return;
      }
      
      console.log('üé¨ –í—ã–∑—ã–≤–∞–µ–º AdController.show()...');
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±: –≤—ã–∑—ã–≤–∞–µ–º show() —É AdController
      const result = await window.adsgramController.show();
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã:', result);
      
      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: Promise resolved = —Ä–µ–∫–ª–∞–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞
      console.log('‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞!');
      
      // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏–≥—Ä–æ–∫—É
      onAdReward(100);
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      alert('üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã!\n+100 –º–æ–Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
      
    } catch (error) {
      console.log('‚è≠Ô∏è –†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
      
      // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: Promise rejected = —Ä–µ–∫–ª–∞–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
      // –ú–æ–∂–µ–º –Ω–µ –¥–∞–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
      console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      alert('üì∫ –†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      
    } finally {
      setIsAdLoading(false);
    }
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const showMockAd = () => {
    console.log('üé≠ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–∫–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É...');
    
    setIsAdLoading(true);
    
    setTimeout(() => {
      const watchAd = window.confirm('üé• [–¢–ï–°–¢] –†–µ–∫–ª–∞–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –∑–∞ +100 –º–æ–Ω–µ—Ç?');
      
      if (watchAd) {
        setTimeout(() => {
          onAdReward(100);
          alert('üéâ [–¢–ï–°–¢] –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä!\n+100 –º–æ–Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
          
          if (window.Telegram?.WebApp?.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
          }
        }, 1500);
      }
      
      setIsAdLoading(false);
    }, 800);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–∫–ª–∞–º—ã
  const handleAdModalAction = (watchAd) => {
    console.log('üéØ –î–µ–π—Å—Ç–≤–∏–µ –≤ –º–æ–¥–∞–ª–∫–µ —Ä–µ–∫–ª–∞–º—ã:', watchAd ? '–°–º–æ—Ç—Ä–µ—Ç—å' : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
    
    setShowAdModal(false);
    
    if (watchAd) {
      showRealAd();
    }
  };

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ä–µ–∫–ª–∞–º—ã
  const getAdProgress = () => {
    const remaining = 5 - (raceCount % 5);
    return remaining === 5 ? 0 : 5 - remaining;
  };

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–µ–∑–¥–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
  const incrementRaceCount = () => {
    const newCount = raceCount + 1;
    setRaceCount(newCount);
    localStorage.setItem('raceCount', newCount.toString());
    
    console.log('üèÅ –ó–∞–µ–∑–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –∑–∞–µ–∑–¥–æ–≤:', newCount);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∫–∞–∂–¥—ã–µ 5 –∑–∞–µ–∑–¥–æ–≤
    if (newCount % 5 === 0) {
      console.log('üì∫ –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É! (–∫–∞–∂–¥—ã–µ 5 –∑–∞–µ–∑–¥–æ–≤)');
      
      setTimeout(() => {
        setShowAdModal(true);
      }, 2000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏
    }
  };

  const difficulties = {
    easy: { 
      name: '–õ–µ–≥–∫–∏–π', 
      reward: '+50 GC', 
      penalty: '-5%',
      description: '–ù–æ–≤–∏—á–æ–∫' 
    },
    medium: { 
      name: '–°—Ä–µ–¥–Ω–∏–π', 
      reward: '+150 GC', 
      penalty: '-10%',
      description: '–û–ø—ã—Ç–Ω—ã–π' 
    },
    hard: { 
      name: '–°–ª–æ–∂–Ω—ã–π', 
      reward: '+300 GC', 
      penalty: '-15%',
      description: '–ü—Ä–æ—Ñ–∏' 
    }
  };

  const startCountdown = () => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç...');
    setRaceState('countdown');
    setCountdown(3);
    
    const countdownInterval = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          clearInterval(countdownInterval);
          startRaceAnimation();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  const startRaceAnimation = () => {
    console.log('üèéÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≥–æ–Ω–∫–∏...');
    setRaceState('racing');
    
    if (playerCarRef.current && opponentCarRef.current) {
      playerCarRef.current.classList.add('animate');
      opponentCarRef.current.classList.add('animate');
    }
    
    setTimeout(async () => {
      console.log('üèÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏...');
      
      const result = await onStartRace(selectedDifficulty);
      setRaceResult(result);
      setTotalRaces(prev => prev + 1);
      
      if (result.result === 'win') {
        setWins(prev => prev + 1);
        setWinStreak(prev => prev + 1);
      } else {
        setWinStreak(0);
      }
      
      setRaceState('finished');
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–µ–∑–¥–æ–≤ (—Ç—É—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–∞)
      incrementRaceCount();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—à–∏–Ω—ã –Ω–∞ —Å—Ç–∞—Ä—Ç
      setTimeout(() => {
        if (playerCarRef.current && opponentCarRef.current) {
          playerCarRef.current.classList.remove('animate');
          playerCarRef.current.classList.add('returning');
          opponentCarRef.current.classList.remove('animate');
          opponentCarRef.current.classList.add('returning');
        }
        
        setTimeout(() => {
          if (playerCarRef.current && opponentCarRef.current) {
            playerCarRef.current.classList.remove('returning');
            opponentCarRef.current.classList.remove('returning');
          }
          setRaceState('ready');
          setRaceResult(null);
        }, 2500);
      }, 3000);
    }, 2500);
  };

  const canStartRace = raceState === 'ready';
  
  const buttonText = () => {
    switch (raceState) {
      case 'countdown':
        return countdown.toString();
      case 'racing':
        return '–ì–æ–Ω–∫–∞!';
      case 'finished':
        return raceResult?.result === 'win' ? '–ü–æ–±–µ–¥–∞!' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!';
      default:
        return '–ù–∞—á–∞—Ç—å –ó–∞–µ–∑–¥!';
    }
  };

  return (
    <div className="race-screen">
      <div className="race-screen__content">
        
        <div className="race-header">
          <h2>üèÅ –ì–æ–Ω–∫–∏</h2>
          
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ —Ä–µ–∫–ª–∞–º—ã */}
          {raceCount > 0 && (
            <div className="ad-progress-container">
              <div className="ad-progress-bar">
                <div 
                  className="ad-progress-fill"
                  style={{ width: `${(getAdProgress() / 5) * 100}%` }}
                ></div>
              </div>
              <div className="ad-progress-text">
                üì∫ –î–æ —Ä–µ–∫–ª–∞–º—ã: {5 - (raceCount % 5)} –∑–∞–µ–∑–¥–æ–≤
              </div>
            </div>
          )}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ Adsgram */}
          <div className="adsgram-status">
            {adsgramReady ? (
              <div>
                <span style={{color: 'green'}}>üì∫ –†–µ–∫–ª–∞–º–∞ –≥–æ—Ç–æ–≤–∞</span>
                <br />
                <small style={{opacity: 0.7}}>
                  {window.location.hostname === 'localhost' || 
                   window.location.hostname.includes('vercel.app') ? 
                   'üß™ –¢–µ—Å—Ç —Ä–µ–∂–∏–º' : 'üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω'}
                </small>
              </div>
            ) : (
              <span style={{color: 'orange'}}>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º—ã...</span>
            )}
          </div>
          
          {winStreak > 1 && (
            <div className="win-streak">üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {winStreak}</div>
          )}
          <div className="race-stats">
            –ü–æ–±–µ–¥: {wins}/{totalRaces} ({totalRaces > 0 ? Math.round((wins/totalRaces) * 100) : 0}%)
          </div>
        </div>

        <div className="participants-info">
          <div className="participant">
            <div className="participant-header">–í–∞—à–∞ –º–∞—à–∏–Ω–∞</div>
            <div className="car-info">
              <div className="car-name">{playerCar?.name}</div>
              <div className="car-stats">
                ‚ö°{playerCar?.stats?.power} üèéÔ∏è{playerCar?.stats?.speed}<br/>
                ‚ú®{playerCar?.stats?.style} üîß{playerCar?.stats?.reliability}
              </div>
            </div>
          </div>
          
          <div className="vs-divider">VS</div>
          
          <div className="participant">
            <div className="participant-header">–°–æ–ø–µ—Ä–Ω–∏–∫</div>
            <div className="car-info">
              <div className="car-name">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫</div>
              <div className="car-stats">
                {difficulties[selectedDifficulty].description}<br/>
                {difficulties[selectedDifficulty].name}
              </div>
            </div>
          </div>
        </div>

        <div className="difficulty-selector">
          <h4>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</h4>
          <div className="difficulty-buttons">
            {Object.entries(difficulties).map(([key, diff]) => (
              <button
                key={key}
                className={`${selectedDifficulty === key ? 'active' : ''}`}
                onClick={() => setSelectedDifficulty(key)}
                disabled={!canStartRace}
              >
                <div className="difficulty-name">{diff.name}</div>
                <div className="difficulty-reward">
                  {diff.reward} / {diff.penalty}
                </div>
              </button>
            ))}
          </div>
        </div>

        <div className="race-animation-area">
          <div className="race-track">
            {raceState === 'countdown' && (
              <div className="countdown-overlay">
                <div className="countdown-number">{countdown}</div>
              </div>
            )}
            
            {raceState === 'racing' && (
              <div className="speed-lines">
                {[1,2,3,4,5].map(i => (
                  <div key={i} className={`speed-line speed-line-${i}`}></div>
                ))}
              </div>
            )}
            
            <div className="race-car player-car" ref={playerCarRef}>
              <img src={playerCar?.imageUrl || '/placeholder-car.png'} alt="Player car" />
            </div>
            
            <div className="race-car opponent-car" ref={opponentCarRef}>
              <img src="/placeholder-car-2.png" alt="Opponent car" />
            </div>
            
            <div className="finish-line"></div>
          </div>
        </div>

        <div className="race-controls-area">
          <button
            className={`start-race-button ${raceState === 'countdown' ? 'countdown' : ''} ${raceState === 'racing' ? 'racing' : ''}`}
            onClick={startCountdown}
            disabled={!canStartRace}
          >
            {buttonText()}
          </button>

          {raceResult && raceState === 'finished' && (
            <div className={`race-result ${raceResult.result}`}>
              <h3>
                {raceResult.result === 'win' ? 'üèÜ –ü–æ–±–µ–¥–∞!' : 
                 raceResult.result === 'lose' ? 'üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!' : '‚ùå –û—à–∏–±–∫–∞!'}
              </h3>
              <p>
                {raceResult.result === 'win' 
                  ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${raceResult.reward?.coins} –º–æ–Ω–µ—Ç –∏ ${raceResult.reward?.xp} XP!`
                  : raceResult.result === 'lose'
                  ? `–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${Math.abs(raceResult.reward?.coins || 0)} –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`
                  : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≥–æ–Ω–∫–µ.'
                }
              </p>
              {raceResult.result === 'lose' && (
                <div className="race-tip">
                  üí° –°–æ–≤–µ—Ç: –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ—é –º–∞—à–∏–Ω—É –≤ —Ç—é–Ω–∏–Ω–≥–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
                </div>
              )}
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */}
          <button 
            className="test-ad-button"
            onClick={() => setShowAdModal(true)}
            style={{
              marginTop: '10px',
              padding: '8px 16px',
              background: '#ff6b35',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              fontSize: '12px'
            }}
          >
            üß™ –¢–µ—Å—Ç —Ä–µ–∫–ª–∞–º—ã
          </button>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã */}
      {showAdModal && (
        <div className="ad-modal-overlay">
          <div className="ad-modal">
            <div className="ad-modal-header">
              <h3>üì∫ –†–µ–∫–ª–∞–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!</h3>
            </div>
            <div className="ad-modal-content">
              <p>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–∫–ª–∞–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ <strong>+100 –º–æ–Ω–µ—Ç</strong>!</p>
              <div className="ad-modal-subtitle">
                –≠—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ - –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </div>
              {isAdLoading && (
                <div className="ad-loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º—ã...</div>
              )}
            </div>
            <div className="ad-modal-actions">
              <button 
                className="ad-modal-button watch"
                onClick={() => handleAdModalAction(true)}
                disabled={isAdLoading}
              >
                üì∫ –°–º–æ—Ç—Ä–µ—Ç—å (+100 üí∞)
              </button>
              <button 
                className="ad-modal-button skip"
                onClick={() => handleAdModalAction(false)}
                disabled={isAdLoading}
              >
                ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RaceScreen;