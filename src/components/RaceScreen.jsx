import React, { useState, useEffect, useRef } from 'react';
import './RaceScreen.css';
import { CAR_CATALOG } from '../utils';

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
const getRandomOpponentImage = () => {
    if (!CAR_CATALOG || CAR_CATALOG.length === 0) {
        return '/placeholder-car.png';
    }
    const randomIndex = Math.floor(Math.random() * CAR_CATALOG.length);
    return CAR_CATALOG[randomIndex]?.imageUrl || '/placeholder-car.png';
};

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
const getRandomOpponentName = () => {
    const names = [
        '–í–∏—Ö—Ä—å', '–ú–æ–ª–Ω–∏—è', '–†–∞–∫–µ—Ç–∞', '–£—Ä–∞–≥–∞–Ω', '–ì—Ä–æ–∑–∞', '–ë—É—Ä—è', '–ö–æ–º–µ—Ç–∞', '–ú–µ—Ç–µ–æ—Ä',
        '–§–µ–Ω–∏–∫—Å', '–î—Ä–∞–∫–æ–Ω', '–¢–∏–≥—Ä', '–û—Ä–µ–ª', '–°–æ–∫–æ–ª', '–ë–∞—Ä—Å', '–ü—É–º–∞', '–ö–æ–±—Ä–∞',
        '–¢—É—Ä–±–æ', '–ù–∏—Ç—Ä–æ', '–§–æ—Ä—Å–∞–∂', '–°–ø–∏–¥—Å—Ç–µ—Ä', '–ì–æ–Ω—â–∏–∫', '–î—Ä–∏—Ñ—Ç–µ—Ä'
    ];
    return names[Math.floor(Math.random() * names.length)];
};

function RaceScreen({ playerCar, onStartRace }) {
  const [selectedDifficulty, setSelectedDifficulty] = useState('easy');
  const [raceResult, setRaceResult] = useState(null);
  const [reward, setReward] = useState(null);
  const [isRacing, setIsRacing] = useState(false);
  const [shouldAnimate, setShouldAnimate] = useState(false);
  const [isReturning, setIsReturning] = useState(false); 
  const [isWaitingForReturn, setIsWaitingForReturn] = useState(false); // –ù–û–í–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [opponentCarImageUrl, setOpponentCarImageUrl] = useState(() => getRandomOpponentImage());
  const [opponentName, setOpponentName] = useState(() => getRandomOpponentName());
  const [countdown, setCountdown] = useState(0); // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
  const [winStreak, setWinStreak] = useState(0); // –°–µ—Ä–∏—è –ø–æ–±–µ–¥
  const [totalRaces, setTotalRaces] = useState(0); // –í—Å–µ–≥–æ –≥–æ–Ω–æ–∫
  
  const raceStartSound = useRef(null);
  const raceFinishSound = useRef(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  useEffect(() => {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–∑–∂–µ
    // raceStartSound.current = new Audio('/sounds/race-start.mp3');
    // raceFinishSound.current = new Audio('/sounds/race-finish.mp3');
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
  const changeOpponent = () => {
    setOpponentCarImageUrl(getRandomOpponentImage());
    setOpponentName(getRandomOpponentName());
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const handleDifficultyChange = (difficulty) => {
    if (isRacing || isReturning || isWaitingForReturn) return;
    setSelectedDifficulty(difficulty);
    setRaceResult(null);
    setReward(null);
    changeOpponent();
    console.log(`üèÅ Difficulty changed to ${difficulty}`);
  };

  // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
  const startCountdown = () => {
    setCountdown(3);
    const timer = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 800);
  };

  // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–Ω–∫–∏
  const handleRaceClick = async () => {
    if (isRacing || isReturning || isWaitingForReturn || !playerCar) {
      console.log('üö´ Race blocked:', { isRacing, isReturning, isWaitingForReturn, playerCar: !!playerCar });
      return;
    }
    
    console.log('üèÅ Starting race sequence...');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setRaceResult(null);
    setReward(null);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
    console.log('‚è∞ Starting countdown...');
    startCountdown();
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 2500));
    
    // –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–Ω–∫—É
    console.log('üöó Race animation started');
    setIsRacing(true);
    setShouldAnimate(true);
    setTotalRaces(prev => prev + 1);
    
    // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≥–æ–Ω–∫–∏ (2.5 —Å–µ–∫—É–Ω–¥—ã)
    await new Promise(resolve => setTimeout(resolve, 2500));
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏
    const resultData = await onStartRace(selectedDifficulty);
    console.log('üèÅ Race result received:', resultData);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (resultData && typeof resultData.result === 'string') {
      setRaceResult(resultData.result);
      setReward(resultData.reward || null);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
      if (resultData.result === 'win') {
        setWinStreak(prev => prev + 1);
      } else {
        setWinStreak(0);
      }
    } else {
      setRaceResult('error');
      setReward(null);
      setWinStreak(0);
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–Ω–∫—É, –Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
    setIsRacing(false);
    setIsWaitingForReturn(true); // –ë–õ–û–ö–ò–†–£–ï–ú –∫–Ω–æ–ø–∫—É
    console.log('üèÅ Race finished, waiting for return...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 2 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—à–∏–Ω—ã
    setTimeout(() => {
      console.log('üîÑ Starting return animation...');
      setIsReturning(true);
      setShouldAnimate(false);
      
      // –ß–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—à–∏–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É–ª–∏—Å—å
      setTimeout(() => {
        console.log('‚úÖ Cars returned, button should be active now');
        setIsReturning(false);
        setIsWaitingForReturn(false); // –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –∫–Ω–æ–ø–∫—É
        changeOpponent();
        console.log('üèÅ Full cycle complete, ready for next race');
      }, 2500);
    }, 2000);
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
  const getDifficultyInfo = (difficulty) => {
    switch(difficulty) {
      case 'easy': return { name: '–õ–µ–≥–∫–æ', desc: '–ù–æ–≤–∏—á–∫–∏', reward: '+50 GC' };
      case 'medium': return { name: '–°—Ä–µ–¥–Ω–µ', desc: '–û–ø—ã—Ç–Ω—ã–µ', reward: '+150 GC' };
      case 'hard': return { name: '–°–ª–æ–∂–Ω–æ', desc: '–ü—Ä–æ—Ñ–∏', reward: '+300 GC' };
      default: return { name: '–õ–µ–≥–∫–æ', desc: '–ù–æ–≤–∏—á–∫–∏', reward: '+50 GC' };
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏
  const getButtonStatus = () => {
    if (countdown > 0) return `${countdown}`;
    if (isRacing) return '–ì–æ–Ω–∫–∞!';
    if (isWaitingForReturn) return '–ñ–¥–µ–º –≤–æ–∑–≤—Ä–∞—Ç–∞...';
    if (isReturning) return '–í–æ–∑–≤—Ä–∞—Ç...';
    return '–ù–∞—á–∞—Ç—å –ó–∞–µ–∑–¥!';
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –í–°–ï–ì–û —Ü–∏–∫–ª–∞
  const isButtonDisabled = isRacing || isReturning || isWaitingForReturn || !playerCar || countdown > 0;

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏–≥—Ä–æ–∫–∞
  const { name: carName, stats: carStats, imageUrl: playerImageUrl } = playerCar || {};
  const currentDifficulty = getDifficultyInfo(selectedDifficulty);

  return (
    <div className="race-screen">
      <div className="race-screen__content">
        {/* –ü–æ–¥–Ω–∏–º–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã—à–µ */}
        <div className="race-header">
          <h2>üèÅ –£–ª–∏—á–Ω—ã–µ –ì–æ–Ω–∫–∏</h2>
          
          {/* –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ */}
          <div style={{ fontSize: '0.7rem', color: '#888', margin: '5px 0' }}>
            Debug: Racing={isRacing.toString()}, Returning={isReturning.toString()}, Waiting={isWaitingForReturn.toString()}, Countdown={countdown}
          </div>
          
          {winStreak > 1 && (
            <div className="win-streak">
              üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {winStreak}
            </div>
          )}
          {totalRaces > 0 && (
            <div className="race-stats">
              –í—Å–µ–≥–æ –≥–æ–Ω–æ–∫: {totalRaces}
            </div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö */}
        <div className="participants-info">
          <div className="participant player">
            <div className="participant-header">üë§ –í–´</div>
            {playerCar ? (
              <div className="car-info">
                <div className="car-name">{carName}</div>
                <div className="car-stats">
                  üí™ {carStats?.power} | ‚ö° {carStats?.speed} | üîß {carStats?.reliability}
                </div>
              </div>
            ) : (
              <div className="car-info">–ú–∞—à–∏–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!</div>
            )}
          </div>

          <div className="vs-divider">VS</div>

          <div className="participant opponent">
            <div className="participant-header">ü§ñ {opponentName}</div>
            <div className="car-info">
              <div className="car-name">{currentDifficulty.name}</div>
              <div className="car-stats">{currentDifficulty.desc}</div>
            </div>
          </div>
        </div>

        {/* –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
        <div className="difficulty-selector">
          <h4>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:</h4>
          <div className="difficulty-buttons">
            {['easy', 'medium', 'hard'].map(difficulty => {
              const info = getDifficultyInfo(difficulty);
              return (
                <button
                  key={difficulty}
                  onClick={() => handleDifficultyChange(difficulty)}
                  className={selectedDifficulty === difficulty ? 'active' : ''}
                  disabled={isRacing || isReturning}
                >
                  <div className="difficulty-name">{info.name}</div>
                  <div className="difficulty-reward">{info.reward}</div>
                </button>
              );
            })}
          </div>
        </div>

        {/* –¢—Ä–µ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <div className="race-animation-area">
          <div className="race-track">
            {/* –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç */}
            {countdown > 0 && (
              <div className="countdown-overlay">
                <div className="countdown-number">{countdown}</div>
              </div>
            )}
            
            {/* –ú–∞—à–∏–Ω–∞ –∏–≥—Ä–æ–∫–∞ */}
            <div className={`race-car player-car ${shouldAnimate ? 'animate' : ''} ${isReturning ? 'returning' : ''}`}>
              {playerImageUrl ? 
                <img src={playerImageUrl} alt={carName || 'Player Car'} /> : 
                <span>üöó</span>
              }
            </div>
            
            {/* –ú–∞—à–∏–Ω–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ */}
            <div className={`race-car opponent-car ${shouldAnimate ? 'animate' : ''} ${isReturning ? 'returning' : ''}`}>
              {opponentCarImageUrl ? 
                <img src={opponentCarImageUrl} alt="Opponent Car" /> : 
                <span>üèéÔ∏è</span>
              }
            </div>
            
            {/* –§–∏–Ω–∏—à–Ω–∞—è –ª–∏–Ω–∏—è */}
            <div className="finish-line"></div>
            
            {/* –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è –≥–æ–Ω–∫–∏ */}
            {isRacing && (
              <div className="speed-lines">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className={`speed-line speed-line-${i + 1}`}></div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
        <div className="race-controls-area">
          {/* –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ */}
          <button
            className={`start-race-button ${countdown > 0 ? 'countdown' : ''} ${isRacing ? 'racing' : ''}`}
            onClick={handleRaceClick}
            disabled={isButtonDisabled}
            style={{
              // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
              opacity: isButtonDisabled ? 0.6 : 1,
              cursor: isButtonDisabled ? 'not-allowed' : 'pointer'
            }}
          >
            {getButtonStatus()}
          </button>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
          {raceResult && countdown === 0 && (
            <div className={`race-result ${raceResult}`}>
              <h3>
                {raceResult === 'win' ? 'üèÜ –ü–û–ë–ï–î–ê!' : 
                 raceResult === 'lose' ? 'üòû –ü–æ—Ä–∞–∂–µ–Ω–∏–µ' : 
                 '‚ö†Ô∏è –û—à–∏–±–∫–∞!'}
              </h3>
              {reward ? (
                <p>
                  {/* –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É */}
                  {(reward.coins > 0 || reward.xp > 0) && 'üéÅ –ù–∞–≥—Ä–∞–¥–∞: '}
                  
                  {/* –ú–æ–Ω–µ—Ç—ã */}
                  {reward.coins !== 0 && `üí∞ ${reward.coins > 0 ? '+' : ''}${reward.coins.toLocaleString()} GC`}
                  
                  {/* XP */}
                  {reward.xp > 0 && ` ‚ú® +${reward.xp} XP`}
                  
                  {/* –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã */}
                  {(reward.coins === 0 && reward.xp === 0 && raceResult === 'lose') && 'üí™ –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!'}
                  {(reward.coins === 0 && reward.xp === 0 && raceResult === 'win') && 'üéâ –ú–æ—Ä–∞–ª—å–Ω–∞—è –ø–æ–±–µ–¥–∞!'}
                </p>
              ) : (
                raceResult !== 'error' && <p>üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≥—Ä–∞–¥–µ</p>
              )}
              
              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã */}
              {raceResult === 'lose' && (
                <div className="race-tip">
                  üí° –°–æ–≤–µ—Ç: –£–ª—É—á—à–∞–π—Ç–µ –º–∞—à–∏–Ω—É –≤ —Ç—é–Ω–∏–Ω–≥–µ!
                </div>
              )}
              {raceResult === 'win' && winStreak > 0 && (
                <div className="race-tip">
                  üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {winStreak}! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default RaceScreen;