import React, { useState, useEffect, useRef } from 'react';
import './RaceScreen.css';

const RaceScreen = ({ 
  playerCar, 
  onStartRace, 
  onAdReward,
  fuelCount: propsFuelCount,
  lastRaceTime: propsLastRaceTime,
  fuelRefillTime: propsFuelRefillTime,
  onFuelUpdate,
  onFuelRefillByAd
}) => {
  const [selectedDifficulty, setSelectedDifficulty] = useState('easy');
  const [raceState, setRaceState] = useState('ready');
  const [countdown, setCountdown] = useState(0);
  const [raceResult, setRaceResult] = useState(null);
  const [winStreak, setWinStreak] = useState(0);
  const [totalRaces, setTotalRaces] = useState(0);
  const [wins, setWins] = useState(0);
  
  // –°–∏—Å—Ç–µ–º–∞ —Ç–æ–ø–ª–∏–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å—ã –æ—Ç App.jsx
  const [fuelCount, setFuelCount] = useState(propsFuelCount || 5);
  const [lastRaceTime, setLastRaceTime] = useState(propsLastRaceTime);
  const [fuelRefillTime, setFuelRefillTime] = useState(propsFuelRefillTime);
  const [showFuelModal, setShowFuelModal] = useState(false);
  const [adsgramReady, setAdsgramReady] = useState(false);
  const [isAdLoading, setIsAdLoading] = useState(false);
  
  const playerCarRef = useRef(null);
  const opponentCarRef = useRef(null);

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  const MAX_FUEL = 5;
  const FUEL_REFILL_HOUR = 60 * 60 * 1000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  // –ó–∞–≥—Ä—É–∑–∫–∞ Adsgram SDK
  useEffect(() => {
    const loadAdsgram = () => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É Adsgram...');
      
      if (window.Adsgram) {
        console.log('‚úÖ Adsgram —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        setAdsgramReady(true);
        return;
      }

      if (document.querySelector('script[src*="sad.min.js"]')) {
        console.log('‚è≥ Adsgram —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://sad.adsgram.ai/js/sad.min.js';
      script.async = true;
      script.defer = true;
      
      script.onload = () => {
        console.log('üì¶ Adsgram —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        setTimeout(() => {
          try {
            console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Adsgram API...');
            
            if (window.Adsgram && typeof window.Adsgram.init === 'function') {
              console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Adsgram...');
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
              const isProduction = window.location.hostname !== 'localhost' && 
                                 !window.location.hostname.includes('vercel.app') &&
                                 !window.location.hostname.includes('netlify.app');
              
              const debugMode = !isProduction;
              console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isProduction ? '–ü–†–û–î–ê–ö–®–ï–ù' : '–†–ê–ó–†–ê–ë–û–¢–ö–ê');
              
              const adsgramController = window.Adsgram.init({
                blockId: "12355",
                debug: debugMode,
                debugBannerType: "RewardedVideo"
              });
              
              window.adsgramController = adsgramController;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
              if (adsgramController && typeof adsgramController.addEventListener === 'function') {
                console.log('üéß –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
                
                adsgramController.addEventListener('onReward', () => {
                  console.log('üéÅ –°–æ–±—ã—Ç–∏–µ onReward: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–ª–∞–º—É');
                });
                
                adsgramController.addEventListener('onError', (error) => {
                  console.log('‚ùå –°–æ–±—ã—Ç–∏–µ onError:', error);
                });
                
                adsgramController.addEventListener('onBannerNotFound', () => {
                  console.log('üö´ –°–æ–±—ã—Ç–∏–µ onBannerNotFound: –Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ø–æ–∫–∞–∑–∞');
                });
              }
              
              setAdsgramReady(true);
              console.log('‚úÖ Adsgram —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } else {
              console.error('‚ùå Adsgram –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
              setAdsgramReady(false);
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Adsgram:', error);
            setAdsgramReady(false);
          }
        }, 100);
      };
      
      script.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Adsgram SDK:', error);
        setAdsgramReady(false);
      };
      
      document.head.appendChild(script);
    };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–ø—Å–∞–º–∏ –æ—Ç App.jsx
  useEffect(() => {
    if (propsFuelCount !== undefined) {
      setFuelCount(propsFuelCount);
    }
    if (propsLastRaceTime !== undefined) {
      setLastRaceTime(propsLastRaceTime);
    }
    if (propsFuelRefillTime !== undefined) {
      setFuelRefillTime(propsFuelRefillTime);
    }
  }, [propsFuelCount, propsLastRaceTime, propsFuelRefillTime]);

    return () => {
      const script = document.querySelector('script[src*="sad.min.js"]');
      if (script) {
        script.remove();
      }
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–ª–∏–≤–∞
  const loadFuelData = () => {
    const savedFuel = localStorage.getItem('fuelCount');
    const savedLastRaceTime = localStorage.getItem('lastRaceTime');
    const savedRefillTime = localStorage.getItem('fuelRefillTime');
    
    if (savedFuel) {
      setFuelCount(parseInt(savedFuel));
    }
    
    if (savedLastRaceTime) {
      setLastRaceTime(parseInt(savedLastRaceTime));
    }
    
    if (savedRefillTime) {
      setFuelRefillTime(parseInt(savedRefillTime));
    }
    
    console.log('‚õΩ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–ª–∏–≤–∞:', {
      fuel: savedFuel || MAX_FUEL,
      lastRace: savedLastRaceTime ? new Date(parseInt(savedLastRaceTime)).toLocaleString() : '–Ω–µ—Ç',
      refillTime: savedRefillTime ? new Date(parseInt(savedRefillTime)).toLocaleString() : '–Ω–µ—Ç'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ø–ª–∏–≤–æ
    checkFuelRefill();
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  const checkFuelRefill = () => {
    const now = Date.now();
    const refillTime = fuelRefillTime || (lastRaceTime ? lastRaceTime + FUEL_REFILL_HOUR : null);
    
    if (refillTime && now >= refillTime && fuelCount < MAX_FUEL) {
      console.log('‚õΩ –¢–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      const newFuelCount = MAX_FUEL;
      const newLastRaceTime = now;
      
      setFuelCount(newFuelCount);
      setLastRaceTime(newLastRaceTime);
      setFuelRefillTime(null);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º App.jsx –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      if (onFuelUpdate) {
        onFuelUpdate(newFuelCount, newLastRaceTime, null);
      }
    }
  };

  // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  useEffect(() => {
    const interval = setInterval(() => {
      checkFuelRefill();
    }, 1000);

    return () => clearInterval(interval);
  }, [fuelCount, lastRaceTime, fuelRefillTime]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–ª–∏–≤–∞ - —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ App.jsx
  const saveFuelData = (newFuelCount, newLastRaceTime, newRefillTime = null) => {
    console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–ª–∏–≤–∞ —á–µ—Ä–µ–∑ App.jsx:', {
      fuel: newFuelCount,
      lastRace: new Date(newLastRaceTime).toLocaleString(),
      refillTime: newRefillTime ? new Date(newRefillTime).toLocaleString() : '–Ω–µ—Ç'
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º App.jsx –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (onFuelUpdate) {
      onFuelUpdate(newFuelCount, newLastRaceTime, newRefillTime);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  const getTimeUntilRefill = () => {
    if (fuelCount >= MAX_FUEL) return null;
    
    const now = Date.now();
    const refillTime = fuelRefillTime || (lastRaceTime ? lastRaceTime + FUEL_REFILL_HOUR : null);
    
    if (!refillTime) return null;
    
    const timeLeft = refillTime - now;
    if (timeLeft <= 0) return null;
    
    const minutes = Math.floor(timeLeft / (60 * 1000));
    const seconds = Math.floor((timeLeft % (60 * 1000)) / 1000);
    
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  // –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
  const showAdForFuel = async () => {
    console.log('‚õΩ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞...');
    
    setIsAdLoading(true);

    try {
      if (!window.adsgramController) {
        console.error('‚ùå AdController –Ω–µ –Ω–∞–π–¥–µ–Ω');
        alert('üòî –†–µ–∫–ª–∞–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        setIsAdLoading(false);
        return;
      }
      
      console.log('üé¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞...');
      
      const result = await window.adsgramController.show();
      
      console.log('‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞! –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ');
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ
      const now = Date.now();
      const newFuelCount = MAX_FUEL;
      const newLastRaceTime = now;
      
      setFuelCount(newFuelCount);
      setLastRaceTime(newLastRaceTime);
      setFuelRefillTime(null);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º App.jsx
      if (onFuelRefillByAd) {
        onFuelRefillByAd();
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
      setShowFuelModal(false);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      alert('‚õΩ –¢–æ–ø–ª–∏–≤–Ω—ã–π –±–∞–∫ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω!\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≥–æ–Ω–∫–∏!');
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      }
      
    } catch (error) {
      console.log('‚è≠Ô∏è –†–µ–∫–ª–∞–º–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞:', error);
      alert('üì∫ –î–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ –¥–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –¥–æ –∫–æ–Ω—Ü–∞');
    } finally {
      setIsAdLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ø–ª–∏–≤–∞ –ø–µ—Ä–µ–¥ –≥–æ–Ω–∫–æ–π
  const checkFuelBeforeRace = () => {
    console.log('‚õΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ø–ª–∏–≤–∞ –ø–µ—Ä–µ–¥ –≥–æ–Ω–∫–æ–π. –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:', fuelCount);
    
    if (fuelCount <= 0) {
      console.log('‚õΩ –¢–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É');
      setShowFuelModal(true);
      return false;
    }
    
    return true;
  };

  // –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –ø–æ—Å–ª–µ –≥–æ–Ω–∫–∏
  const consumeFuel = () => {
    const now = Date.now();
    const newFuelCount = fuelCount - 1;
    
    setFuelCount(newFuelCount);
    setLastRaceTime(now);
    
    // –ï—Å–ª–∏ —Ç–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (newFuelCount <= 0) {
      const refillTime = now + FUEL_REFILL_HOUR;
      setFuelRefillTime(refillTime);
      saveFuelData(newFuelCount, now, refillTime);
    } else {
      saveFuelData(newFuelCount, now);
    }
    
    console.log(`‚õΩ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–ø–ª–∏–≤–æ. –û—Å—Ç–∞–ª–æ—Å—å: ${newFuelCount}/${MAX_FUEL}`);
  };

  const difficulties = {
    easy: { 
      name: '–õ–µ–≥–∫–∏–π', 
      reward: '+50 GC', 
      penalty: '-5%',
      description: '–ù–æ–≤–∏—á–æ–∫' 
    },
    medium: { 
      name: '–°—Ä–µ–¥–Ω–∏–π', 
      reward: '+150 GC', 
      penalty: '-10%',
      description: '–û–ø—ã—Ç–Ω—ã–π' 
    },
    hard: { 
      name: '–°–ª–æ–∂–Ω—ã–π', 
      reward: '+300 GC', 
      penalty: '-15%',
      description: '–ü—Ä–æ—Ñ–∏' 
    }
  };

  const startCountdown = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–ª–∏–≤–æ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    if (!checkFuelBeforeRace()) {
      return;
    }
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç...');
    setRaceState('countdown');
    setCountdown(3);
    
    const countdownInterval = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          clearInterval(countdownInterval);
          startRaceAnimation();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  const startRaceAnimation = () => {
    console.log('üèéÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≥–æ–Ω–∫–∏...');
    setRaceState('racing');
    
    if (playerCarRef.current && opponentCarRef.current) {
      playerCarRef.current.classList.add('animate');
      opponentCarRef.current.classList.add('animate');
    }
    
    setTimeout(async () => {
      console.log('üèÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏...');
      
      const result = await onStartRace(selectedDifficulty);
      setRaceResult(result);
      setTotalRaces(prev => prev + 1);
      
      if (result.result === 'win') {
        setWins(prev => prev + 1);
        setWinStreak(prev => prev + 1);
      } else {
        setWinStreak(0);
      }
      
      setRaceState('finished');
      
      // –¢—Ä–∞—Ç–∏–º —Ç–æ–ø–ª–∏–≤–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏
      consumeFuel();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—à–∏–Ω—ã –Ω–∞ —Å—Ç–∞—Ä—Ç
      setTimeout(() => {
        if (playerCarRef.current && opponentCarRef.current) {
          playerCarRef.current.classList.remove('animate');
          playerCarRef.current.classList.add('returning');
          opponentCarRef.current.classList.remove('animate');
          opponentCarRef.current.classList.add('returning');
        }
        
        setTimeout(() => {
          if (playerCarRef.current && opponentCarRef.current) {
            playerCarRef.current.classList.remove('returning');
            opponentCarRef.current.classList.remove('returning');
          }
          setRaceState('ready');
          setRaceResult(null);
        }, 2500);
      }, 3000);
    }, 2500);
  };

  const canStartRace = raceState === 'ready' && fuelCount > 0;
  
  const buttonText = () => {
    if (fuelCount <= 0) {
      return '‚õΩ –ù–µ—Ç —Ç–æ–ø–ª–∏–≤–∞';
    }
    
    switch (raceState) {
      case 'countdown':
        return countdown.toString();
      case 'racing':
        return '–ì–æ–Ω–∫–∞!';
      case 'finished':
        return raceResult?.result === 'win' ? '–ü–æ–±–µ–¥–∞!' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!';
      default:
        return '–ù–∞—á–∞—Ç—å –ó–∞–µ–∑–¥!';
    }
  };

  const timeUntilRefill = getTimeUntilRefill();

  return (
    <div className="race-screen">
      <div className="race-screen__content">
        
        <div className="race-header">
          <h2>üèÅ –ì–æ–Ω–∫–∏</h2>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–ø–ª–∏–≤–∞ */}
          <div className="fuel-indicator">
            <div className="fuel-bar">
              <div className="fuel-label">‚õΩ –¢–æ–ø–ª–∏–≤–æ:</div>
              <div className="fuel-tanks">
                {[...Array(MAX_FUEL)].map((_, i) => (
                  <div 
                    key={i} 
                    className={`fuel-tank ${i < fuelCount ? 'full' : 'empty'}`}
                  >
                    {i < fuelCount ? 'üü¢' : '‚ö´'}
                  </div>
                ))}
              </div>
              <div className="fuel-count">{fuelCount}/{MAX_FUEL}</div>
            </div>
            
            {timeUntilRefill && (
              <div className="fuel-refill-timer">
                ‚è∞ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {timeUntilRefill}
              </div>
            )}
            
            {fuelCount <= 0 && (
              <div className="fuel-empty-message">
                ‚õΩ –¢–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å! –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á–∞—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É
              </div>
            )}
          </div>
          
          {winStreak > 1 && (
            <div className="win-streak">üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {winStreak}</div>
          )}
          <div className="race-stats">
            –ü–æ–±–µ–¥: {wins}/{totalRaces} ({totalRaces > 0 ? Math.round((wins/totalRaces) * 100) : 0}%)
          </div>
        </div>

        <div className="participants-info">
          <div className="participant">
            <div className="participant-header">–í–∞—à–∞ –º–∞—à–∏–Ω–∞</div>
            <div className="car-info">
              <div className="car-name">{playerCar?.name}</div>
              <div className="car-stats">
                ‚ö°{playerCar?.stats?.power} üèéÔ∏è{playerCar?.stats?.speed}<br/>
                ‚ú®{playerCar?.stats?.style} üîß{playerCar?.stats?.reliability}
              </div>
            </div>
          </div>
          
          <div className="vs-divider">VS</div>
          
          <div className="participant">
            <div className="participant-header">–°–æ–ø–µ—Ä–Ω–∏–∫</div>
            <div className="car-info">
              <div className="car-name">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫</div>
              <div className="car-stats">
                {difficulties[selectedDifficulty].description}<br/>
                {difficulties[selectedDifficulty].name}
              </div>
            </div>
          </div>
        </div>

        <div className="difficulty-selector">
          <h4>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:</h4>
          <div className="difficulty-buttons">
            {Object.entries(difficulties).map(([key, diff]) => (
              <button
                key={key}
                className={`${selectedDifficulty === key ? 'active' : ''}`}
                onClick={() => setSelectedDifficulty(key)}
                disabled={!canStartRace}
              >
                <div className="difficulty-name">{diff.name}</div>
                <div className="difficulty-reward">
                  {diff.reward} / {diff.penalty}
                </div>
              </button>
            ))}
          </div>
        </div>

        <div className="race-animation-area">
          <div className="race-track">
            {raceState === 'countdown' && (
              <div className="countdown-overlay">
                <div className="countdown-number">{countdown}</div>
              </div>
            )}
            
            {raceState === 'racing' && (
              <div className="speed-lines">
                {[1,2,3,4,5].map(i => (
                  <div key={i} className={`speed-line speed-line-${i}`}></div>
                ))}
              </div>
            )}
            
            <div className="race-car player-car" ref={playerCarRef}>
              <img src={playerCar?.imageUrl || '/placeholder-car.png'} alt="Player car" />
            </div>
            
            <div className="race-car opponent-car" ref={opponentCarRef}>
              <img src="/placeholder-car-2.png" alt="Opponent car" />
            </div>
            
            <div className="finish-line"></div>
          </div>
        </div>

        <div className="race-controls-area">
          <button
            className={`start-race-button ${raceState === 'countdown' ? 'countdown' : ''} ${raceState === 'racing' ? 'racing' : ''} ${!canStartRace ? 'disabled' : ''}`}
            onClick={startCountdown}
            disabled={!canStartRace}
          >
            {buttonText()}
          </button>

          {raceResult && raceState === 'finished' && (
            <div className={`race-result ${raceResult.result}`}>
              <h3>
                {raceResult.result === 'win' ? 'üèÜ –ü–æ–±–µ–¥–∞!' : 
                 raceResult.result === 'lose' ? 'üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!' : '‚ùå –û—à–∏–±–∫–∞!'}
              </h3>
              <p>
                {raceResult.result === 'win' 
                  ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${raceResult.reward?.coins} –º–æ–Ω–µ—Ç –∏ ${raceResult.reward?.xp} XP!`
                  : raceResult.result === 'lose'
                  ? `–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${Math.abs(raceResult.reward?.coins || 0)} –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`
                  : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≥–æ–Ω–∫–µ.'
                }
              </p>
              {raceResult.result === 'lose' && (
                <div className="race-tip">
                  üí° –°–æ–≤–µ—Ç: –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ—é –º–∞—à–∏–Ω—É –≤ —Ç—é–Ω–∏–Ω–≥–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ —Ç–æ–ø–ª–∏–≤–∞ */}
      {showFuelModal && (
        <div className="fuel-modal-overlay">
          <div className="fuel-modal">
            <div className="fuel-modal-header">
              <h3>‚õΩ –¢–æ–ø–ª–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!</h3>
            </div>
            <div className="fuel-modal-content">
              <div className="fuel-modal-icon">üöóüí®</div>
              <p>–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∑–∞–ø—Ä–∞–≤–∫–µ!</p>
              <div className="fuel-options">
                <div className="fuel-option">
                  <strong>‚è∞ –ü–æ–¥–æ–∂–¥–∞—Ç—å —á–∞—Å</strong>
                  <div>–¢–æ–ø–ª–∏–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</div>
                  {timeUntilRefill && (
                    <div className="time-remaining">
                      –û—Å—Ç–∞–ª–æ—Å—å: {timeUntilRefill}
                    </div>
                  )}
                </div>
                <div className="fuel-option-or">–ò–õ–ò</div>
                <div className="fuel-option">
                  <strong>üì∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É</strong>
                  <div>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞ –±–∞–∫–∞</div>
                </div>
              </div>
              {isAdLoading && (
                <div className="ad-loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º—ã...</div>
              )}
            </div>
            <div className="fuel-modal-actions">
              <button 
                className="fuel-modal-button wait"
                onClick={() => setShowFuelModal(false)}
              >
                ‚è∞ –ü–æ–¥–æ–∂–¥–∞—Ç—å
              </button>
              <button 
                className="fuel-modal-button watch"
                onClick={showAdForFuel}
                disabled={isAdLoading || !adsgramReady}
              >
                üì∫ –ó–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è (—Ä–µ–∫–ª–∞–º–∞)
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RaceScreen;