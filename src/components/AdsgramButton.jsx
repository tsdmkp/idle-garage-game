import React, { useEffect, useState } from 'react';

const AdsgramButton = ({ 
  onReward, 
  disabled = false, 
  rewardAmount = 100,
  buttonText = "üì∫ –ë–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã",
  blockId = "12355"
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [adsgram, setAdsgram] = useState(null);
  const [cooldownTime, setCooldownTime] = useState(0);
  const [isReady, setIsReady] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    let retryCount = 0;
    const maxRetries = 10;

    const initAdsgram = () => {
      if (window.Adsgram && blockId) {
        try {
          console.log('üì∫ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Adsgram —Å Block ID:', blockId);
          const adsgramInstance = window.Adsgram.init({ 
            blockId: blockId,
            debug: false // –ü–æ—Å—Ç–∞–≤–∏—Ç—å true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          });
          setAdsgram(adsgramInstance);
          setIsReady(true);
          setError(null);
          console.log('‚úÖ Adsgram —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Adsgram:', error);
          setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        }
      } else if (!window.Adsgram && retryCount < maxRetries) {
        retryCount++;
        console.warn(`‚ö†Ô∏è Adsgram SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}...`);
        setTimeout(initAdsgram, 1000);
      } else if (retryCount >= maxRetries) {
        console.error('‚ùå Adsgram SDK –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        setError('SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –∏–ª–∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    if (document.readyState === 'complete') {
      initAdsgram();
    } else {
      window.addEventListener('load', initAdsgram);
      return () => window.removeEventListener('load', initAdsgram);
    }
  }, [blockId]);

  // –ö—É–ª–¥–∞—É–Ω —Ç–∞–π–º–µ—Ä
  useEffect(() => {
    if (cooldownTime > 0) {
      const timer = setInterval(() => {
        setCooldownTime(prev => Math.max(0, prev - 1));
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [cooldownTime]);

  const handleShowAd = async () => {
    if (!adsgram || isLoading || disabled || cooldownTime > 0 || !isReady) {
      console.log('üö´ –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', {
        hasAdsgram: !!adsgram,
        isLoading,
        disabled,
        cooldownTime,
        isReady
      });
      return;
    }

    setIsLoading(true);
    setError(null);
    console.log('üì∫ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É Adsgram...');

    try {
      await adsgram.show().then(() => {
        console.log('‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞, –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É:', rewardAmount);
        onReward(rewardAmount);
        setCooldownTime(300); // 5 –º–∏–Ω—É—Ç –∫—É–ª–¥–∞—É–Ω
        
        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        if (window.Telegram?.WebApp?.HapticFeedback) {
          window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
        }
      }).catch((result) => {
        console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∫–∞–∑–æ–º —Ä–µ–∫–ª–∞–º—ã:', result);
        
        switch (result?.error) {
          case 'AdBlock':
            setError('–û—Ç–∫–ª—é—á–∏—Ç–µ AdBlock');
            break;
          case 'TimeLimit':
            setError('–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ');
            setCooldownTime(60);
            break;
          case 'NotReady':
            setError('–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
            setTimeout(() => {
              setError(null);
              setIsReady(true);
            }, 3000);
            break;
          default:
            console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', result);
            setError('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            break;
        }
      });
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
      setError('–û—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã');
    } finally {
      setIsLoading(false);
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const isButtonDisabled = disabled || isLoading || cooldownTime > 0 || !isReady || !adsgram;

  return (
    <div style={{ textAlign: 'center' }}>
      <button 
        onClick={handleShowAd}
        disabled={isButtonDisabled}
        style={{
          padding: '12px 20px',
          borderRadius: '10px',
          border: 'none',
          fontSize: '14px',
          fontWeight: 'bold',
          cursor: isButtonDisabled ? 'not-allowed' : 'pointer',
          background: isButtonDisabled 
            ? 'linear-gradient(135deg, #666, #555)' 
            : 'linear-gradient(135deg, #ff6b6b, #ee5a24)',
          color: 'white',
          transition: 'all 0.3s ease',
          opacity: isButtonDisabled ? 0.6 : 1,
          minWidth: '180px',
          boxShadow: isButtonDisabled 
            ? 'none' 
            : '0 4px 12px rgba(255, 107, 107, 0.3)',
          transform: isLoading ? 'scale(0.95)' : 'scale(1)'
        }}
      >
        {isLoading ? (
          'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...'
        ) : cooldownTime > 0 ? (
          `‚è∞ ${formatTime(cooldownTime)}`
        ) : error ? (
          `‚ö†Ô∏è ${error}`
        ) : !isReady || !adsgram ? (
          '‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...'
        ) : (
          `${buttonText} (+${rewardAmount} üí∞)`
        )}
      </button>
      
      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π */}
      {(error || !isReady) && (
        <div style={{
          fontSize: '11px',
          color: error ? '#ff6b6b' : '#999',
          marginTop: '5px'
        }}>
          {error ? `–û—à–∏–±–∫–∞: ${error}` : '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'}
        </div>
      )}
    </div>
  );
};

export default AdsgramButton;