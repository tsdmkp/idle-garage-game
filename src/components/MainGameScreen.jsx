import React, { useState, useEffect } from 'react';
import './MainGameScreen.css';

const MainGameScreen = ({ 
  car, 
  incomeRate, 
  accumulatedIncome, 
  maxAccumulation,
  gameCoins,
  buildings,
  onCollect, 
  onTuneClick, 
  onOpenCarSelector,
  onBuildingClick,
  onAdReward // –ü–æ–∫–∞ —Å–∫—Ä—ã—Ç, –≤–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ
}) => {
  const [collectAnimation, setCollectAnimation] = useState(false);
  const [coins, setCoins] = useState([]);
  
  // –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
  const progressPercentage = maxAccumulation > 0 
    ? Math.min((accumulatedIncome / maxAccumulation) * 100, 100) 
    : 0;
    
  const canCollect = Math.floor(accumulatedIncome) > 0;
  
  // –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  const handleCollect = () => {
    if (!canCollect) return;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –º–æ–Ω–µ—Ç
    const coinCount = Math.min(Math.floor(accumulatedIncome / 10), 20) + 5;
    const newCoins = [];
    
    for (let i = 0; i < coinCount; i++) {
      newCoins.push({
        id: Date.now() + i,
        left: 30 + Math.random() * 40,
        delay: Math.random() * 0.5
      });
    }
    
    setCoins(newCoins);
    setCollectAnimation(true);
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞
    onCollect();
    
    // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    setTimeout(() => {
      setCollectAnimation(false);
      setCoins([]);
    }, 2000);
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
  const formatNumber = (num) => {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return Math.floor(num).toString();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏–π
  const calculateBuildingCost = (building) => {
    if (building.level === 0) {
      return building.baseCost || 1000;
    }
    return Math.floor((building.baseCost || 1000) * Math.pow(1.5, building.level));
  };
  
  return (
    <div className="main-game-screen">
      {/* –§–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç */}
      <div className="game-background"></div>
      
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞ */}
      <div className="game-content">
        
        {/* –°–µ–∫—Ü–∏—è –º–∞—à–∏–Ω—ã */}
        <div className="car-section">
          <div className="car-showcase">
            <div className="car-name-plate">
              <h2>{car?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</h2>
              <div className="car-income-badge">
                <span className="income-icon">üí∞</span>
                <span className="income-text">{formatNumber(incomeRate)}/—á–∞—Å</span>
              </div>
            </div>
            
            <div className="car-image-container">
              <img 
                src={car?.imageUrl || '/placeholder-car.png'} 
                alt={car?.name}
                className={`car-main-image ${canCollect ? 'car-earning' : ''}`}
                onError={(e) => { 
                  e.target.onerror = null; 
                  e.target.src = '/placeholder-car.png'; 
                }}
              />
              
              {/* –ü–ª–∞–≤–∞—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
              <button 
                className="floating-action-button left"
                onClick={onOpenCarSelector}
                title="–í—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É"
              >
                üöó
              </button>
              
              <button 
                className="floating-action-button right"
                onClick={onTuneClick}
                title="–¢—é–Ω–∏–Ω–≥"
              >
                üîß
              </button>
            </div>
            
            {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç–∞—Ç—ã –º–∞—à–∏–Ω—ã */}
            <div className="car-stats-compact">
              <div className="stat-item">
                <span className="stat-icon">‚ö°</span>
                <span className="stat-value">{car?.stats?.power || 0}</span>
                <span className="stat-label">–ú–æ—â–Ω–æ—Å—Ç—å</span>
              </div>
              <div className="stat-item">
                <span className="stat-icon">üèéÔ∏è</span>
                <span className="stat-value">{car?.stats?.speed || 0}</span>
                <span className="stat-label">–°–∫–æ—Ä–æ—Å—Ç—å</span>
              </div>
              <div className="stat-item">
                <span className="stat-icon">üéØ</span>
                <span className="stat-value">{car?.stats?.handling || 0}</span>
                <span className="stat-label">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
              </div>
              <div className="stat-item">
                <span className="stat-icon">üîß</span>
                <span className="stat-value">{car?.stats?.reliability || 0}</span>
                <span className="stat-label">–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å</span>
              </div>
            </div>
          </div>
        </div>
        
        {/* –°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å–±–æ—Ä–∞ */}
        <div className="income-section">
          <div className="progress-container">
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${progressPercentage}%` }}
              >
                <div className="progress-shine"></div>
              </div>
              <div className="progress-text">
                {formatNumber(accumulatedIncome)} / {formatNumber(maxAccumulation)}
              </div>
            </div>
          </div>
          
          {/* –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ */}
          <button 
            className={`collect-button-main ${canCollect ? 'can-collect' : ''} ${collectAnimation ? 'collecting' : ''}`}
            onClick={handleCollect}
            disabled={!canCollect}
          >
            <span className="button-icon">üí∞</span>
            <span className="button-text">
              {canCollect ? `–°–û–ë–†–ê–¢–¨ ${formatNumber(accumulatedIncome)}` : '–ù–ê–ö–ê–ü–õ–ò–í–ê–ï–¢–°–Ø...'}
            </span>
          </button>
        </div>

        {/* –°–µ–∫—Ü–∏—è –∑–¥–∞–Ω–∏–π - –£–õ–£–ß–®–ï–ù–ù–ê–Ø */}
        <div className="buildings-section">
          <div className="buildings-header">
            <h3>üè¢ –ó–¥–∞–Ω–∏—è</h3>
            <div className="buildings-subtitle">–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞</div>
          </div>
          
          <div className="buildings-grid">
            {buildings.map((building) => {
              const cost = calculateBuildingCost(building);
              const canAfford = gameCoins >= cost;
              const isUnlocked = !building.isLocked; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∑–¥–∞–Ω–∏—è
              const currentIncome = building.incomePerHour * building.level;
              const nextIncome = building.incomePerHour * (building.level + 1);
              const incomeIncrease = nextIncome - currentIncome;

              return (
                <div 
                  key={building.id}
                  className={`building-card ${!isUnlocked ? 'locked' : canAfford ? 'affordable' : 'expensive'}`}
                  onClick={() => isUnlocked && onBuildingClick(building.name)}
                >
                  <div className="building-card-header">
                    <div className="building-icon">{building.icon}</div>
                    <div className="building-level-badge">
                      {!isUnlocked ? 'üîí' : building.level}
                    </div>
                  </div>
                  
                  <div className="building-info">
                    <div className="building-name">{building.name}</div>
                    <div className="building-description">
                      {building.level === 0 ? '–ù–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ' : `–£—Ä–æ–≤–µ–Ω—å ${building.level}`}
                    </div>
                    
                    {isUnlocked && (
                      <>
                        <div className="building-income">
                          <span className="income-current">üí∞ {formatNumber(currentIncome)}/—á–∞—Å</span>
                          {building.level > 0 && incomeIncrease > 0 && (
                            <span className="income-increase">+{formatNumber(incomeIncrease)}</span>
                          )}
                        </div>
                        
                        <div className={`building-cost ${canAfford ? 'affordable' : 'expensive'}`}>
                          <span className="cost-icon">üíé</span>
                          <span className="cost-amount">{formatNumber(cost)}</span>
                        </div>
                        
                        <button 
                          className={`building-upgrade-btn ${canAfford ? 'can-upgrade' : 'cant-upgrade'}`}
                          onClick={(e) => {
                            e.stopPropagation();
                            if (canAfford) onBuildingClick(building.name);
                          }}
                          disabled={!canAfford}
                        >
                          {building.level === 0 ? '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å' : '–£–ª—É—á—à–∏—Ç—å'}
                        </button>
                      </>
                    )}
                    
                    {!isUnlocked && (
                      <div className="building-locked-text">
                        –û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–∑–∂–µ
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
      
      {/* –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç */}
      <div className="coins-animation-container">
        {coins.map(coin => (
          <div 
            key={coin.id} 
            className="flying-coin"
            style={{ 
              left: `${coin.left}%`,
              animationDelay: `${coin.delay}s`
            }}
          >
            üí∞
          </div>
        ))}
      </div>
    </div>
  );
};

export default MainGameScreen;