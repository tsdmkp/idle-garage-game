import React, { useState, useEffect } from 'react';
import './Tutorial.css';

const TUTORIAL_STEPS = [
  {
    id: 'welcome',
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Idle Garage! üöó',
    text: '–ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –æ—Ç —Ä–∂–∞–≤–æ–π –º–∞—à–∏–Ω—ã –¥–æ –∏–º–ø–µ—Ä–∏–∏ –∞–≤—Ç–æ–±–∏–∑–Ω–µ—Å–∞!',
    target: null,
    position: 'center',
    action: 'next'
  },
  {
    id: 'car',
    title: '–≠—Ç–æ —Ç–≤–æ—è –ø–µ—Ä–≤–∞—è –º–∞—à–∏–Ω–∞',
    text: '–û–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π —á–∞—Å. –ß–µ–º –ª—É—á—à–µ –º–∞—à–∏–Ω–∞ - —Ç–µ–º –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥!',
    target: '.car-showcase',
    position: 'bottom',
    action: 'next',
    offset: { top: 20 } // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
  },
  {
    id: 'income',
    title: '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞',
    text: '–ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω–æ, —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å. –ú–∞–∫—Å–∏–º—É–º - –∑–∞ 2 —á–∞—Å–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞.',
    target: '.progress-container',
    position: 'bottom', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'top' –Ω–∞ 'bottom'
    action: 'next',
    offset: { top: 20 }
  },
  {
    id: 'collect',
    title: '–°–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç—ã!',
    text: '–ù–∞–∂–º–∏ —ç—Ç—É –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥.',
    target: '.collect-button-main',
    position: 'bottom', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'top' –Ω–∞ 'bottom'
    action: 'collect',
    highlight: true,
    offset: { top: 20 }
  },
  {
    id: 'tuning',
    title: '–£–ª—É—á—à–∞–π —Å–≤–æ—é –º–∞—à–∏–Ω—É',
    text: '–ù–∞–∂–º–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç—é–Ω–∏–Ω–≥ –∏ —É–ª—É—á—à–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—à–∏–Ω—ã.',
    target: '.floating-action-button.right',
    position: 'left',
    action: 'next',
    offset: { left: -20 }
  },
  {
    id: 'buildings',
    title: '–†–∞–∑–≤–∏–≤–∞–π –±–∏–∑–Ω–µ—Å',
    text: '–ü–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–¥–∞–Ω–∏—è.',
    target: '.buildings-toggle',
    position: 'bottom',
    action: 'expand-buildings',
    offset: { top: 10 }
  },
  {
    id: 'navigation',
    title: '–ò—Å—Å–ª–µ–¥—É–π –∏–≥—Ä—É',
    text: '–í–Ω–∏–∑—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–Ω—é —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏: –≥–æ–Ω–∫–∏, –º–∞–≥–∞–∑–∏–Ω –º–∞—à–∏–Ω, –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –¥—Ä—É–≥–æ–µ.',
    target: '.navbar',
    position: 'top',
    action: 'next',
    offset: { top: -20 }
  },
  {
    id: 'complete',
    title: '–¢—ã –≥–æ—Ç–æ–≤! üéâ',
    text: '–°–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç—ã, —É–ª—É—á—à–∞–π –º–∞—à–∏–Ω—ã, —Ä–∞–∑–≤–∏–≤–∞–π –±–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞–Ω—å –º–∞–≥–Ω–∞—Ç–æ–º –∞–≤—Ç–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏!',
    target: null,
    position: 'center',
    action: 'finish'
  }
];

const Tutorial = ({ 
  isActive, 
  currentStep, 
  onNext, 
  onComplete,
  onAction,
  gameState 
}) => {
  const [highlightRect, setHighlightRect] = useState(null);
  const [tooltipPosition, setTooltipPosition] = useState({ top: '50%', left: '50%' });
  const [isVisible, setIsVisible] = useState(false);

  const step = TUTORIAL_STEPS[currentStep] || TUTORIAL_STEPS[0];

  useEffect(() => {
    if (!isActive) {
      setIsVisible(false);
      return;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    const showTimer = setTimeout(() => {
      setIsVisible(true);
    }, 300);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const updatePosition = () => {
      if (step.target) {
        const element = document.querySelector(step.target);
        if (element) {
          const rect = element.getBoundingClientRect();
          setHighlightRect(rect);
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç—É–ª—Ç–∏–ø–∞
          let top, left;
          const tooltipWidth = 300;
          const tooltipHeight = 150;
          const padding = 20;
          const offset = step.offset || {};
          
          switch (step.position) {
            case 'top':
              top = rect.top - tooltipHeight - padding + (offset.top || 0);
              left = rect.left + rect.width / 2 - tooltipWidth / 2 + (offset.left || 0);
              break;
            case 'bottom':
              top = rect.bottom + padding + (offset.top || 0);
              left = rect.left + rect.width / 2 - tooltipWidth / 2 + (offset.left || 0);
              break;
            case 'left':
              top = rect.top + rect.height / 2 - tooltipHeight / 2 + (offset.top || 0);
              left = rect.left - tooltipWidth - padding + (offset.left || 0);
              break;
            case 'right':
              top = rect.top + rect.height / 2 - tooltipHeight / 2 + (offset.top || 0);
              left = rect.right + padding + (offset.left || 0);
              break;
            default:
              top = window.innerHeight / 2 - tooltipHeight / 2;
              left = window.innerWidth / 2 - tooltipWidth / 2;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
          top = Math.max(10, Math.min(window.innerHeight - tooltipHeight - 10, top));
          left = Math.max(10, Math.min(window.innerWidth - tooltipWidth - 10, left));
          
          setTooltipPosition({ top: `${top}px`, left: `${left}px` });
        }
      } else {
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è —à–∞–≥–æ–≤ –±–µ–∑ target
        setHighlightRect(null);
        setTooltipPosition({
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)'
        });
      }
    };

    updatePosition();
    window.addEventListener('resize', updatePosition);
    window.addEventListener('scroll', updatePosition);

    return () => {
      clearTimeout(showTimer);
      window.removeEventListener('resize', updatePosition);
      window.removeEventListener('scroll', updatePosition);
    };
  }, [isActive, step, currentStep]);

  if (!isActive || !isVisible) return null;

  const handleAction = () => {
    switch (step.action) {
      case 'next':
        onNext();
        break;
      case 'collect':
        // –ñ–¥–µ–º, –ø–æ–∫–∞ –∏–≥—Ä–æ–∫ —Å–æ–±–µ—Ä–µ—Ç –º–æ–Ω–µ—Ç—ã
        if (onAction) {
          onAction('collect');
        }
        break;
      case 'expand-buildings':
        if (onAction) {
          onAction('expand-buildings');
        }
        onNext();
        break;
      case 'finish':
        onComplete();
        break;
      default:
        onNext();
    }
  };

  const handleOverlayClick = (e) => {
    // –ü–æ–∑–≤–æ–ª—è–µ–º –∫–ª–∏–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    if (step.highlight && highlightRect) {
      const x = e.clientX;
      const y = e.clientY;
      if (
        x >= highlightRect.left &&
        x <= highlightRect.right &&
        y >= highlightRect.top &&
        y <= highlightRect.bottom
      ) {
        // –ö–ª–∏–∫ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return;
      }
    }
    // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if (step.action === 'next') {
      handleAction();
    }
  };

  return (
    <div className={`tutorial-overlay ${isVisible ? 'visible' : ''}`}>
      {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */}
      <div className="tutorial-backdrop" />
      
      {/* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
      {highlightRect && (
        <div 
          className="tutorial-highlight"
          style={{
            top: `${highlightRect.top - 5}px`,
            left: `${highlightRect.left - 5}px`,
            width: `${highlightRect.width + 10}px`,
            height: `${highlightRect.height + 10}px`,
          }}
        />
      )}
      
      {/* –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É */}
      {highlightRect && step.highlight && (
        <div
          style={{
            position: 'fixed',
            top: `${highlightRect.top}px`,
            left: `${highlightRect.left}px`,
            width: `${highlightRect.width}px`,
            height: `${highlightRect.height}px`,
            pointerEvents: 'all',
            zIndex: 9999
          }}
        />
      )}
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div 
        className={`tutorial-tooltip ${step.position || 'center'}`}
        style={tooltipPosition}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="tutorial-step-indicator">
          –®–∞–≥ {currentStep + 1} –∏–∑ {TUTORIAL_STEPS.length}
        </div>
        
        <h3 className="tutorial-title">{step.title}</h3>
        <p className="tutorial-text">{step.text}</p>
        
        <div className="tutorial-actions">
          {step.action === 'collect' ? (
            <div className="tutorial-hint">–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–±–æ—Ä–∞ ‚¨áÔ∏è</div>
          ) : step.action === 'finish' ? (
            <button className="tutorial-button primary" onClick={handleAction}>
              –ù–∞—á–∞—Ç—å –∏–≥—Ä—É! üöÄ
            </button>
          ) : (
            <button className="tutorial-button" onClick={handleAction}>
              –î–∞–ª–µ–µ ‚Üí
            </button>
          )}
        </div>
        
        <button className="tutorial-skip" onClick={onComplete}>
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
        </button>
      </div>
      
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
      {highlightRect && step.highlight && (
        <div 
          className="tutorial-arrow"
          style={{
            top: `${highlightRect.top - 40}px`,
            left: `${highlightRect.left + highlightRect.width / 2}px`,
          }}
        >
          ‚¨áÔ∏è
        </div>
      )}
    </div>
  );
};

export default Tutorial;