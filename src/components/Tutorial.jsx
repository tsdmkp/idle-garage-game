import React, { useState, useEffect } from 'react';
import './Tutorial.css';

const TUTORIAL_STEPS = [
  {
    id: 'welcome',
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Idle Garage! üöó',
    content: '–ó–¥–µ—Å—å —Ç—ã —Å—Ç–∞–Ω–µ—à—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∞–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –∏ –±—É–¥–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!',
    target: null,
    position: 'center',
    action: null
  },
  {
    id: 'car',
    title: '–≠—Ç–æ —Ç–≤–æ—è –ø–µ—Ä–≤–∞—è –º–∞—à–∏–Ω–∞',
    content: '–û–Ω–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π —á–∞—Å. –ß–µ–º –ª—É—á—à–µ –º–∞—à–∏–Ω–∞ - —Ç–µ–º –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–∞!',
    target: '.car-showcase',
    position: 'bottom',
    action: null
  },
  {
    id: 'income',
    title: '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞',
    content: '–ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥. –ö–æ–≥–¥–∞ –ø–æ–ª–æ—Å–∫–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã.',
    target: '.income-progress-section',
    position: 'top',
    action: null
  },
  {
    id: 'collect',
    title: '–°–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç—ã!',
    content: '–ù–∞–∂–º–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã. –ù–µ –∑–∞–±—ã–≤–∞–π –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ!',
    target: '.collect-button-main',
    position: 'top',
    action: 'waitForCollect'
  },
  {
    id: 'tuning',
    title: '–£–ª—É—á—à–∞–π —Å–≤–æ—é –º–∞—à–∏–Ω—É',
    content: '–ù–∞–∂–º–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç—é–Ω–∏–Ω–≥. –£–ª—É—á—à–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∞—Ç –¥–æ—Ö–æ–¥ –æ—Ç –º–∞—à–∏–Ω—ã!',
    target: '.floating-action-button.right',
    position: 'left',
    action: null
  },
  {
    id: 'buildings',
    title: '–°—Ç—Ä–æ–π –∑–¥–∞–Ω–∏—è',
    content: '–†–∞—Å–∫—Ä–æ–π —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏. –û–Ω–∏ –¥–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥!',
    target: '.buildings-toggle',
    position: 'top',
    action: 'expandBuildings'
  },
  {
    id: 'navigation',
    title: '–ò—Å—Å–ª–µ–¥—É–π –∏–≥—Ä—É',
    content: '–í–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –µ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è. –£—á–∞—Å—Ç–≤—É–π –≤ –≥–æ–Ω–∫–∞—Ö, –ø–æ–∫—É–ø–∞–π –Ω–æ–≤—ã–µ –º–∞—à–∏–Ω—ã –∏ –Ω–∞–Ω–∏–º–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª!',
    target: '.navbar',
    position: 'top',
    action: null
  },
  {
    id: 'finish',
    title: '–£–¥–∞—á–∏! üéâ',
    content: '–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –æ—Å–Ω–æ–≤—ã –∏–≥—Ä—ã. –†–∞–∑–≤–∏–≤–∞–π —Å–≤–æ–π –≥–∞—Ä–∞–∂ –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º!',
    target: null,
    position: 'center',
    action: null
  }
];

const Tutorial = ({ onComplete, gameState, onAction }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isVisible, setIsVisible] = useState(false);
  const [highlightBox, setHighlightBox] = useState(null);
  
  const step = TUTORIAL_STEPS[currentStep];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª
  useEffect(() => {
    const tutorialCompleted = localStorage.getItem('tutorialCompleted');
    if (!tutorialCompleted && gameState.isFirstTime) {
      setIsVisible(true);
    }
  }, [gameState.isFirstTime]);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ —à–∞–≥–∞
  useEffect(() => {
    if (!isVisible || !step.target) {
      setHighlightBox(null);
      return;
    }
    
    const updateHighlight = () => {
      const element = document.querySelector(step.target);
      if (element) {
        const rect = element.getBoundingClientRect();
        setHighlightBox({
          top: rect.top - 5,
          left: rect.left - 5,
          width: rect.width + 10,
          height: rect.height + 10
        });
      }
    };
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä
    setTimeout(updateHighlight, 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', updateHighlight);
    return () => window.removeEventListener('resize', updateHighlight);
  }, [currentStep, isVisible, step.target]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  useEffect(() => {
    if (!step.action || !isVisible) return;
    
    switch (step.action) {
      case 'waitForCollect':
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç
        const checkCollect = () => {
          if (gameState.justCollected) {
            handleNext();
          }
        };
        const interval = setInterval(checkCollect, 500);
        return () => clearInterval(interval);
        
      case 'expandBuildings':
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        setTimeout(() => {
          onAction('expandBuildings');
        }, 500);
        break;
    }
  }, [step.action, gameState, isVisible]);
  
  const handleNext = () => {
    if (currentStep < TUTORIAL_STEPS.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleComplete();
    }
  };
  
  const handleSkip = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?')) {
      handleComplete();
    }
  };
  
  const handleComplete = () => {
    localStorage.setItem('tutorialCompleted', 'true');
    setIsVisible(false);
    if (onComplete) onComplete();
  };
  
  if (!isVisible) return null;
  
  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const getTooltipPosition = () => {
    if (!step.target || step.position === 'center') {
      return {
        position: 'fixed',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)'
      };
    }
    
    if (!highlightBox) return {};
    
    const positions = {
      top: {
        bottom: `${window.innerHeight - highlightBox.top + 10}px`,
        left: `${highlightBox.left + highlightBox.width / 2}px`,
        transform: 'translateX(-50%)'
      },
      bottom: {
        top: `${highlightBox.top + highlightBox.height + 10}px`,
        left: `${highlightBox.left + highlightBox.width / 2}px`,
        transform: 'translateX(-50%)'
      },
      left: {
        top: `${highlightBox.top + highlightBox.height / 2}px`,
        right: `${window.innerWidth - highlightBox.left + 10}px`,
        transform: 'translateY(-50%)'
      },
      right: {
        top: `${highlightBox.top + highlightBox.height / 2}px`,
        left: `${highlightBox.left + highlightBox.width + 10}px`,
        transform: 'translateY(-50%)'
      }
    };
    
    return positions[step.position] || {};
  };
  
  return (
    <div className="tutorial-overlay">
      {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */}
      <div className="tutorial-backdrop" onClick={handleSkip} />
      
      {/* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
      {highlightBox && (
        <div 
          className="tutorial-highlight"
          style={highlightBox}
        />
      )}
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div 
        className="tutorial-tooltip"
        style={getTooltipPosition()}
      >
        <div className="tutorial-header">
          <span className="tutorial-step-counter">
            {currentStep + 1} / {TUTORIAL_STEPS.length}
          </span>
          <button className="tutorial-skip" onClick={handleSkip}>
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
          </button>
        </div>
        
        <h3 className="tutorial-title">{step.title}</h3>
        <p className="tutorial-content">{step.content}</p>
        
        <div className="tutorial-actions">
          {currentStep > 0 && (
            <button 
              className="tutorial-button secondary"
              onClick={() => setCurrentStep(currentStep - 1)}
            >
              –ù–∞–∑–∞–¥
            </button>
          )}
          <button 
            className="tutorial-button primary"
            onClick={handleNext}
          >
            {currentStep === TUTORIAL_STEPS.length - 1 ? '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É!' : '–î–∞–ª–µ–µ'}
          </button>
        </div>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
        <div className="tutorial-progress">
          {TUTORIAL_STEPS.map((_, index) => (
            <div 
              key={index}
              className={`progress-dot ${index <= currentStep ? 'active' : ''}`}
            />
          ))}
        </div>
      </div>
      
      {/* –°—Ç—Ä–µ–ª–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å */}
      {highlightBox && step.position !== 'center' && (
        <div 
          className={`tutorial-arrow arrow-${step.position}`}
          style={getArrowPosition()}
        />
      )}
    </div>
  );
  
  function getArrowPosition() {
    if (!highlightBox) return {};
    
    const arrowPositions = {
      top: {
        bottom: `${window.innerHeight - highlightBox.top + 5}px`,
        left: `${highlightBox.left + highlightBox.width / 2}px`,
        transform: 'translateX(-50%) rotate(180deg)'
      },
      bottom: {
        top: `${highlightBox.top + highlightBox.height + 5}px`,
        left: `${highlightBox.left + highlightBox.width / 2}px`,
        transform: 'translateX(-50%)'
      },
      left: {
        top: `${highlightBox.top + highlightBox.height / 2}px`,
        right: `${window.innerWidth - highlightBox.left + 5}px`,
        transform: 'translateY(-50%) rotate(90deg)'
      },
      right: {
        top: `${highlightBox.top + highlightBox.height / 2}px`,
        left: `${highlightBox.left + highlightBox.width + 5}px`,
        transform: 'translateY(-50%) rotate(-90deg)'
      }
    };
    
    return arrowPositions[step.position] || {};
  }
};

export default Tutorial;