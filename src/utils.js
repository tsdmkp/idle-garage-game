// src/utils.js - –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

console.log("--- utils.js loading ---");

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ò–≥—Ä—ã ---
export const MAX_OFFLINE_HOURS = 2;
export const UPDATE_INTERVAL = 1000;
export const STARTING_COINS = 2000; // ‚úÖ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–û: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π

// --- –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–∞–Ω–∏–π ---
export const INITIAL_BUILDINGS = [
    { id: 'wash', name: '–ê–≤—Ç–æ–º–æ–π–∫–∞', level: 1, icon: 'üßº', isLocked: false },
    { id: 'service', name: '–°–µ—Ä–≤–∏—Å', level: 0, icon: 'üîß', isLocked: false },
    { id: 'tires', name: '–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂', level: 0, icon: 'üîò', isLocked: true },
    { id: 'drift', name: '–®–∫. –î—Ä–∏—Ñ—Ç–∞', level: 0, icon: 'üè´', isLocked: true },
];

// --- –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—à–∏–Ω (–£–ú–ï–†–ï–ù–ù–´–ô –î–û–•–û–î) ---
export const BASE_CAR_STATS = {
    'car_001': { power: 40, speed: 70, style: 5, reliability: 25, baseIncome: 50 },  // ‚úÖ –£–º–µ—Ä–µ–Ω–Ω–æ: –Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    'car_002': { power: 60, speed: 95, style: 10, reliability: 35, baseIncome: 120 }, // ‚úÖ –í 2.4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø–µ—Ä–≤–æ–π
    'car_003': { power: 75, speed: 110, style: 15, reliability: 45, baseIncome: 250 }, // ‚úÖ –í 5 —Ä–∞–∑ –±–æ–ª—å—à–µ –ø–µ—Ä–≤–æ–π
};

// --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –°–¢–ê–¢–û–í –º–∞—à–∏–Ω—ã –∏ –ë–û–ù–£–°–ê –¥–æ—Ö–æ–¥–∞ –æ—Ç –¥–µ—Ç–∞–ª–µ–π ---
export const recalculateStatsAndIncomeBonus = (carId, parts) => {
    const baseStats = BASE_CAR_STATS[carId] || { power: 0, speed: 0, style: 0, reliability: 0 };
    if (!parts || typeof parts !== 'object') {
        console.warn("recalculateStatsAndIncomeBonus: Invalid 'parts' for carId:", carId);
        return { stats: { ...baseStats }, carIncomeBonus: 0 };
    }
    let newPower = baseStats.power || 0; let newSpeed = baseStats.speed || 0; let newStyle = baseStats.style || 0; let newReliability = baseStats.reliability || 0; let carIncomeBonus = 0;
    if (parts.engine) { newPower += (parts.engine.level || 0) * 5; }
    if (parts.tires) { newSpeed += (parts.tires.level || 0) * 3; newReliability -= Math.floor((parts.tires.level || 0) / 5) * 1; }
    if (parts.style_body) { newStyle += (parts.style_body.level || 0) * 4; carIncomeBonus += (parts.style_body.level || 0) * 5; } // ‚úÖ –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
    if (parts.reliability_base) { newReliability += (parts.reliability_base.level || 0) * 5; }
    newReliability = Math.max(1, newReliability); newPower = Math.max(1, newPower); newSpeed = Math.max(1, newSpeed); newStyle = Math.max(1, newStyle);
    return { stats: { power: newPower, speed: newSpeed, style: newStyle, reliability: newReliability }, carIncomeBonus: carIncomeBonus };
};

// --- –ö–∞—Ç–∞–ª–æ–≥ –ú–∞—à–∏–Ω –¥–ª—è –ú–∞–≥–∞–∑–∏–Ω–∞ (–ü–ï–†–ï–°–ú–û–¢–†–ï–ù–ù–´–ï –¶–ï–ù–´) ---
export const CAR_CATALOG = [
  { id: 'car_001', name: '–†–∂–∞–≤–∞—è "–ö–æ–ø–µ–π–∫–∞"', imageUrl: '/placeholder-car.png', price: 0, baseStats: BASE_CAR_STATS['car_001'], initialParts: { engine: { level: 1, name: '–î–≤–∏–≥–∞—Ç–µ–ª—å' }, tires: { level: 0, name: '–®–∏–Ω—ã' }, style_body: { level: 0, name: '–ö—É–∑–æ–≤ (–°—Ç–∏–ª—å)' }, reliability_base: { level: 1, name: '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (–ë–∞–∑–∞)' },}},
  { id: 'car_002', name: '–ë–æ–¥—Ä–∞—è "–î–µ–≤—è—Ç–∫–∞"', imageUrl: '/placeholder-car-2.png', price: 8000, baseStats: BASE_CAR_STATS['car_002'], initialParts: { engine: { level: 1, name: '–î–≤–∏–≥–∞—Ç–µ–ª—å' }, tires: { level: 1, name: '–®–∏–Ω—ã' }, style_body: { level: 0, name: '–ö—É–∑–æ–≤ (–°—Ç–∏–ª—å)' }, reliability_base: { level: 1, name: '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (–ë–∞–∑–∞)' },}}, // ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∞ —Ü–µ–Ω–∞: 5–∫ ‚Üí 8–∫
  { id: 'car_003', name: '–°—Ç–∞—Ä—ã–π "–Ø–ø–æ–Ω–µ—Ü"', imageUrl: '/placeholder-car-3.png', price: 25000, baseStats: BASE_CAR_STATS['car_003'], initialParts: { engine: { level: 2, name: '–î–≤–∏–≥–∞—Ç–µ–ª—å' }, tires: { level: 1, name: '–®–∏–Ω—ã' }, style_body: { level: 1, name: '–ö—É–∑–æ–≤ (–°—Ç–∏–ª—å)' }, reliability_base: { level: 2, name: '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (–ë–∞–∑–∞)' },}}, // ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∞ —Ü–µ–Ω–∞: 15–∫ ‚Üí 25–∫
];

// --- –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –º–∞—à–∏–Ω—ã ---
export const getInitialPlayerCar = () => {
    const carData = CAR_CATALOG.find(c => c.id === 'car_001');
    if (!carData || !carData.initialParts) {
        console.error("Could not find initial car data for car_001!");
        return {id: 'error', name:'Error', imageUrl:'/error.png', stats:{power:1,speed:1,style:1,reliability:1}, parts:{}};
    }
    const { stats } = recalculateStatsAndIncomeBonus(carData.id, carData.initialParts);
    return { id: carData.id, name: carData.name, imageUrl: carData.imageUrl, stats: stats, parts: { ...carData.initialParts }};
};
export const INITIAL_CAR = getInitialPlayerCar();

// --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–æ—Ç–æ–≤ ---
export const BOT_STATS = {
  easy:   { power: 35, speed: 65, reliability: 55 },
  medium: { power: 62, speed: 92, reliability: 45 },
  hard:   { power: 90, speed: 120, reliability: 35 },
};

// --- –û–ø–∏—Å–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–ª–∞ ---
export const STAFF_CATALOG = {
    mechanic: { id: 'mechanic', name: '–ú–µ—Ö–∞–Ω–∏–∫', icon: 'üë®‚Äçüîß', description: '–£—Å–∫–æ—Ä—è–µ—Ç —Ç—é–Ω–∏–Ω–≥.', baseHireCost: 1500, costMultiplier: 1.8, maxLevel: 10, getBonus: (level) => ({ speedBoostPercent: level * 5 }) }, // ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞
    manager: { id: 'manager', name: '–ú–µ–Ω–µ–¥–∂–µ—Ä', icon: 'üíº', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥.', baseHireCost: 3000, costMultiplier: 2.0, maxLevel: 5, getBonus: (level) => ({ incomeBoostPercent: level * 8 }) }, // ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–∞
};

// --- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –°–¢–û–ò–ú–û–°–¢–ò –∞–ø–≥—Ä–µ–π–¥–∞ –¥–µ—Ç–∞–ª–∏ ---
export const calculateUpgradeCost = (partType, currentLevel) => {
  const partCostSettings = { engine: { base: 150, multiplier: 1.18 }, tires: { base: 70,  multiplier: 1.15 }, style_body: { base: 100, multiplier: 1.12 }, reliability_base: { base: 80,  multiplier: 1.16 }, default: { base: 100, multiplier: 1.15 } };
  const settings = partCostSettings[partType] || partCostSettings.default;
  const level = typeof currentLevel === 'number' && !isNaN(currentLevel) ? currentLevel : 0;
  const cost = Math.round(settings.base * Math.pow(settings.multiplier, level));
  return Math.max(cost, 10);
};

// --- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –û–ë–©–ï–ô —Å—Ç–∞–≤–∫–∏ –¥–æ—Ö–æ–¥–∞ –≤ —á–∞—Å (–°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô –î–û–•–û–î) ---
export const calculateTotalIncomeRate = (buildingsState, carState, currentStaffState = {}) => {
    if (!carState || !carState.id || !carState.parts) { return 0; }
    
    // ‚úÖ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô –¥–æ—Ö–æ–¥ –æ—Ç –∑–¥–∞–Ω–∏–π
    const incomeFromBuildings = buildingsState.reduce((sum, b) => { 
        if (b.level > 0 && !b.isLocked) { 
            switch (b.id) { 
                case 'wash': return sum + b.level * 15;    // ‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ: –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                case 'service': return sum + b.level * 30; // ‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ  
                default: return sum; 
            }
        } 
        return sum; 
    }, 0);
    
    const baseStats = BASE_CAR_STATS[carState.id] || { baseIncome: 0 };
    const { carIncomeBonus } = recalculateStatsAndIncomeBonus(carState.id, carState.parts);
    const validCarIncomeBonus = typeof carIncomeBonus === 'number' && !isNaN(carIncomeBonus) ? carIncomeBonus : 0;
    const totalCarIncome = (baseStats.baseIncome || 0) + validCarIncomeBonus;
    let totalRate = totalCarIncome + incomeFromBuildings;
    const managerLevel = currentStaffState?.manager || 0;
    if (managerLevel > 0 && STAFF_CATALOG.manager?.getBonus) {
        try { const bonus = STAFF_CATALOG.manager.getBonus(managerLevel); const percent = bonus?.incomeBoostPercent; if(typeof percent === 'number' && !isNaN(percent)) { totalRate *= (1 + (percent / 100)); } } catch (e) { console.error(e); }
    }
    const roundedRate = Math.round(totalRate);
    return isNaN(roundedRate) ? 0 : roundedRate;
};

// --- –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞–π–º–∞/—É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ---
export const calculateStaffCost = (staffId, hiredStaff) => {
    const staffInfo = STAFF_CATALOG[staffId]; if (!staffInfo) return Infinity;
    const { maxLevel = 0, baseHireCost = 0, costMultiplier = 1 } = staffInfo;
    let currentLevel = hiredStaff?.[staffId] || 0;
    if (currentLevel >= maxLevel) { return Infinity; }
    let cost = (currentLevel === 0) ? baseHireCost : Math.floor(baseHireCost * Math.pow(costMultiplier, currentLevel));
    return isNaN(cost) ? Infinity : cost;
};

// --- –§—É–Ω–∫—Ü–∏—è –°–∏–º—É–ª—è—Ü–∏–∏ –ì–æ–Ω–∫–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–ì–†–ê–î–´) ---
export const simulateRace = async (playerCar, difficulty, currentCoins, currentXp) => {
  if (!playerCar?.stats) { console.error("SimulateRace: Player car/stats missing."); return null; }
  console.log(`Simulating race logic for difficulty: ${difficulty}`);
  const baseBotStats = BOT_STATS[difficulty];
  if (!baseBotStats) { console.error(`SimulateRace: Invalid difficulty: "${difficulty}"`); return null; }
  // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–æ–≤ –±–æ—Ç–∞
  const currentBot = { power: baseBotStats.power*(0.9+Math.random()*0.2), speed: baseBotStats.speed*(0.9+Math.random()*0.2), reliability: baseBotStats.reliability*(0.9+Math.random()*0.2) };
  // –†–∞—Å—á–µ—Ç —Å–∏–ª—ã
  const playerPowerScore = (playerCar.stats.power*0.5) + (playerCar.stats.speed*0.4) + (playerCar.stats.reliability*0.1*(0.8+Math.random()*0.4));
  const botPowerScore = (currentBot.power*0.5) + (currentBot.speed*0.4) + (currentBot.reliability*0.1*(0.8+Math.random()*0.4));
  console.log(`SimulateRace Scores - Player: ${playerPowerScore.toFixed(1)}, Bot: ${botPowerScore.toFixed(1)}`);
  // –ó–∞–¥–µ—Ä–∂–∫–∞
  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));

  // --- –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ù–ê–ì–†–ê–î–´ (–∫–∞–∫ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ) ---
  let result = 'lose';
  let reward = { coins: 0, xp: 0 };
  let coinsChange = 0;
  let xpChange = 0;

  // ‚úÖ –û–°–¢–ê–í–õ–Ø–ï–ú –∏—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const coinRewards = { easy: 1, medium: 2, hard: 3 };
  const coinPenalty = { easy: -1, medium: -2, hard: -3 };

  // ‚úÖ –û–°–¢–ê–í–õ–Ø–ï–ú –∏—Å—Ö–æ–¥–Ω—ã–µ XP –Ω–∞–≥—Ä–∞–¥—ã
  const xpRewards = { easy: 5, medium: 15, hard: 30 };

  if (playerPowerScore > botPowerScore) { // –ü–æ–±–µ–¥–∞
    result = 'win';
    coinsChange = coinRewards[difficulty] || 1;
    xpChange = xpRewards[difficulty] || 5;
    reward = { coins: coinsChange, xp: xpChange };
    console.log(`SimulateRace: Win! +${coinsChange} GC, +${xpChange} XP`);
  } else { // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
    result = 'lose';
    coinsChange = coinPenalty[difficulty] || -1;
    xpChange = 0;
    reward = { coins: coinsChange, xp: xpChange };
    console.log(`SimulateRace: Lose. Penalty: ${coinsChange} GC.`);
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ù–û–í–´–ô –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç (–Ω–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å)
  const newGameCoins = Math.max(0, currentCoins + coinsChange);
  const newCurrentXp = currentXp + xpChange;

  console.log(`SimulateRace finished. Result: ${result}. Returning new state: Coins=${newGameCoins}, XP=${newCurrentXp}, Reward=${JSON.stringify(reward)}`);
  return { result, reward, newGameCoins, newCurrentXp };
};

console.log("--- utils.js finished defining exports ---");